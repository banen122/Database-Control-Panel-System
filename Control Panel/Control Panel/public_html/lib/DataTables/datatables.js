/*
 * This combined file was created by the DataTables downloader builder:
 *   https://datatables.net/download
 *
 * To rebuild or modify this file with the latest versions of the included
 * software please visit:
 *   https://datatables.net/download/#dt/jq-3.3.1/dt-1.10.18/e-1.9.0/r-2.2.2/sl-1.3.0
 *
 * Included libraries:
 *   jQuery 3 3.3.1, DataTables 1.10.18, Editor 1.9.0, Responsive 2.2.2, Select 1.3.0
 */

/*!
 * jQuery JavaScript Library v3.3.1
 * https://jquery.com/
 *
 * Includes Sizzle.js
 * https://sizzlejs.com/
 *
 * Copyright JS Foundation and other contributors
 * Released under the MIT license
 * https://jquery.org/license
 *
 * Date: 2018-01-20T17:24Z
 */
( function( global, factory ) {

	"use strict";

	if ( typeof module === "object" && typeof module.exports === "object" ) {

		// For CommonJS and CommonJS-like environments where a proper `window`
		// is present, execute the factory and get jQuery.
		// For environments that do not have a `window` with a `document`
		// (such as Node.js), expose a factory as module.exports.
		// This accentuates the need for the creation of a real `window`.
		// e.g. var jQuery = require("jquery")(window);
		// See ticket #14549 for more info.
		module.exports = global.document ?
			factory( global, true ) :
			function( w ) {
				if ( !w.document ) {
					throw new Error( "jQuery requires a window with a document" );
				}
				return factory( w );
			};
	} else {
		factory( global );
	}

// Pass this if window is not defined yet
} )( typeof window !== "undefined" ? window : this, function( window, noGlobal ) {

// Edge <= 12 - 13+, Firefox <=18 - 45+, IE 10 - 11, Safari 5.1 - 9+, iOS 6 - 9.1
// throw exceptions when non-strict code (e.g., ASP.NET 4.5) accesses strict mode
// arguments.callee.caller (trac-13335). But as of jQuery 3.0 (2016), strict mode should be common
// enough that all such attempts are guarded in a try block.
"use strict";

var arr = [];

var document = window.document;

var getProto = Object.getPrototypeOf;

var slice = arr.slice;

var concat = arr.concat;

var push = arr.push;

var indexOf = arr.indexOf;

var class2type = {};

var toString = class2type.toString;

var hasOwn = class2type.hasOwnProperty;

var fnToString = hasOwn.toString;

var ObjectFunctionString = fnToString.call( Object );

var support = {};

var isFunction = function isFunction( obj ) {

      // Support: Chrome <=57, Firefox <=52
      // In some browsers, typeof returns "function" for HTML <object> elements
      // (i.e., `typeof document.createElement( "object" ) === "function"`).
      // We don't want to classify *any* DOM node as a function.
      return typeof obj === "function" && typeof obj.nodeType !== "number";
  };


var isWindow = function isWindow( obj ) {
		return obj != null && obj === obj.window;
	};




	var preservedScriptAttributes = {
		type: true,
		src: true,
		noModule: true
	};

	function DOMEval( code, doc, node ) {
		doc = doc || document;

		var i,
			script = doc.createElement( "script" );

		script.text = code;
		if ( node ) {
			for ( i in preservedScriptAttributes ) {
				if ( node[ i ] ) {
					script[ i ] = node[ i ];
				}
			}
		}
		doc.head.appendChild( script ).parentNode.removeChild( script );
	}


function toType( obj ) {
	if ( obj == null ) {
		return obj + "";
	}

	// Support: Android <=2.3 only (functionish RegExp)
	return typeof obj === "object" || typeof obj === "function" ?
		class2type[ toString.call( obj ) ] || "object" :
		typeof obj;
}
/* global Symbol */
// Defining this global in .eslintrc.json would create a danger of using the global
// unguarded in another place, it seems safer to define global only for this module



var
	version = "3.3.1",

	// Define a local copy of jQuery
	jQuery = function( selector, context ) {

		// The jQuery object is actually just the init constructor 'enhanced'
		// Need init if jQuery is called (just allow error to be thrown if not included)
		return new jQuery.fn.init( selector, context );
	},

	// Support: Android <=4.0 only
	// Make sure we trim BOM and NBSP
	rtrim = /^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g;

jQuery.fn = jQuery.prototype = {

	// The current version of jQuery being used
	jquery: version,

	constructor: jQuery,

	// The default length of a jQuery object is 0
	length: 0,

	toArray: function() {
		return slice.call( this );
	},

	// Get the Nth element in the matched element set OR
	// Get the whole matched element set as a clean array
	get: function( num ) {

		// Return all the elements in a clean array
		if ( num == null ) {
			return slice.call( this );
		}

		// Return just the one element from the set
		return num < 0 ? this[ num + this.length ] : this[ num ];
	},

	// Take an array of elements and push it onto the stack
	// (returning the new matched element set)
	pushStack: function( elems ) {

		// Build a new jQuery matched element set
		var ret = jQuery.merge( this.constructor(), elems );

		// Add the old object onto the stack (as a reference)
		ret.prevObject = this;

		// Return the newly-formed element set
		return ret;
	},

	// Execute a callback for every element in the matched set.
	each: function( callback ) {
		return jQuery.each( this, callback );
	},

	map: function( callback ) {
		return this.pushStack( jQuery.map( this, function( elem, i ) {
			return callback.call( elem, i, elem );
		} ) );
	},

	slice: function() {
		return this.pushStack( slice.apply( this, arguments ) );
	},

	first: function() {
		return this.eq( 0 );
	},

	last: function() {
		return this.eq( -1 );
	},

	eq: function( i ) {
		var len = this.length,
			j = +i + ( i < 0 ? len : 0 );
		return this.pushStack( j >= 0 && j < len ? [ this[ j ] ] : [] );
	},

	end: function() {
		return this.prevObject || this.constructor();
	},

	// For internal use only.
	// Behaves like an Array's method, not like a jQuery method.
	push: push,
	sort: arr.sort,
	splice: arr.splice
};

jQuery.extend = jQuery.fn.extend = function() {
	var options, name, src, copy, copyIsArray, clone,
		target = arguments[ 0 ] || {},
		i = 1,
		length = arguments.length,
		deep = false;

	// Handle a deep copy situation
	if ( typeof target === "boolean" ) {
		deep = target;

		// Skip the boolean and the target
		target = arguments[ i ] || {};
		i++;
	}

	// Handle case when target is a string or something (possible in deep copy)
	if ( typeof target !== "object" && !isFunction( target ) ) {
		target = {};
	}

	// Extend jQuery itself if only one argument is passed
	if ( i === length ) {
		target = this;
		i--;
	}

	for ( ; i < length; i++ ) {

		// Only deal with non-null/undefined values
		if ( ( options = arguments[ i ] ) != null ) {

			// Extend the base object
			for ( name in options ) {
				src = target[ name ];
				copy = options[ name ];

				// Prevent never-ending loop
				if ( target === copy ) {
					continue;
				}

				// Recurse if we're merging plain objects or arrays
				if ( deep && copy && ( jQuery.isPlainObject( copy ) ||
					( copyIsArray = Array.isArray( copy ) ) ) ) {

					if ( copyIsArray ) {
						copyIsArray = false;
						clone = src && Array.isArray( src ) ? src : [];

					} else {
						clone = src && jQuery.isPlainObject( src ) ? src : {};
					}

					// Never move original objects, clone them
					target[ name ] = jQuery.extend( deep, clone, copy );

				// Don't bring in undefined values
				} else if ( copy !== undefined ) {
					target[ name ] = copy;
				}
			}
		}
	}

	// Return the modified object
	return target;
};

jQuery.extend( {

	// Unique for each copy of jQuery on the page
	expando: "jQuery" + ( version + Math.random() ).replace( /\D/g, "" ),

	// Assume jQuery is ready without the ready module
	isReady: true,

	error: function( msg ) {
		throw new Error( msg );
	},

	noop: function() {},

	isPlainObject: function( obj ) {
		var proto, Ctor;

		// Detect obvious negatives
		// Use toString instead of jQuery.type to catch host objects
		if ( !obj || toString.call( obj ) !== "[object Object]" ) {
			return false;
		}

		proto = getProto( obj );

		// Objects with no prototype (e.g., `Object.create( null )`) are plain
		if ( !proto ) {
			return true;
		}

		// Objects with prototype are plain iff they were constructed by a global Object function
		Ctor = hasOwn.call( proto, "constructor" ) && proto.constructor;
		return typeof Ctor === "function" && fnToString.call( Ctor ) === ObjectFunctionString;
	},

	isEmptyObject: function( obj ) {

		/* eslint-disable no-unused-vars */
		// See https://github.com/eslint/eslint/issues/6125
		var name;

		for ( name in obj ) {
			return false;
		}
		return true;
	},

	// Evaluates a script in a global context
	globalEval: function( code ) {
		DOMEval( code );
	},

	each: function( obj, callback ) {
		var length, i = 0;

		if ( isArrayLike( obj ) ) {
			length = obj.length;
			for ( ; i < length; i++ ) {
				if ( callback.call( obj[ i ], i, obj[ i ] ) === false ) {
					break;
				}
			}
		} else {
			for ( i in obj ) {
				if ( callback.call( obj[ i ], i, obj[ i ] ) === false ) {
					break;
				}
			}
		}

		return obj;
	},

	// Support: Android <=4.0 only
	trim: function( text ) {
		return text == null ?
			"" :
			( text + "" ).replace( rtrim, "" );
	},

	// results is for internal usage only
	makeArray: function( arr, results ) {
		var ret = results || [];

		if ( arr != null ) {
			if ( isArrayLike( Object( arr ) ) ) {
				jQuery.merge( ret,
					typeof arr === "string" ?
					[ arr ] : arr
				);
			} else {
				push.call( ret, arr );
			}
		}

		return ret;
	},

	inArray: function( elem, arr, i ) {
		return arr == null ? -1 : indexOf.call( arr, elem, i );
	},

	// Support: Android <=4.0 only, PhantomJS 1 only
	// push.apply(_, arraylike) throws on ancient WebKit
	merge: function( first, second ) {
		var len = +second.length,
			j = 0,
			i = first.length;

		for ( ; j < len; j++ ) {
			first[ i++ ] = second[ j ];
		}

		first.length = i;

		return first;
	},

	grep: function( elems, callback, invert ) {
		var callbackInverse,
			matches = [],
			i = 0,
			length = elems.length,
			callbackExpect = !invert;

		// Go through the array, only saving the items
		// that pass the validator function
		for ( ; i < length; i++ ) {
			callbackInverse = !callback( elems[ i ], i );
			if ( callbackInverse !== callbackExpect ) {
				matches.push( elems[ i ] );
			}
		}

		return matches;
	},

	// arg is for internal usage only
	map: function( elems, callback, arg ) {
		var length, value,
			i = 0,
			ret = [];

		// Go through the array, translating each of the items to their new values
		if ( isArrayLike( elems ) ) {
			length = elems.length;
			for ( ; i < length; i++ ) {
				value = callback( elems[ i ], i, arg );

				if ( value != null ) {
					ret.push( value );
				}
			}

		// Go through every key on the object,
		} else {
			for ( i in elems ) {
				value = callback( elems[ i ], i, arg );

				if ( value != null ) {
					ret.push( value );
				}
			}
		}

		// Flatten any nested arrays
		return concat.apply( [], ret );
	},

	// A global GUID counter for objects
	guid: 1,

	// jQuery.support is not used in Core but other projects attach their
	// properties to it so it needs to exist.
	support: support
} );

if ( typeof Symbol === "function" ) {
	jQuery.fn[ Symbol.iterator ] = arr[ Symbol.iterator ];
}

// Populate the class2type map
jQuery.each( "Boolean Number String Function Array Date RegExp Object Error Symbol".split( " " ),
function( i, name ) {
	class2type[ "[object " + name + "]" ] = name.toLowerCase();
} );

function isArrayLike( obj ) {

	// Support: real iOS 8.2 only (not reproducible in simulator)
	// `in` check used to prevent JIT error (gh-2145)
	// hasOwn isn't used here due to false negatives
	// regarding Nodelist length in IE
	var length = !!obj && "length" in obj && obj.length,
		type = toType( obj );

	if ( isFunction( obj ) || isWindow( obj ) ) {
		return false;
	}

	return type === "array" || length === 0 ||
		typeof length === "number" && length > 0 && ( length - 1 ) in obj;
}
var Sizzle =
/*!
 * Sizzle CSS Selector Engine v2.3.3
 * https://sizzlejs.com/
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license
 * http://jquery.org/license
 *
 * Date: 2016-08-08
 */
(function( window ) {

var i,
	support,
	Expr,
	getText,
	isXML,
	tokenize,
	compile,
	select,
	outermostContext,
	sortInput,
	hasDuplicate,

	// Local document vars
	setDocument,
	document,
	docElem,
	documentIsHTML,
	rbuggyQSA,
	rbuggyMatches,
	matches,
	contains,

	// Instance-specific data
	expando = "sizzle" + 1 * new Date(),
	preferredDoc = window.document,
	dirruns = 0,
	done = 0,
	classCache = createCache(),
	tokenCache = createCache(),
	compilerCache = createCache(),
	sortOrder = function( a, b ) {
		if ( a === b ) {
			hasDuplicate = true;
		}
		return 0;
	},

	// Instance methods
	hasOwn = ({}).hasOwnProperty,
	arr = [],
	pop = arr.pop,
	push_native = arr.push,
	push = arr.push,
	slice = arr.slice,
	// Use a stripped-down indexOf as it's faster than native
	// https://jsperf.com/thor-indexof-vs-for/5
	indexOf = function( list, elem ) {
		var i = 0,
			len = list.length;
		for ( ; i < len; i++ ) {
			if ( list[i] === elem ) {
				return i;
			}
		}
		return -1;
	},

	booleans = "checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",

	// Regular expressions

	// http://www.w3.org/TR/css3-selectors/#whitespace
	whitespace = "[\\x20\\t\\r\\n\\f]",

	// http://www.w3.org/TR/CSS21/syndata.html#value-def-identifier
	identifier = "(?:\\\\.|[\\w-]|[^\0-\\xa0])+",

	// Attribute selectors: http://www.w3.org/TR/selectors/#attribute-selectors
	attributes = "\\[" + whitespace + "*(" + identifier + ")(?:" + whitespace +
		// Operator (capture 2)
		"*([*^$|!~]?=)" + whitespace +
		// "Attribute values must be CSS identifiers [capture 5] or strings [capture 3 or capture 4]"
		"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|(" + identifier + "))|)" + whitespace +
		"*\\]",

	pseudos = ":(" + identifier + ")(?:\\((" +
		// To reduce the number of selectors needing tokenize in the preFilter, prefer arguments:
		// 1. quoted (capture 3; capture 4 or capture 5)
		"('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|" +
		// 2. simple (capture 6)
		"((?:\\\\.|[^\\\\()[\\]]|" + attributes + ")*)|" +
		// 3. anything else (capture 2)
		".*" +
		")\\)|)",

	// Leading and non-escaped trailing whitespace, capturing some non-whitespace characters preceding the latter
	rwhitespace = new RegExp( whitespace + "+", "g" ),
	rtrim = new RegExp( "^" + whitespace + "+|((?:^|[^\\\\])(?:\\\\.)*)" + whitespace + "+$", "g" ),

	rcomma = new RegExp( "^" + whitespace + "*," + whitespace + "*" ),
	rcombinators = new RegExp( "^" + whitespace + "*([>+~]|" + whitespace + ")" + whitespace + "*" ),

	rattributeQuotes = new RegExp( "=" + whitespace + "*([^\\]'\"]*?)" + whitespace + "*\\]", "g" ),

	rpseudo = new RegExp( pseudos ),
	ridentifier = new RegExp( "^" + identifier + "$" ),

	matchExpr = {
		"ID": new RegExp( "^#(" + identifier + ")" ),
		"CLASS": new RegExp( "^\\.(" + identifier + ")" ),
		"TAG": new RegExp( "^(" + identifier + "|[*])" ),
		"ATTR": new RegExp( "^" + attributes ),
		"PSEUDO": new RegExp( "^" + pseudos ),
		"CHILD": new RegExp( "^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\(" + whitespace +
			"*(even|odd|(([+-]|)(\\d*)n|)" + whitespace + "*(?:([+-]|)" + whitespace +
			"*(\\d+)|))" + whitespace + "*\\)|)", "i" ),
		"bool": new RegExp( "^(?:" + booleans + ")$", "i" ),
		// For use in libraries implementing .is()
		// We use this for POS matching in `select`
		"needsContext": new RegExp( "^" + whitespace + "*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\(" +
			whitespace + "*((?:-\\d)?\\d*)" + whitespace + "*\\)|)(?=[^-]|$)", "i" )
	},

	rinputs = /^(?:input|select|textarea|button)$/i,
	rheader = /^h\d$/i,

	rnative = /^[^{]+\{\s*\[native \w/,

	// Easily-parseable/retrievable ID or TAG or CLASS selectors
	rquickExpr = /^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,

	rsibling = /[+~]/,

	// CSS escapes
	// http://www.w3.org/TR/CSS21/syndata.html#escaped-characters
	runescape = new RegExp( "\\\\([\\da-f]{1,6}" + whitespace + "?|(" + whitespace + ")|.)", "ig" ),
	funescape = function( _, escaped, escapedWhitespace ) {
		var high = "0x" + escaped - 0x10000;
		// NaN means non-codepoint
		// Support: Firefox<24
		// Workaround erroneous numeric interpretation of +"0x"
		return high !== high || escapedWhitespace ?
			escaped :
			high < 0 ?
				// BMP codepoint
				String.fromCharCode( high + 0x10000 ) :
				// Supplemental Plane codepoint (surrogate pair)
				String.fromCharCode( high >> 10 | 0xD800, high & 0x3FF | 0xDC00 );
	},

	// CSS string/identifier serialization
	// https://drafts.csswg.org/cssom/#common-serializing-idioms
	rcssescape = /([\0-\x1f\x7f]|^-?\d)|^-$|[^\0-\x1f\x7f-\uFFFF\w-]/g,
	fcssescape = function( ch, asCodePoint ) {
		if ( asCodePoint ) {

			// U+0000 NULL becomes U+FFFD REPLACEMENT CHARACTER
			if ( ch === "\0" ) {
				return "\uFFFD";
			}

			// Control characters and (dependent upon position) numbers get escaped as code points
			return ch.slice( 0, -1 ) + "\\" + ch.charCodeAt( ch.length - 1 ).toString( 16 ) + " ";
		}

		// Other potentially-special ASCII characters get backslash-escaped
		return "\\" + ch;
	},

	// Used for iframes
	// See setDocument()
	// Removing the function wrapper causes a "Permission Denied"
	// error in IE
	unloadHandler = function() {
		setDocument();
	},

	disabledAncestor = addCombinator(
		function( elem ) {
			return elem.disabled === true && ("form" in elem || "label" in elem);
		},
		{ dir: "parentNode", next: "legend" }
	);

// Optimize for push.apply( _, NodeList )
try {
	push.apply(
		(arr = slice.call( preferredDoc.childNodes )),
		preferredDoc.childNodes
	);
	// Support: Android<4.0
	// Detect silently failing push.apply
	arr[ preferredDoc.childNodes.length ].nodeType;
} catch ( e ) {
	push = { apply: arr.length ?

		// Leverage slice if possible
		function( target, els ) {
			push_native.apply( target, slice.call(els) );
		} :

		// Support: IE<9
		// Otherwise append directly
		function( target, els ) {
			var j = target.length,
				i = 0;
			// Can't trust NodeList.length
			while ( (target[j++] = els[i++]) ) {}
			target.length = j - 1;
		}
	};
}

function Sizzle( selector, context, results, seed ) {
	var m, i, elem, nid, match, groups, newSelector,
		newContext = context && context.ownerDocument,

		// nodeType defaults to 9, since context defaults to document
		nodeType = context ? context.nodeType : 9;

	results = results || [];

	// Return early from calls with invalid selector or context
	if ( typeof selector !== "string" || !selector ||
		nodeType !== 1 && nodeType !== 9 && nodeType !== 11 ) {

		return results;
	}

	// Try to shortcut find operations (as opposed to filters) in HTML documents
	if ( !seed ) {

		if ( ( context ? context.ownerDocument || context : preferredDoc ) !== document ) {
			setDocument( context );
		}
		context = context || document;

		if ( documentIsHTML ) {

			// If the selector is sufficiently simple, try using a "get*By*" DOM method
			// (excepting DocumentFragment context, where the methods don't exist)
			if ( nodeType !== 11 && (match = rquickExpr.exec( selector )) ) {

				// ID selector
				if ( (m = match[1]) ) {

					// Document context
					if ( nodeType === 9 ) {
						if ( (elem = context.getElementById( m )) ) {

							// Support: IE, Opera, Webkit
							// TODO: identify versions
							// getElementById can match elements by name instead of ID
							if ( elem.id === m ) {
								results.push( elem );
								return results;
							}
						} else {
							return results;
						}

					// Element context
					} else {

						// Support: IE, Opera, Webkit
						// TODO: identify versions
						// getElementById can match elements by name instead of ID
						if ( newContext && (elem = newContext.getElementById( m )) &&
							contains( context, elem ) &&
							elem.id === m ) {

							results.push( elem );
							return results;
						}
					}

				// Type selector
				} else if ( match[2] ) {
					push.apply( results, context.getElementsByTagName( selector ) );
					return results;

				// Class selector
				} else if ( (m = match[3]) && support.getElementsByClassName &&
					context.getElementsByClassName ) {

					push.apply( results, context.getElementsByClassName( m ) );
					return results;
				}
			}

			// Take advantage of querySelectorAll
			if ( support.qsa &&
				!compilerCache[ selector + " " ] &&
				(!rbuggyQSA || !rbuggyQSA.test( selector )) ) {

				if ( nodeType !== 1 ) {
					newContext = context;
					newSelector = selector;

				// qSA looks outside Element context, which is not what we want
				// Thanks to Andrew Dupont for this workaround technique
				// Support: IE <=8
				// Exclude object elements
				} else if ( context.nodeName.toLowerCase() !== "object" ) {

					// Capture the context ID, setting it first if necessary
					if ( (nid = context.getAttribute( "id" )) ) {
						nid = nid.replace( rcssescape, fcssescape );
					} else {
						context.setAttribute( "id", (nid = expando) );
					}

					// Prefix every selector in the list
					groups = tokenize( selector );
					i = groups.length;
					while ( i-- ) {
						groups[i] = "#" + nid + " " + toSelector( groups[i] );
					}
					newSelector = groups.join( "," );

					// Expand context for sibling selectors
					newContext = rsibling.test( selector ) && testContext( context.parentNode ) ||
						context;
				}

				if ( newSelector ) {
					try {
						push.apply( results,
							newContext.querySelectorAll( newSelector )
						);
						return results;
					} catch ( qsaError ) {
					} finally {
						if ( nid === expando ) {
							context.removeAttribute( "id" );
						}
					}
				}
			}
		}
	}

	// All others
	return select( selector.replace( rtrim, "$1" ), context, results, seed );
}

/**
 * Create key-value caches of limited size
 * @returns {function(string, object)} Returns the Object data after storing it on itself with
 *	property name the (space-suffixed) string and (if the cache is larger than Expr.cacheLength)
 *	deleting the oldest entry
 */
function createCache() {
	var keys = [];

	function cache( key, value ) {
		// Use (key + " ") to avoid collision with native prototype properties (see Issue #157)
		if ( keys.push( key + " " ) > Expr.cacheLength ) {
			// Only keep the most recent entries
			delete cache[ keys.shift() ];
		}
		return (cache[ key + " " ] = value);
	}
	return cache;
}

/**
 * Mark a function for special use by Sizzle
 * @param {Function} fn The function to mark
 */
function markFunction( fn ) {
	fn[ expando ] = true;
	return fn;
}

/**
 * Support testing using an element
 * @param {Function} fn Passed the created element and returns a boolean result
 */
function assert( fn ) {
	var el = document.createElement("fieldset");

	try {
		return !!fn( el );
	} catch (e) {
		return false;
	} finally {
		// Remove from its parent by default
		if ( el.parentNode ) {
			el.parentNode.removeChild( el );
		}
		// release memory in IE
		el = null;
	}
}

/**
 * Adds the same handler for all of the specified attrs
 * @param {String} attrs Pipe-separated list of attributes
 * @param {Function} handler The method that will be applied
 */
function addHandle( attrs, handler ) {
	var arr = attrs.split("|"),
		i = arr.length;

	while ( i-- ) {
		Expr.attrHandle[ arr[i] ] = handler;
	}
}

/**
 * Checks document order of two siblings
 * @param {Element} a
 * @param {Element} b
 * @returns {Number} Returns less than 0 if a precedes b, greater than 0 if a follows b
 */
function siblingCheck( a, b ) {
	var cur = b && a,
		diff = cur && a.nodeType === 1 && b.nodeType === 1 &&
			a.sourceIndex - b.sourceIndex;

	// Use IE sourceIndex if available on both nodes
	if ( diff ) {
		return diff;
	}

	// Check if b follows a
	if ( cur ) {
		while ( (cur = cur.nextSibling) ) {
			if ( cur === b ) {
				return -1;
			}
		}
	}

	return a ? 1 : -1;
}

/**
 * Returns a function to use in pseudos for input types
 * @param {String} type
 */
function createInputPseudo( type ) {
	return function( elem ) {
		var name = elem.nodeName.toLowerCase();
		return name === "input" && elem.type === type;
	};
}

/**
 * Returns a function to use in pseudos for buttons
 * @param {String} type
 */
function createButtonPseudo( type ) {
	return function( elem ) {
		var name = elem.nodeName.toLowerCase();
		return (name === "input" || name === "button") && elem.type === type;
	};
}

/**
 * Returns a function to use in pseudos for :enabled/:disabled
 * @param {Boolean} disabled true for :disabled; false for :enabled
 */
function createDisabledPseudo( disabled ) {

	// Known :disabled false positives: fieldset[disabled] > legend:nth-of-type(n+2) :can-disable
	return function( elem ) {

		// Only certain elements can match :enabled or :disabled
		// https://html.spec.whatwg.org/multipage/scripting.html#selector-enabled
		// https://html.spec.whatwg.org/multipage/scripting.html#selector-disabled
		if ( "form" in elem ) {

			// Check for inherited disabledness on relevant non-disabled elements:
			// * listed form-associated elements in a disabled fieldset
			//   https://html.spec.whatwg.org/multipage/forms.html#category-listed
			//   https://html.spec.whatwg.org/multipage/forms.html#concept-fe-disabled
			// * option elements in a disabled optgroup
			//   https://html.spec.whatwg.org/multipage/forms.html#concept-option-disabled
			// All such elements have a "form" property.
			if ( elem.parentNode && elem.disabled === false ) {

				// Option elements defer to a parent optgroup if present
				if ( "label" in elem ) {
					if ( "label" in elem.parentNode ) {
						return elem.parentNode.disabled === disabled;
					} else {
						return elem.disabled === disabled;
					}
				}

				// Support: IE 6 - 11
				// Use the isDisabled shortcut property to check for disabled fieldset ancestors
				return elem.isDisabled === disabled ||

					// Where there is no isDisabled, check manually
					/* jshint -W018 */
					elem.isDisabled !== !disabled &&
						disabledAncestor( elem ) === disabled;
			}

			return elem.disabled === disabled;

		// Try to winnow out elements that can't be disabled before trusting the disabled property.
		// Some victims get caught in our net (label, legend, menu, track), but it shouldn't
		// even exist on them, let alone have a boolean value.
		} else if ( "label" in elem ) {
			return elem.disabled === disabled;
		}

		// Remaining elements are neither :enabled nor :disabled
		return false;
	};
}

/**
 * Returns a function to use in pseudos for positionals
 * @param {Function} fn
 */
function createPositionalPseudo( fn ) {
	return markFunction(function( argument ) {
		argument = +argument;
		return markFunction(function( seed, matches ) {
			var j,
				matchIndexes = fn( [], seed.length, argument ),
				i = matchIndexes.length;

			// Match elements found at the specified indexes
			while ( i-- ) {
				if ( seed[ (j = matchIndexes[i]) ] ) {
					seed[j] = !(matches[j] = seed[j]);
				}
			}
		});
	});
}

/**
 * Checks a node for validity as a Sizzle context
 * @param {Element|Object=} context
 * @returns {Element|Object|Boolean} The input node if acceptable, otherwise a falsy value
 */
function testContext( context ) {
	return context && typeof context.getElementsByTagName !== "undefined" && context;
}

// Expose support vars for convenience
support = Sizzle.support = {};

/**
 * Detects XML nodes
 * @param {Element|Object} elem An element or a document
 * @returns {Boolean} True iff elem is a non-HTML XML node
 */
isXML = Sizzle.isXML = function( elem ) {
	// documentElement is verified for cases where it doesn't yet exist
	// (such as loading iframes in IE - #4833)
	var documentElement = elem && (elem.ownerDocument || elem).documentElement;
	return documentElement ? documentElement.nodeName !== "HTML" : false;
};

/**
 * Sets document-related variables once based on the current document
 * @param {Element|Object} [doc] An element or document object to use to set the document
 * @returns {Object} Returns the current document
 */
setDocument = Sizzle.setDocument = function( node ) {
	var hasCompare, subWindow,
		doc = node ? node.ownerDocument || node : preferredDoc;

	// Return early if doc is invalid or already selected
	if ( doc === document || doc.nodeType !== 9 || !doc.documentElement ) {
		return document;
	}

	// Update global variables
	document = doc;
	docElem = document.documentElement;
	documentIsHTML = !isXML( document );

	// Support: IE 9-11, Edge
	// Accessing iframe documents after unload throws "permission denied" errors (jQuery #13936)
	if ( preferredDoc !== document &&
		(subWindow = document.defaultView) && subWindow.top !== subWindow ) {

		// Support: IE 11, Edge
		if ( subWindow.addEventListener ) {
			subWindow.addEventListener( "unload", unloadHandler, false );

		// Support: IE 9 - 10 only
		} else if ( subWindow.attachEvent ) {
			subWindow.attachEvent( "onunload", unloadHandler );
		}
	}

	/* Attributes
	---------------------------------------------------------------------- */

	// Support: IE<8
	// Verify that getAttribute really returns attributes and not properties
	// (excepting IE8 booleans)
	support.attributes = assert(function( el ) {
		el.className = "i";
		return !el.getAttribute("className");
	});

	/* getElement(s)By*
	---------------------------------------------------------------------- */

	// Check if getElementsByTagName("*") returns only elements
	support.getElementsByTagName = assert(function( el ) {
		el.appendChild( document.createComment("") );
		return !el.getElementsByTagName("*").length;
	});

	// Support: IE<9
	support.getElementsByClassName = rnative.test( document.getElementsByClassName );

	// Support: IE<10
	// Check if getElementById returns elements by name
	// The broken getElementById methods don't pick up programmatically-set names,
	// so use a roundabout getElementsByName test
	support.getById = assert(function( el ) {
		docElem.appendChild( el ).id = expando;
		return !document.getElementsByName || !document.getElementsByName( expando ).length;
	});

	// ID filter and find
	if ( support.getById ) {
		Expr.filter["ID"] = function( id ) {
			var attrId = id.replace( runescape, funescape );
			return function( elem ) {
				return elem.getAttribute("id") === attrId;
			};
		};
		Expr.find["ID"] = function( id, context ) {
			if ( typeof context.getElementById !== "undefined" && documentIsHTML ) {
				var elem = context.getElementById( id );
				return elem ? [ elem ] : [];
			}
		};
	} else {
		Expr.filter["ID"] =  function( id ) {
			var attrId = id.replace( runescape, funescape );
			return function( elem ) {
				var node = typeof elem.getAttributeNode !== "undefined" &&
					elem.getAttributeNode("id");
				return node && node.value === attrId;
			};
		};

		// Support: IE 6 - 7 only
		// getElementById is not reliable as a find shortcut
		Expr.find["ID"] = function( id, context ) {
			if ( typeof context.getElementById !== "undefined" && documentIsHTML ) {
				var node, i, elems,
					elem = context.getElementById( id );

				if ( elem ) {

					// Verify the id attribute
					node = elem.getAttributeNode("id");
					if ( node && node.value === id ) {
						return [ elem ];
					}

					// Fall back on getElementsByName
					elems = context.getElementsByName( id );
					i = 0;
					while ( (elem = elems[i++]) ) {
						node = elem.getAttributeNode("id");
						if ( node && node.value === id ) {
							return [ elem ];
						}
					}
				}

				return [];
			}
		};
	}

	// Tag
	Expr.find["TAG"] = support.getElementsByTagName ?
		function( tag, context ) {
			if ( typeof context.getElementsByTagName !== "undefined" ) {
				return context.getElementsByTagName( tag );

			// DocumentFragment nodes don't have gEBTN
			} else if ( support.qsa ) {
				return context.querySelectorAll( tag );
			}
		} :

		function( tag, context ) {
			var elem,
				tmp = [],
				i = 0,
				// By happy coincidence, a (broken) gEBTN appears on DocumentFragment nodes too
				results = context.getElementsByTagName( tag );

			// Filter out possible comments
			if ( tag === "*" ) {
				while ( (elem = results[i++]) ) {
					if ( elem.nodeType === 1 ) {
						tmp.push( elem );
					}
				}

				return tmp;
			}
			return results;
		};

	// Class
	Expr.find["CLASS"] = support.getElementsByClassName && function( className, context ) {
		if ( typeof context.getElementsByClassName !== "undefined" && documentIsHTML ) {
			return context.getElementsByClassName( className );
		}
	};

	/* QSA/matchesSelector
	---------------------------------------------------------------------- */

	// QSA and matchesSelector support

	// matchesSelector(:active) reports false when true (IE9/Opera 11.5)
	rbuggyMatches = [];

	// qSa(:focus) reports false when true (Chrome 21)
	// We allow this because of a bug in IE8/9 that throws an error
	// whenever `document.activeElement` is accessed on an iframe
	// So, we allow :focus to pass through QSA all the time to avoid the IE error
	// See https://bugs.jquery.com/ticket/13378
	rbuggyQSA = [];

	if ( (support.qsa = rnative.test( document.querySelectorAll )) ) {
		// Build QSA regex
		// Regex strategy adopted from Diego Perini
		assert(function( el ) {
			// Select is set to empty string on purpose
			// This is to test IE's treatment of not explicitly
			// setting a boolean content attribute,
			// since its presence should be enough
			// https://bugs.jquery.com/ticket/12359
			docElem.appendChild( el ).innerHTML = "<a id='" + expando + "'></a>" +
				"<select id='" + expando + "-\r\\' msallowcapture=''>" +
				"<option selected=''></option></select>";

			// Support: IE8, Opera 11-12.16
			// Nothing should be selected when empty strings follow ^= or $= or *=
			// The test attribute must be unknown in Opera but "safe" for WinRT
			// https://msdn.microsoft.com/en-us/library/ie/hh465388.aspx#attribute_section
			if ( el.querySelectorAll("[msallowcapture^='']").length ) {
				rbuggyQSA.push( "[*^$]=" + whitespace + "*(?:''|\"\")" );
			}

			// Support: IE8
			// Boolean attributes and "value" are not treated correctly
			if ( !el.querySelectorAll("[selected]").length ) {
				rbuggyQSA.push( "\\[" + whitespace + "*(?:value|" + booleans + ")" );
			}

			// Support: Chrome<29, Android<4.4, Safari<7.0+, iOS<7.0+, PhantomJS<1.9.8+
			if ( !el.querySelectorAll( "[id~=" + expando + "-]" ).length ) {
				rbuggyQSA.push("~=");
			}

			// Webkit/Opera - :checked should return selected option elements
			// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
			// IE8 throws error here and will not see later tests
			if ( !el.querySelectorAll(":checked").length ) {
				rbuggyQSA.push(":checked");
			}

			// Support: Safari 8+, iOS 8+
			// https://bugs.webkit.org/show_bug.cgi?id=136851
			// In-page `selector#id sibling-combinator selector` fails
			if ( !el.querySelectorAll( "a#" + expando + "+*" ).length ) {
				rbuggyQSA.push(".#.+[+~]");
			}
		});

		assert(function( el ) {
			el.innerHTML = "<a href='' disabled='disabled'></a>" +
				"<select disabled='disabled'><option/></select>";

			// Support: Windows 8 Native Apps
			// The type and name attributes are restricted during .innerHTML assignment
			var input = document.createElement("input");
			input.setAttribute( "type", "hidden" );
			el.appendChild( input ).setAttribute( "name", "D" );

			// Support: IE8
			// Enforce case-sensitivity of name attribute
			if ( el.querySelectorAll("[name=d]").length ) {
				rbuggyQSA.push( "name" + whitespace + "*[*^$|!~]?=" );
			}

			// FF 3.5 - :enabled/:disabled and hidden elements (hidden elements are still enabled)
			// IE8 throws error here and will not see later tests
			if ( el.querySelectorAll(":enabled").length !== 2 ) {
				rbuggyQSA.push( ":enabled", ":disabled" );
			}

			// Support: IE9-11+
			// IE's :disabled selector does not pick up the children of disabled fieldsets
			docElem.appendChild( el ).disabled = true;
			if ( el.querySelectorAll(":disabled").length !== 2 ) {
				rbuggyQSA.push( ":enabled", ":disabled" );
			}

			// Opera 10-11 does not throw on post-comma invalid pseudos
			el.querySelectorAll("*,:x");
			rbuggyQSA.push(",.*:");
		});
	}

	if ( (support.matchesSelector = rnative.test( (matches = docElem.matches ||
		docElem.webkitMatchesSelector ||
		docElem.mozMatchesSelector ||
		docElem.oMatchesSelector ||
		docElem.msMatchesSelector) )) ) {

		assert(function( el ) {
			// Check to see if it's possible to do matchesSelector
			// on a disconnected node (IE 9)
			support.disconnectedMatch = matches.call( el, "*" );

			// This should fail with an exception
			// Gecko does not error, returns false instead
			matches.call( el, "[s!='']:x" );
			rbuggyMatches.push( "!=", pseudos );
		});
	}

	rbuggyQSA = rbuggyQSA.length && new RegExp( rbuggyQSA.join("|") );
	rbuggyMatches = rbuggyMatches.length && new RegExp( rbuggyMatches.join("|") );

	/* Contains
	---------------------------------------------------------------------- */
	hasCompare = rnative.test( docElem.compareDocumentPosition );

	// Element contains another
	// Purposefully self-exclusive
	// As in, an element does not contain itself
	contains = hasCompare || rnative.test( docElem.contains ) ?
		function( a, b ) {
			var adown = a.nodeType === 9 ? a.documentElement : a,
				bup = b && b.parentNode;
			return a === bup || !!( bup && bup.nodeType === 1 && (
				adown.contains ?
					adown.contains( bup ) :
					a.compareDocumentPosition && a.compareDocumentPosition( bup ) & 16
			));
		} :
		function( a, b ) {
			if ( b ) {
				while ( (b = b.parentNode) ) {
					if ( b === a ) {
						return true;
					}
				}
			}
			return false;
		};

	/* Sorting
	---------------------------------------------------------------------- */

	// Document order sorting
	sortOrder = hasCompare ?
	function( a, b ) {

		// Flag for duplicate removal
		if ( a === b ) {
			hasDuplicate = true;
			return 0;
		}

		// Sort on method existence if only one input has compareDocumentPosition
		var compare = !a.compareDocumentPosition - !b.compareDocumentPosition;
		if ( compare ) {
			return compare;
		}

		// Calculate position if both inputs belong to the same document
		compare = ( a.ownerDocument || a ) === ( b.ownerDocument || b ) ?
			a.compareDocumentPosition( b ) :

			// Otherwise we know they are disconnected
			1;

		// Disconnected nodes
		if ( compare & 1 ||
			(!support.sortDetached && b.compareDocumentPosition( a ) === compare) ) {

			// Choose the first element that is related to our preferred document
			if ( a === document || a.ownerDocument === preferredDoc && contains(preferredDoc, a) ) {
				return -1;
			}
			if ( b === document || b.ownerDocument === preferredDoc && contains(preferredDoc, b) ) {
				return 1;
			}

			// Maintain original order
			return sortInput ?
				( indexOf( sortInput, a ) - indexOf( sortInput, b ) ) :
				0;
		}

		return compare & 4 ? -1 : 1;
	} :
	function( a, b ) {
		// Exit early if the nodes are identical
		if ( a === b ) {
			hasDuplicate = true;
			return 0;
		}

		var cur,
			i = 0,
			aup = a.parentNode,
			bup = b.parentNode,
			ap = [ a ],
			bp = [ b ];

		// Parentless nodes are either documents or disconnected
		if ( !aup || !bup ) {
			return a === document ? -1 :
				b === document ? 1 :
				aup ? -1 :
				bup ? 1 :
				sortInput ?
				( indexOf( sortInput, a ) - indexOf( sortInput, b ) ) :
				0;

		// If the nodes are siblings, we can do a quick check
		} else if ( aup === bup ) {
			return siblingCheck( a, b );
		}

		// Otherwise we need full lists of their ancestors for comparison
		cur = a;
		while ( (cur = cur.parentNode) ) {
			ap.unshift( cur );
		}
		cur = b;
		while ( (cur = cur.parentNode) ) {
			bp.unshift( cur );
		}

		// Walk down the tree looking for a discrepancy
		while ( ap[i] === bp[i] ) {
			i++;
		}

		return i ?
			// Do a sibling check if the nodes have a common ancestor
			siblingCheck( ap[i], bp[i] ) :

			// Otherwise nodes in our document sort first
			ap[i] === preferredDoc ? -1 :
			bp[i] === preferredDoc ? 1 :
			0;
	};

	return document;
};

Sizzle.matches = function( expr, elements ) {
	return Sizzle( expr, null, null, elements );
};

Sizzle.matchesSelector = function( elem, expr ) {
	// Set document vars if needed
	if ( ( elem.ownerDocument || elem ) !== document ) {
		setDocument( elem );
	}

	// Make sure that attribute selectors are quoted
	expr = expr.replace( rattributeQuotes, "='$1']" );

	if ( support.matchesSelector && documentIsHTML &&
		!compilerCache[ expr + " " ] &&
		( !rbuggyMatches || !rbuggyMatches.test( expr ) ) &&
		( !rbuggyQSA     || !rbuggyQSA.test( expr ) ) ) {

		try {
			var ret = matches.call( elem, expr );

			// IE 9's matchesSelector returns false on disconnected nodes
			if ( ret || support.disconnectedMatch ||
					// As well, disconnected nodes are said to be in a document
					// fragment in IE 9
					elem.document && elem.document.nodeType !== 11 ) {
				return ret;
			}
		} catch (e) {}
	}

	return Sizzle( expr, document, null, [ elem ] ).length > 0;
};

Sizzle.contains = function( context, elem ) {
	// Set document vars if needed
	if ( ( context.ownerDocument || context ) !== document ) {
		setDocument( context );
	}
	return contains( context, elem );
};

Sizzle.attr = function( elem, name ) {
	// Set document vars if needed
	if ( ( elem.ownerDocument || elem ) !== document ) {
		setDocument( elem );
	}

	var fn = Expr.attrHandle[ name.toLowerCase() ],
		// Don't get fooled by Object.prototype properties (jQuery #13807)
		val = fn && hasOwn.call( Expr.attrHandle, name.toLowerCase() ) ?
			fn( elem, name, !documentIsHTML ) :
			undefined;

	return val !== undefined ?
		val :
		support.attributes || !documentIsHTML ?
			elem.getAttribute( name ) :
			(val = elem.getAttributeNode(name)) && val.specified ?
				val.value :
				null;
};

Sizzle.escape = function( sel ) {
	return (sel + "").replace( rcssescape, fcssescape );
};

Sizzle.error = function( msg ) {
	throw new Error( "Syntax error, unrecognized expression: " + msg );
};

/**
 * Document sorting and removing duplicates
 * @param {ArrayLike} results
 */
Sizzle.uniqueSort = function( results ) {
	var elem,
		duplicates = [],
		j = 0,
		i = 0;

	// Unless we *know* we can detect duplicates, assume their presence
	hasDuplicate = !support.detectDuplicates;
	sortInput = !support.sortStable && results.slice( 0 );
	results.sort( sortOrder );

	if ( hasDuplicate ) {
		while ( (elem = results[i++]) ) {
			if ( elem === results[ i ] ) {
				j = duplicates.push( i );
			}
		}
		while ( j-- ) {
			results.splice( duplicates[ j ], 1 );
		}
	}

	// Clear input after sorting to release objects
	// See https://github.com/jquery/sizzle/pull/225
	sortInput = null;

	return results;
};

/**
 * Utility function for retrieving the text value of an array of DOM nodes
 * @param {Array|Element} elem
 */
getText = Sizzle.getText = function( elem ) {
	var node,
		ret = "",
		i = 0,
		nodeType = elem.nodeType;

	if ( !nodeType ) {
		// If no nodeType, this is expected to be an array
		while ( (node = elem[i++]) ) {
			// Do not traverse comment nodes
			ret += getText( node );
		}
	} else if ( nodeType === 1 || nodeType === 9 || nodeType === 11 ) {
		// Use textContent for elements
		// innerText usage removed for consistency of new lines (jQuery #11153)
		if ( typeof elem.textContent === "string" ) {
			return elem.textContent;
		} else {
			// Traverse its children
			for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {
				ret += getText( elem );
			}
		}
	} else if ( nodeType === 3 || nodeType === 4 ) {
		return elem.nodeValue;
	}
	// Do not include comment or processing instruction nodes

	return ret;
};

Expr = Sizzle.selectors = {

	// Can be adjusted by the user
	cacheLength: 50,

	createPseudo: markFunction,

	match: matchExpr,

	attrHandle: {},

	find: {},

	relative: {
		">": { dir: "parentNode", first: true },
		" ": { dir: "parentNode" },
		"+": { dir: "previousSibling", first: true },
		"~": { dir: "previousSibling" }
	},

	preFilter: {
		"ATTR": function( match ) {
			match[1] = match[1].replace( runescape, funescape );

			// Move the given value to match[3] whether quoted or unquoted
			match[3] = ( match[3] || match[4] || match[5] || "" ).replace( runescape, funescape );

			if ( match[2] === "~=" ) {
				match[3] = " " + match[3] + " ";
			}

			return match.slice( 0, 4 );
		},

		"CHILD": function( match ) {
			/* matches from matchExpr["CHILD"]
				1 type (only|nth|...)
				2 what (child|of-type)
				3 argument (even|odd|\d*|\d*n([+-]\d+)?|...)
				4 xn-component of xn+y argument ([+-]?\d*n|)
				5 sign of xn-component
				6 x of xn-component
				7 sign of y-component
				8 y of y-component
			*/
			match[1] = match[1].toLowerCase();

			if ( match[1].slice( 0, 3 ) === "nth" ) {
				// nth-* requires argument
				if ( !match[3] ) {
					Sizzle.error( match[0] );
				}

				// numeric x and y parameters for Expr.filter.CHILD
				// remember that false/true cast respectively to 0/1
				match[4] = +( match[4] ? match[5] + (match[6] || 1) : 2 * ( match[3] === "even" || match[3] === "odd" ) );
				match[5] = +( ( match[7] + match[8] ) || match[3] === "odd" );

			// other types prohibit arguments
			} else if ( match[3] ) {
				Sizzle.error( match[0] );
			}

			return match;
		},

		"PSEUDO": function( match ) {
			var excess,
				unquoted = !match[6] && match[2];

			if ( matchExpr["CHILD"].test( match[0] ) ) {
				return null;
			}

			// Accept quoted arguments as-is
			if ( match[3] ) {
				match[2] = match[4] || match[5] || "";

			// Strip excess characters from unquoted arguments
			} else if ( unquoted && rpseudo.test( unquoted ) &&
				// Get excess from tokenize (recursively)
				(excess = tokenize( unquoted, true )) &&
				// advance to the next closing parenthesis
				(excess = unquoted.indexOf( ")", unquoted.length - excess ) - unquoted.length) ) {

				// excess is a negative index
				match[0] = match[0].slice( 0, excess );
				match[2] = unquoted.slice( 0, excess );
			}

			// Return only captures needed by the pseudo filter method (type and argument)
			return match.slice( 0, 3 );
		}
	},

	filter: {

		"TAG": function( nodeNameSelector ) {
			var nodeName = nodeNameSelector.replace( runescape, funescape ).toLowerCase();
			return nodeNameSelector === "*" ?
				function() { return true; } :
				function( elem ) {
					return elem.nodeName && elem.nodeName.toLowerCase() === nodeName;
				};
		},

		"CLASS": function( className ) {
			var pattern = classCache[ className + " " ];

			return pattern ||
				(pattern = new RegExp( "(^|" + whitespace + ")" + className + "(" + whitespace + "|$)" )) &&
				classCache( className, function( elem ) {
					return pattern.test( typeof elem.className === "string" && elem.className || typeof elem.getAttribute !== "undefined" && elem.getAttribute("class") || "" );
				});
		},

		"ATTR": function( name, operator, check ) {
			return function( elem ) {
				var result = Sizzle.attr( elem, name );

				if ( result == null ) {
					return operator === "!=";
				}
				if ( !operator ) {
					return true;
				}

				result += "";

				return operator === "=" ? result === check :
					operator === "!=" ? result !== check :
					operator === "^=" ? check && result.indexOf( check ) === 0 :
					operator === "*=" ? check && result.indexOf( check ) > -1 :
					operator === "$=" ? check && result.slice( -check.length ) === check :
					operator === "~=" ? ( " " + result.replace( rwhitespace, " " ) + " " ).indexOf( check ) > -1 :
					operator === "|=" ? result === check || result.slice( 0, check.length + 1 ) === check + "-" :
					false;
			};
		},

		"CHILD": function( type, what, argument, first, last ) {
			var simple = type.slice( 0, 3 ) !== "nth",
				forward = type.slice( -4 ) !== "last",
				ofType = what === "of-type";

			return first === 1 && last === 0 ?

				// Shortcut for :nth-*(n)
				function( elem ) {
					return !!elem.parentNode;
				} :

				function( elem, context, xml ) {
					var cache, uniqueCache, outerCache, node, nodeIndex, start,
						dir = simple !== forward ? "nextSibling" : "previousSibling",
						parent = elem.parentNode,
						name = ofType && elem.nodeName.toLowerCase(),
						useCache = !xml && !ofType,
						diff = false;

					if ( parent ) {

						// :(first|last|only)-(child|of-type)
						if ( simple ) {
							while ( dir ) {
								node = elem;
								while ( (node = node[ dir ]) ) {
									if ( ofType ?
										node.nodeName.toLowerCase() === name :
										node.nodeType === 1 ) {

										return false;
									}
								}
								// Reverse direction for :only-* (if we haven't yet done so)
								start = dir = type === "only" && !start && "nextSibling";
							}
							return true;
						}

						start = [ forward ? parent.firstChild : parent.lastChild ];

						// non-xml :nth-child(...) stores cache data on `parent`
						if ( forward && useCache ) {

							// Seek `elem` from a previously-cached index

							// ...in a gzip-friendly way
							node = parent;
							outerCache = node[ expando ] || (node[ expando ] = {});

							// Support: IE <9 only
							// Defend against cloned attroperties (jQuery gh-1709)
							uniqueCache = outerCache[ node.uniqueID ] ||
								(outerCache[ node.uniqueID ] = {});

							cache = uniqueCache[ type ] || [];
							nodeIndex = cache[ 0 ] === dirruns && cache[ 1 ];
							diff = nodeIndex && cache[ 2 ];
							node = nodeIndex && parent.childNodes[ nodeIndex ];

							while ( (node = ++nodeIndex && node && node[ dir ] ||

								// Fallback to seeking `elem` from the start
								(diff = nodeIndex = 0) || start.pop()) ) {

								// When found, cache indexes on `parent` and break
								if ( node.nodeType === 1 && ++diff && node === elem ) {
									uniqueCache[ type ] = [ dirruns, nodeIndex, diff ];
									break;
								}
							}

						} else {
							// Use previously-cached element index if available
							if ( useCache ) {
								// ...in a gzip-friendly way
								node = elem;
								outerCache = node[ expando ] || (node[ expando ] = {});

								// Support: IE <9 only
								// Defend against cloned attroperties (jQuery gh-1709)
								uniqueCache = outerCache[ node.uniqueID ] ||
									(outerCache[ node.uniqueID ] = {});

								cache = uniqueCache[ type ] || [];
								nodeIndex = cache[ 0 ] === dirruns && cache[ 1 ];
								diff = nodeIndex;
							}

							// xml :nth-child(...)
							// or :nth-last-child(...) or :nth(-last)?-of-type(...)
							if ( diff === false ) {
								// Use the same loop as above to seek `elem` from the start
								while ( (node = ++nodeIndex && node && node[ dir ] ||
									(diff = nodeIndex = 0) || start.pop()) ) {

									if ( ( ofType ?
										node.nodeName.toLowerCase() === name :
										node.nodeType === 1 ) &&
										++diff ) {

										// Cache the index of each encountered element
										if ( useCache ) {
											outerCache = node[ expando ] || (node[ expando ] = {});

											// Support: IE <9 only
											// Defend against cloned attroperties (jQuery gh-1709)
											uniqueCache = outerCache[ node.uniqueID ] ||
												(outerCache[ node.uniqueID ] = {});

											uniqueCache[ type ] = [ dirruns, diff ];
										}

										if ( node === elem ) {
											break;
										}
									}
								}
							}
						}

						// Incorporate the offset, then check against cycle size
						diff -= last;
						return diff === first || ( diff % first === 0 && diff / first >= 0 );
					}
				};
		},

		"PSEUDO": function( pseudo, argument ) {
			// pseudo-class names are case-insensitive
			// http://www.w3.org/TR/selectors/#pseudo-classes
			// Prioritize by case sensitivity in case custom pseudos are added with uppercase letters
			// Remember that setFilters inherits from pseudos
			var args,
				fn = Expr.pseudos[ pseudo ] || Expr.setFilters[ pseudo.toLowerCase() ] ||
					Sizzle.error( "unsupported pseudo: " + pseudo );

			// The user may use createPseudo to indicate that
			// arguments are needed to create the filter function
			// just as Sizzle does
			if ( fn[ expando ] ) {
				return fn( argument );
			}

			// But maintain support for old signatures
			if ( fn.length > 1 ) {
				args = [ pseudo, pseudo, "", argument ];
				return Expr.setFilters.hasOwnProperty( pseudo.toLowerCase() ) ?
					markFunction(function( seed, matches ) {
						var idx,
							matched = fn( seed, argument ),
							i = matched.length;
						while ( i-- ) {
							idx = indexOf( seed, matched[i] );
							seed[ idx ] = !( matches[ idx ] = matched[i] );
						}
					}) :
					function( elem ) {
						return fn( elem, 0, args );
					};
			}

			return fn;
		}
	},

	pseudos: {
		// Potentially complex pseudos
		"not": markFunction(function( selector ) {
			// Trim the selector passed to compile
			// to avoid treating leading and trailing
			// spaces as combinators
			var input = [],
				results = [],
				matcher = compile( selector.replace( rtrim, "$1" ) );

			return matcher[ expando ] ?
				markFunction(function( seed, matches, context, xml ) {
					var elem,
						unmatched = matcher( seed, null, xml, [] ),
						i = seed.length;

					// Match elements unmatched by `matcher`
					while ( i-- ) {
						if ( (elem = unmatched[i]) ) {
							seed[i] = !(matches[i] = elem);
						}
					}
				}) :
				function( elem, context, xml ) {
					input[0] = elem;
					matcher( input, null, xml, results );
					// Don't keep the element (issue #299)
					input[0] = null;
					return !results.pop();
				};
		}),

		"has": markFunction(function( selector ) {
			return function( elem ) {
				return Sizzle( selector, elem ).length > 0;
			};
		}),

		"contains": markFunction(function( text ) {
			text = text.replace( runescape, funescape );
			return function( elem ) {
				return ( elem.textContent || elem.innerText || getText( elem ) ).indexOf( text ) > -1;
			};
		}),

		// "Whether an element is represented by a :lang() selector
		// is based solely on the element's language value
		// being equal to the identifier C,
		// or beginning with the identifier C immediately followed by "-".
		// The matching of C against the element's language value is performed case-insensitively.
		// The identifier C does not have to be a valid language name."
		// http://www.w3.org/TR/selectors/#lang-pseudo
		"lang": markFunction( function( lang ) {
			// lang value must be a valid identifier
			if ( !ridentifier.test(lang || "") ) {
				Sizzle.error( "unsupported lang: " + lang );
			}
			lang = lang.replace( runescape, funescape ).toLowerCase();
			return function( elem ) {
				var elemLang;
				do {
					if ( (elemLang = documentIsHTML ?
						elem.lang :
						elem.getAttribute("xml:lang") || elem.getAttribute("lang")) ) {

						elemLang = elemLang.toLowerCase();
						return elemLang === lang || elemLang.indexOf( lang + "-" ) === 0;
					}
				} while ( (elem = elem.parentNode) && elem.nodeType === 1 );
				return false;
			};
		}),

		// Miscellaneous
		"target": function( elem ) {
			var hash = window.location && window.location.hash;
			return hash && hash.slice( 1 ) === elem.id;
		},

		"root": function( elem ) {
			return elem === docElem;
		},

		"focus": function( elem ) {
			return elem === document.activeElement && (!document.hasFocus || document.hasFocus()) && !!(elem.type || elem.href || ~elem.tabIndex);
		},

		// Boolean properties
		"enabled": createDisabledPseudo( false ),
		"disabled": createDisabledPseudo( true ),

		"checked": function( elem ) {
			// In CSS3, :checked should return both checked and selected elements
			// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
			var nodeName = elem.nodeName.toLowerCase();
			return (nodeName === "input" && !!elem.checked) || (nodeName === "option" && !!elem.selected);
		},

		"selected": function( elem ) {
			// Accessing this property makes selected-by-default
			// options in Safari work properly
			if ( elem.parentNode ) {
				elem.parentNode.selectedIndex;
			}

			return elem.selected === true;
		},

		// Contents
		"empty": function( elem ) {
			// http://www.w3.org/TR/selectors/#empty-pseudo
			// :empty is negated by element (1) or content nodes (text: 3; cdata: 4; entity ref: 5),
			//   but not by others (comment: 8; processing instruction: 7; etc.)
			// nodeType < 6 works because attributes (2) do not appear as children
			for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {
				if ( elem.nodeType < 6 ) {
					return false;
				}
			}
			return true;
		},

		"parent": function( elem ) {
			return !Expr.pseudos["empty"]( elem );
		},

		// Element/input types
		"header": function( elem ) {
			return rheader.test( elem.nodeName );
		},

		"input": function( elem ) {
			return rinputs.test( elem.nodeName );
		},

		"button": function( elem ) {
			var name = elem.nodeName.toLowerCase();
			return name === "input" && elem.type === "button" || name === "button";
		},

		"text": function( elem ) {
			var attr;
			return elem.nodeName.toLowerCase() === "input" &&
				elem.type === "text" &&

				// Support: IE<8
				// New HTML5 attribute values (e.g., "search") appear with elem.type === "text"
				( (attr = elem.getAttribute("type")) == null || attr.toLowerCase() === "text" );
		},

		// Position-in-collection
		"first": createPositionalPseudo(function() {
			return [ 0 ];
		}),

		"last": createPositionalPseudo(function( matchIndexes, length ) {
			return [ length - 1 ];
		}),

		"eq": createPositionalPseudo(function( matchIndexes, length, argument ) {
			return [ argument < 0 ? argument + length : argument ];
		}),

		"even": createPositionalPseudo(function( matchIndexes, length ) {
			var i = 0;
			for ( ; i < length; i += 2 ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		}),

		"odd": createPositionalPseudo(function( matchIndexes, length ) {
			var i = 1;
			for ( ; i < length; i += 2 ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		}),

		"lt": createPositionalPseudo(function( matchIndexes, length, argument ) {
			var i = argument < 0 ? argument + length : argument;
			for ( ; --i >= 0; ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		}),

		"gt": createPositionalPseudo(function( matchIndexes, length, argument ) {
			var i = argument < 0 ? argument + length : argument;
			for ( ; ++i < length; ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		})
	}
};

Expr.pseudos["nth"] = Expr.pseudos["eq"];

// Add button/input type pseudos
for ( i in { radio: true, checkbox: true, file: true, password: true, image: true } ) {
	Expr.pseudos[ i ] = createInputPseudo( i );
}
for ( i in { submit: true, reset: true } ) {
	Expr.pseudos[ i ] = createButtonPseudo( i );
}

// Easy API for creating new setFilters
function setFilters() {}
setFilters.prototype = Expr.filters = Expr.pseudos;
Expr.setFilters = new setFilters();

tokenize = Sizzle.tokenize = function( selector, parseOnly ) {
	var matched, match, tokens, type,
		soFar, groups, preFilters,
		cached = tokenCache[ selector + " " ];

	if ( cached ) {
		return parseOnly ? 0 : cached.slice( 0 );
	}

	soFar = selector;
	groups = [];
	preFilters = Expr.preFilter;

	while ( soFar ) {

		// Comma and first run
		if ( !matched || (match = rcomma.exec( soFar )) ) {
			if ( match ) {
				// Don't consume trailing commas as valid
				soFar = soFar.slice( match[0].length ) || soFar;
			}
			groups.push( (tokens = []) );
		}

		matched = false;

		// Combinators
		if ( (match = rcombinators.exec( soFar )) ) {
			matched = match.shift();
			tokens.push({
				value: matched,
				// Cast descendant combinators to space
				type: match[0].replace( rtrim, " " )
			});
			soFar = soFar.slice( matched.length );
		}

		// Filters
		for ( type in Expr.filter ) {
			if ( (match = matchExpr[ type ].exec( soFar )) && (!preFilters[ type ] ||
				(match = preFilters[ type ]( match ))) ) {
				matched = match.shift();
				tokens.push({
					value: matched,
					type: type,
					matches: match
				});
				soFar = soFar.slice( matched.length );
			}
		}

		if ( !matched ) {
			break;
		}
	}

	// Return the length of the invalid excess
	// if we're just parsing
	// Otherwise, throw an error or return tokens
	return parseOnly ?
		soFar.length :
		soFar ?
			Sizzle.error( selector ) :
			// Cache the tokens
			tokenCache( selector, groups ).slice( 0 );
};

function toSelector( tokens ) {
	var i = 0,
		len = tokens.length,
		selector = "";
	for ( ; i < len; i++ ) {
		selector += tokens[i].value;
	}
	return selector;
}

function addCombinator( matcher, combinator, base ) {
	var dir = combinator.dir,
		skip = combinator.next,
		key = skip || dir,
		checkNonElements = base && key === "parentNode",
		doneName = done++;

	return combinator.first ?
		// Check against closest ancestor/preceding element
		function( elem, context, xml ) {
			while ( (elem = elem[ dir ]) ) {
				if ( elem.nodeType === 1 || checkNonElements ) {
					return matcher( elem, context, xml );
				}
			}
			return false;
		} :

		// Check against all ancestor/preceding elements
		function( elem, context, xml ) {
			var oldCache, uniqueCache, outerCache,
				newCache = [ dirruns, doneName ];

			// We can't set arbitrary data on XML nodes, so they don't benefit from combinator caching
			if ( xml ) {
				while ( (elem = elem[ dir ]) ) {
					if ( elem.nodeType === 1 || checkNonElements ) {
						if ( matcher( elem, context, xml ) ) {
							return true;
						}
					}
				}
			} else {
				while ( (elem = elem[ dir ]) ) {
					if ( elem.nodeType === 1 || checkNonElements ) {
						outerCache = elem[ expando ] || (elem[ expando ] = {});

						// Support: IE <9 only
						// Defend against cloned attroperties (jQuery gh-1709)
						uniqueCache = outerCache[ elem.uniqueID ] || (outerCache[ elem.uniqueID ] = {});

						if ( skip && skip === elem.nodeName.toLowerCase() ) {
							elem = elem[ dir ] || elem;
						} else if ( (oldCache = uniqueCache[ key ]) &&
							oldCache[ 0 ] === dirruns && oldCache[ 1 ] === doneName ) {

							// Assign to newCache so results back-propagate to previous elements
							return (newCache[ 2 ] = oldCache[ 2 ]);
						} else {
							// Reuse newcache so results back-propagate to previous elements
							uniqueCache[ key ] = newCache;

							// A match means we're done; a fail means we have to keep checking
							if ( (newCache[ 2 ] = matcher( elem, context, xml )) ) {
								return true;
							}
						}
					}
				}
			}
			return false;
		};
}

function elementMatcher( matchers ) {
	return matchers.length > 1 ?
		function( elem, context, xml ) {
			var i = matchers.length;
			while ( i-- ) {
				if ( !matchers[i]( elem, context, xml ) ) {
					return false;
				}
			}
			return true;
		} :
		matchers[0];
}

function multipleContexts( selector, contexts, results ) {
	var i = 0,
		len = contexts.length;
	for ( ; i < len; i++ ) {
		Sizzle( selector, contexts[i], results );
	}
	return results;
}

function condense( unmatched, map, filter, context, xml ) {
	var elem,
		newUnmatched = [],
		i = 0,
		len = unmatched.length,
		mapped = map != null;

	for ( ; i < len; i++ ) {
		if ( (elem = unmatched[i]) ) {
			if ( !filter || filter( elem, context, xml ) ) {
				newUnmatched.push( elem );
				if ( mapped ) {
					map.push( i );
				}
			}
		}
	}

	return newUnmatched;
}

function setMatcher( preFilter, selector, matcher, postFilter, postFinder, postSelector ) {
	if ( postFilter && !postFilter[ expando ] ) {
		postFilter = setMatcher( postFilter );
	}
	if ( postFinder && !postFinder[ expando ] ) {
		postFinder = setMatcher( postFinder, postSelector );
	}
	return markFunction(function( seed, results, context, xml ) {
		var temp, i, elem,
			preMap = [],
			postMap = [],
			preexisting = results.length,

			// Get initial elements from seed or context
			elems = seed || multipleContexts( selector || "*", context.nodeType ? [ context ] : context, [] ),

			// Prefilter to get matcher input, preserving a map for seed-results synchronization
			matcherIn = preFilter && ( seed || !selector ) ?
				condense( elems, preMap, preFilter, context, xml ) :
				elems,

			matcherOut = matcher ?
				// If we have a postFinder, or filtered seed, or non-seed postFilter or preexisting results,
				postFinder || ( seed ? preFilter : preexisting || postFilter ) ?

					// ...intermediate processing is necessary
					[] :

					// ...otherwise use results directly
					results :
				matcherIn;

		// Find primary matches
		if ( matcher ) {
			matcher( matcherIn, matcherOut, context, xml );
		}

		// Apply postFilter
		if ( postFilter ) {
			temp = condense( matcherOut, postMap );
			postFilter( temp, [], context, xml );

			// Un-match failing elements by moving them back to matcherIn
			i = temp.length;
			while ( i-- ) {
				if ( (elem = temp[i]) ) {
					matcherOut[ postMap[i] ] = !(matcherIn[ postMap[i] ] = elem);
				}
			}
		}

		if ( seed ) {
			if ( postFinder || preFilter ) {
				if ( postFinder ) {
					// Get the final matcherOut by condensing this intermediate into postFinder contexts
					temp = [];
					i = matcherOut.length;
					while ( i-- ) {
						if ( (elem = matcherOut[i]) ) {
							// Restore matcherIn since elem is not yet a final match
							temp.push( (matcherIn[i] = elem) );
						}
					}
					postFinder( null, (matcherOut = []), temp, xml );
				}

				// Move matched elements from seed to results to keep them synchronized
				i = matcherOut.length;
				while ( i-- ) {
					if ( (elem = matcherOut[i]) &&
						(temp = postFinder ? indexOf( seed, elem ) : preMap[i]) > -1 ) {

						seed[temp] = !(results[temp] = elem);
					}
				}
			}

		// Add elements to results, through postFinder if defined
		} else {
			matcherOut = condense(
				matcherOut === results ?
					matcherOut.splice( preexisting, matcherOut.length ) :
					matcherOut
			);
			if ( postFinder ) {
				postFinder( null, results, matcherOut, xml );
			} else {
				push.apply( results, matcherOut );
			}
		}
	});
}

function matcherFromTokens( tokens ) {
	var checkContext, matcher, j,
		len = tokens.length,
		leadingRelative = Expr.relative[ tokens[0].type ],
		implicitRelative = leadingRelative || Expr.relative[" "],
		i = leadingRelative ? 1 : 0,

		// The foundational matcher ensures that elements are reachable from top-level context(s)
		matchContext = addCombinator( function( elem ) {
			return elem === checkContext;
		}, implicitRelative, true ),
		matchAnyContext = addCombinator( function( elem ) {
			return indexOf( checkContext, elem ) > -1;
		}, implicitRelative, true ),
		matchers = [ function( elem, context, xml ) {
			var ret = ( !leadingRelative && ( xml || context !== outermostContext ) ) || (
				(checkContext = context).nodeType ?
					matchContext( elem, context, xml ) :
					matchAnyContext( elem, context, xml ) );
			// Avoid hanging onto element (issue #299)
			checkContext = null;
			return ret;
		} ];

	for ( ; i < len; i++ ) {
		if ( (matcher = Expr.relative[ tokens[i].type ]) ) {
			matchers = [ addCombinator(elementMatcher( matchers ), matcher) ];
		} else {
			matcher = Expr.filter[ tokens[i].type ].apply( null, tokens[i].matches );

			// Return special upon seeing a positional matcher
			if ( matcher[ expando ] ) {
				// Find the next relative operator (if any) for proper handling
				j = ++i;
				for ( ; j < len; j++ ) {
					if ( Expr.relative[ tokens[j].type ] ) {
						break;
					}
				}
				return setMatcher(
					i > 1 && elementMatcher( matchers ),
					i > 1 && toSelector(
						// If the preceding token was a descendant combinator, insert an implicit any-element `*`
						tokens.slice( 0, i - 1 ).concat({ value: tokens[ i - 2 ].type === " " ? "*" : "" })
					).replace( rtrim, "$1" ),
					matcher,
					i < j && matcherFromTokens( tokens.slice( i, j ) ),
					j < len && matcherFromTokens( (tokens = tokens.slice( j )) ),
					j < len && toSelector( tokens )
				);
			}
			matchers.push( matcher );
		}
	}

	return elementMatcher( matchers );
}

function matcherFromGroupMatchers( elementMatchers, setMatchers ) {
	var bySet = setMatchers.length > 0,
		byElement = elementMatchers.length > 0,
		superMatcher = function( seed, context, xml, results, outermost ) {
			var elem, j, matcher,
				matchedCount = 0,
				i = "0",
				unmatched = seed && [],
				setMatched = [],
				contextBackup = outermostContext,
				// We must always have either seed elements or outermost context
				elems = seed || byElement && Expr.find["TAG"]( "*", outermost ),
				// Use integer dirruns iff this is the outermost matcher
				dirrunsUnique = (dirruns += contextBackup == null ? 1 : Math.random() || 0.1),
				len = elems.length;

			if ( outermost ) {
				outermostContext = context === document || context || outermost;
			}

			// Add elements passing elementMatchers directly to results
			// Support: IE<9, Safari
			// Tolerate NodeList properties (IE: "length"; Safari: <number>) matching elements by id
			for ( ; i !== len && (elem = elems[i]) != null; i++ ) {
				if ( byElement && elem ) {
					j = 0;
					if ( !context && elem.ownerDocument !== document ) {
						setDocument( elem );
						xml = !documentIsHTML;
					}
					while ( (matcher = elementMatchers[j++]) ) {
						if ( matcher( elem, context || document, xml) ) {
							results.push( elem );
							break;
						}
					}
					if ( outermost ) {
						dirruns = dirrunsUnique;
					}
				}

				// Track unmatched elements for set filters
				if ( bySet ) {
					// They will have gone through all possible matchers
					if ( (elem = !matcher && elem) ) {
						matchedCount--;
					}

					// Lengthen the array for every element, matched or not
					if ( seed ) {
						unmatched.push( elem );
					}
				}
			}

			// `i` is now the count of elements visited above, and adding it to `matchedCount`
			// makes the latter nonnegative.
			matchedCount += i;

			// Apply set filters to unmatched elements
			// NOTE: This can be skipped if there are no unmatched elements (i.e., `matchedCount`
			// equals `i`), unless we didn't visit _any_ elements in the above loop because we have
			// no element matchers and no seed.
			// Incrementing an initially-string "0" `i` allows `i` to remain a string only in that
			// case, which will result in a "00" `matchedCount` that differs from `i` but is also
			// numerically zero.
			if ( bySet && i !== matchedCount ) {
				j = 0;
				while ( (matcher = setMatchers[j++]) ) {
					matcher( unmatched, setMatched, context, xml );
				}

				if ( seed ) {
					// Reintegrate element matches to eliminate the need for sorting
					if ( matchedCount > 0 ) {
						while ( i-- ) {
							if ( !(unmatched[i] || setMatched[i]) ) {
								setMatched[i] = pop.call( results );
							}
						}
					}

					// Discard index placeholder values to get only actual matches
					setMatched = condense( setMatched );
				}

				// Add matches to results
				push.apply( results, setMatched );

				// Seedless set matches succeeding multiple successful matchers stipulate sorting
				if ( outermost && !seed && setMatched.length > 0 &&
					( matchedCount + setMatchers.length ) > 1 ) {

					Sizzle.uniqueSort( results );
				}
			}

			// Override manipulation of globals by nested matchers
			if ( outermost ) {
				dirruns = dirrunsUnique;
				outermostContext = contextBackup;
			}

			return unmatched;
		};

	return bySet ?
		markFunction( superMatcher ) :
		superMatcher;
}

compile = Sizzle.compile = function( selector, match /* Internal Use Only */ ) {
	var i,
		setMatchers = [],
		elementMatchers = [],
		cached = compilerCache[ selector + " " ];

	if ( !cached ) {
		// Generate a function of recursive functions that can be used to check each element
		if ( !match ) {
			match = tokenize( selector );
		}
		i = match.length;
		while ( i-- ) {
			cached = matcherFromTokens( match[i] );
			if ( cached[ expando ] ) {
				setMatchers.push( cached );
			} else {
				elementMatchers.push( cached );
			}
		}

		// Cache the compiled function
		cached = compilerCache( selector, matcherFromGroupMatchers( elementMatchers, setMatchers ) );

		// Save selector and tokenization
		cached.selector = selector;
	}
	return cached;
};

/**
 * A low-level selection function that works with Sizzle's compiled
 *  selector functions
 * @param {String|Function} selector A selector or a pre-compiled
 *  selector function built with Sizzle.compile
 * @param {Element} context
 * @param {Array} [results]
 * @param {Array} [seed] A set of elements to match against
 */
select = Sizzle.select = function( selector, context, results, seed ) {
	var i, tokens, token, type, find,
		compiled = typeof selector === "function" && selector,
		match = !seed && tokenize( (selector = compiled.selector || selector) );

	results = results || [];

	// Try to minimize operations if there is only one selector in the list and no seed
	// (the latter of which guarantees us context)
	if ( match.length === 1 ) {

		// Reduce context if the leading compound selector is an ID
		tokens = match[0] = match[0].slice( 0 );
		if ( tokens.length > 2 && (token = tokens[0]).type === "ID" &&
				context.nodeType === 9 && documentIsHTML && Expr.relative[ tokens[1].type ] ) {

			context = ( Expr.find["ID"]( token.matches[0].replace(runescape, funescape), context ) || [] )[0];
			if ( !context ) {
				return results;

			// Precompiled matchers will still verify ancestry, so step up a level
			} else if ( compiled ) {
				context = context.parentNode;
			}

			selector = selector.slice( tokens.shift().value.length );
		}

		// Fetch a seed set for right-to-left matching
		i = matchExpr["needsContext"].test( selector ) ? 0 : tokens.length;
		while ( i-- ) {
			token = tokens[i];

			// Abort if we hit a combinator
			if ( Expr.relative[ (type = token.type) ] ) {
				break;
			}
			if ( (find = Expr.find[ type ]) ) {
				// Search, expanding context for leading sibling combinators
				if ( (seed = find(
					token.matches[0].replace( runescape, funescape ),
					rsibling.test( tokens[0].type ) && testContext( context.parentNode ) || context
				)) ) {

					// If seed is empty or no tokens remain, we can return early
					tokens.splice( i, 1 );
					selector = seed.length && toSelector( tokens );
					if ( !selector ) {
						push.apply( results, seed );
						return results;
					}

					break;
				}
			}
		}
	}

	// Compile and execute a filtering function if one is not provided
	// Provide `match` to avoid retokenization if we modified the selector above
	( compiled || compile( selector, match ) )(
		seed,
		context,
		!documentIsHTML,
		results,
		!context || rsibling.test( selector ) && testContext( context.parentNode ) || context
	);
	return results;
};

// One-time assignments

// Sort stability
support.sortStable = expando.split("").sort( sortOrder ).join("") === expando;

// Support: Chrome 14-35+
// Always assume duplicates if they aren't passed to the comparison function
support.detectDuplicates = !!hasDuplicate;

// Initialize against the default document
setDocument();

// Support: Webkit<537.32 - Safari 6.0.3/Chrome 25 (fixed in Chrome 27)
// Detached nodes confoundingly follow *each other*
support.sortDetached = assert(function( el ) {
	// Should return 1, but returns 4 (following)
	return el.compareDocumentPosition( document.createElement("fieldset") ) & 1;
});

// Support: IE<8
// Prevent attribute/property "interpolation"
// https://msdn.microsoft.com/en-us/library/ms536429%28VS.85%29.aspx
if ( !assert(function( el ) {
	el.innerHTML = "<a href='#'></a>";
	return el.firstChild.getAttribute("href") === "#" ;
}) ) {
	addHandle( "type|href|height|width", function( elem, name, isXML ) {
		if ( !isXML ) {
			return elem.getAttribute( name, name.toLowerCase() === "type" ? 1 : 2 );
		}
	});
}

// Support: IE<9
// Use defaultValue in place of getAttribute("value")
if ( !support.attributes || !assert(function( el ) {
	el.innerHTML = "<input/>";
	el.firstChild.setAttribute( "value", "" );
	return el.firstChild.getAttribute( "value" ) === "";
}) ) {
	addHandle( "value", function( elem, name, isXML ) {
		if ( !isXML && elem.nodeName.toLowerCase() === "input" ) {
			return elem.defaultValue;
		}
	});
}

// Support: IE<9
// Use getAttributeNode to fetch booleans when getAttribute lies
if ( !assert(function( el ) {
	return el.getAttribute("disabled") == null;
}) ) {
	addHandle( booleans, function( elem, name, isXML ) {
		var val;
		if ( !isXML ) {
			return elem[ name ] === true ? name.toLowerCase() :
					(val = elem.getAttributeNode( name )) && val.specified ?
					val.value :
				null;
		}
	});
}

return Sizzle;

})( window );



jQuery.find = Sizzle;
jQuery.expr = Sizzle.selectors;

// Deprecated
jQuery.expr[ ":" ] = jQuery.expr.pseudos;
jQuery.uniqueSort = jQuery.unique = Sizzle.uniqueSort;
jQuery.text = Sizzle.getText;
jQuery.isXMLDoc = Sizzle.isXML;
jQuery.contains = Sizzle.contains;
jQuery.escapeSelector = Sizzle.escape;




var dir = function( elem, dir, until ) {
	var matched = [],
		truncate = until !== undefined;

	while ( ( elem = elem[ dir ] ) && elem.nodeType !== 9 ) {
		if ( elem.nodeType === 1 ) {
			if ( truncate && jQuery( elem ).is( until ) ) {
				break;
			}
			matched.push( elem );
		}
	}
	return matched;
};


var siblings = function( n, elem ) {
	var matched = [];

	for ( ; n; n = n.nextSibling ) {
		if ( n.nodeType === 1 && n !== elem ) {
			matched.push( n );
		}
	}

	return matched;
};


var rneedsContext = jQuery.expr.match.needsContext;



function nodeName( elem, name ) {

  return elem.nodeName && elem.nodeName.toLowerCase() === name.toLowerCase();

};
var rsingleTag = ( /^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i );



// Implement the identical functionality for filter and not
function winnow( elements, qualifier, not ) {
	if ( isFunction( qualifier ) ) {
		return jQuery.grep( elements, function( elem, i ) {
			return !!qualifier.call( elem, i, elem ) !== not;
		} );
	}

	// Single element
	if ( qualifier.nodeType ) {
		return jQuery.grep( elements, function( elem ) {
			return ( elem === qualifier ) !== not;
		} );
	}

	// Arraylike of elements (jQuery, arguments, Array)
	if ( typeof qualifier !== "string" ) {
		return jQuery.grep( elements, function( elem ) {
			return ( indexOf.call( qualifier, elem ) > -1 ) !== not;
		} );
	}

	// Filtered directly for both simple and complex selectors
	return jQuery.filter( qualifier, elements, not );
}

jQuery.filter = function( expr, elems, not ) {
	var elem = elems[ 0 ];

	if ( not ) {
		expr = ":not(" + expr + ")";
	}

	if ( elems.length === 1 && elem.nodeType === 1 ) {
		return jQuery.find.matchesSelector( elem, expr ) ? [ elem ] : [];
	}

	return jQuery.find.matches( expr, jQuery.grep( elems, function( elem ) {
		return elem.nodeType === 1;
	} ) );
};

jQuery.fn.extend( {
	find: function( selector ) {
		var i, ret,
			len = this.length,
			self = this;

		if ( typeof selector !== "string" ) {
			return this.pushStack( jQuery( selector ).filter( function() {
				for ( i = 0; i < len; i++ ) {
					if ( jQuery.contains( self[ i ], this ) ) {
						return true;
					}
				}
			} ) );
		}

		ret = this.pushStack( [] );

		for ( i = 0; i < len; i++ ) {
			jQuery.find( selector, self[ i ], ret );
		}

		return len > 1 ? jQuery.uniqueSort( ret ) : ret;
	},
	filter: function( selector ) {
		return this.pushStack( winnow( this, selector || [], false ) );
	},
	not: function( selector ) {
		return this.pushStack( winnow( this, selector || [], true ) );
	},
	is: function( selector ) {
		return !!winnow(
			this,

			// If this is a positional/relative selector, check membership in the returned set
			// so $("p:first").is("p:last") won't return true for a doc with two "p".
			typeof selector === "string" && rneedsContext.test( selector ) ?
				jQuery( selector ) :
				selector || [],
			false
		).length;
	}
} );


// Initialize a jQuery object


// A central reference to the root jQuery(document)
var rootjQuery,

	// A simple way to check for HTML strings
	// Prioritize #id over <tag> to avoid XSS via location.hash (#9521)
	// Strict HTML recognition (#11290: must start with <)
	// Shortcut simple #id case for speed
	rquickExpr = /^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/,

	init = jQuery.fn.init = function( selector, context, root ) {
		var match, elem;

		// HANDLE: $(""), $(null), $(undefined), $(false)
		if ( !selector ) {
			return this;
		}

		// Method init() accepts an alternate rootjQuery
		// so migrate can support jQuery.sub (gh-2101)
		root = root || rootjQuery;

		// Handle HTML strings
		if ( typeof selector === "string" ) {
			if ( selector[ 0 ] === "<" &&
				selector[ selector.length - 1 ] === ">" &&
				selector.length >= 3 ) {

				// Assume that strings that start and end with <> are HTML and skip the regex check
				match = [ null, selector, null ];

			} else {
				match = rquickExpr.exec( selector );
			}

			// Match html or make sure no context is specified for #id
			if ( match && ( match[ 1 ] || !context ) ) {

				// HANDLE: $(html) -> $(array)
				if ( match[ 1 ] ) {
					context = context instanceof jQuery ? context[ 0 ] : context;

					// Option to run scripts is true for back-compat
					// Intentionally let the error be thrown if parseHTML is not present
					jQuery.merge( this, jQuery.parseHTML(
						match[ 1 ],
						context && context.nodeType ? context.ownerDocument || context : document,
						true
					) );

					// HANDLE: $(html, props)
					if ( rsingleTag.test( match[ 1 ] ) && jQuery.isPlainObject( context ) ) {
						for ( match in context ) {

							// Properties of context are called as methods if possible
							if ( isFunction( this[ match ] ) ) {
								this[ match ]( context[ match ] );

							// ...and otherwise set as attributes
							} else {
								this.attr( match, context[ match ] );
							}
						}
					}

					return this;

				// HANDLE: $(#id)
				} else {
					elem = document.getElementById( match[ 2 ] );

					if ( elem ) {

						// Inject the element directly into the jQuery object
						this[ 0 ] = elem;
						this.length = 1;
					}
					return this;
				}

			// HANDLE: $(expr, $(...))
			} else if ( !context || context.jquery ) {
				return ( context || root ).find( selector );

			// HANDLE: $(expr, context)
			// (which is just equivalent to: $(context).find(expr)
			} else {
				return this.constructor( context ).find( selector );
			}

		// HANDLE: $(DOMElement)
		} else if ( selector.nodeType ) {
			this[ 0 ] = selector;
			this.length = 1;
			return this;

		// HANDLE: $(function)
		// Shortcut for document ready
		} else if ( isFunction( selector ) ) {
			return root.ready !== undefined ?
				root.ready( selector ) :

				// Execute immediately if ready is not present
				selector( jQuery );
		}

		return jQuery.makeArray( selector, this );
	};

// Give the init function the jQuery prototype for later instantiation
init.prototype = jQuery.fn;

// Initialize central reference
rootjQuery = jQuery( document );


var rparentsprev = /^(?:parents|prev(?:Until|All))/,

	// Methods guaranteed to produce a unique set when starting from a unique set
	guaranteedUnique = {
		children: true,
		contents: true,
		next: true,
		prev: true
	};

jQuery.fn.extend( {
	has: function( target ) {
		var targets = jQuery( target, this ),
			l = targets.length;

		return this.filter( function() {
			var i = 0;
			for ( ; i < l; i++ ) {
				if ( jQuery.contains( this, targets[ i ] ) ) {
					return true;
				}
			}
		} );
	},

	closest: function( selectors, context ) {
		var cur,
			i = 0,
			l = this.length,
			matched = [],
			targets = typeof selectors !== "string" && jQuery( selectors );

		// Positional selectors never match, since there's no _selection_ context
		if ( !rneedsContext.test( selectors ) ) {
			for ( ; i < l; i++ ) {
				for ( cur = this[ i ]; cur && cur !== context; cur = cur.parentNode ) {

					// Always skip document fragments
					if ( cur.nodeType < 11 && ( targets ?
						targets.index( cur ) > -1 :

						// Don't pass non-elements to Sizzle
						cur.nodeType === 1 &&
							jQuery.find.matchesSelector( cur, selectors ) ) ) {

						matched.push( cur );
						break;
					}
				}
			}
		}

		return this.pushStack( matched.length > 1 ? jQuery.uniqueSort( matched ) : matched );
	},

	// Determine the position of an element within the set
	index: function( elem ) {

		// No argument, return index in parent
		if ( !elem ) {
			return ( this[ 0 ] && this[ 0 ].parentNode ) ? this.first().prevAll().length : -1;
		}

		// Index in selector
		if ( typeof elem === "string" ) {
			return indexOf.call( jQuery( elem ), this[ 0 ] );
		}

		// Locate the position of the desired element
		return indexOf.call( this,

			// If it receives a jQuery object, the first element is used
			elem.jquery ? elem[ 0 ] : elem
		);
	},

	add: function( selector, context ) {
		return this.pushStack(
			jQuery.uniqueSort(
				jQuery.merge( this.get(), jQuery( selector, context ) )
			)
		);
	},

	addBack: function( selector ) {
		return this.add( selector == null ?
			this.prevObject : this.prevObject.filter( selector )
		);
	}
} );

function sibling( cur, dir ) {
	while ( ( cur = cur[ dir ] ) && cur.nodeType !== 1 ) {}
	return cur;
}

jQuery.each( {
	parent: function( elem ) {
		var parent = elem.parentNode;
		return parent && parent.nodeType !== 11 ? parent : null;
	},
	parents: function( elem ) {
		return dir( elem, "parentNode" );
	},
	parentsUntil: function( elem, i, until ) {
		return dir( elem, "parentNode", until );
	},
	next: function( elem ) {
		return sibling( elem, "nextSibling" );
	},
	prev: function( elem ) {
		return sibling( elem, "previousSibling" );
	},
	nextAll: function( elem ) {
		return dir( elem, "nextSibling" );
	},
	prevAll: function( elem ) {
		return dir( elem, "previousSibling" );
	},
	nextUntil: function( elem, i, until ) {
		return dir( elem, "nextSibling", until );
	},
	prevUntil: function( elem, i, until ) {
		return dir( elem, "previousSibling", until );
	},
	siblings: function( elem ) {
		return siblings( ( elem.parentNode || {} ).firstChild, elem );
	},
	children: function( elem ) {
		return siblings( elem.firstChild );
	},
	contents: function( elem ) {
        if ( nodeName( elem, "iframe" ) ) {
            return elem.contentDocument;
        }

        // Support: IE 9 - 11 only, iOS 7 only, Android Browser <=4.3 only
        // Treat the template element as a regular one in browsers that
        // don't support it.
        if ( nodeName( elem, "template" ) ) {
            elem = elem.content || elem;
        }

        return jQuery.merge( [], elem.childNodes );
	}
}, function( name, fn ) {
	jQuery.fn[ name ] = function( until, selector ) {
		var matched = jQuery.map( this, fn, until );

		if ( name.slice( -5 ) !== "Until" ) {
			selector = until;
		}

		if ( selector && typeof selector === "string" ) {
			matched = jQuery.filter( selector, matched );
		}

		if ( this.length > 1 ) {

			// Remove duplicates
			if ( !guaranteedUnique[ name ] ) {
				jQuery.uniqueSort( matched );
			}

			// Reverse order for parents* and prev-derivatives
			if ( rparentsprev.test( name ) ) {
				matched.reverse();
			}
		}

		return this.pushStack( matched );
	};
} );
var rnothtmlwhite = ( /[^\x20\t\r\n\f]+/g );



// Convert String-formatted options into Object-formatted ones
function createOptions( options ) {
	var object = {};
	jQuery.each( options.match( rnothtmlwhite ) || [], function( _, flag ) {
		object[ flag ] = true;
	} );
	return object;
}

/*
 * Create a callback list using the following parameters:
 *
 *	options: an optional list of space-separated options that will change how
 *			the callback list behaves or a more traditional option object
 *
 * By default a callback list will act like an event callback list and can be
 * "fired" multiple times.
 *
 * Possible options:
 *
 *	once:			will ensure the callback list can only be fired once (like a Deferred)
 *
 *	memory:			will keep track of previous values and will call any callback added
 *					after the list has been fired right away with the latest "memorized"
 *					values (like a Deferred)
 *
 *	unique:			will ensure a callback can only be added once (no duplicate in the list)
 *
 *	stopOnFalse:	interrupt callings when a callback returns false
 *
 */
jQuery.Callbacks = function( options ) {

	// Convert options from String-formatted to Object-formatted if needed
	// (we check in cache first)
	options = typeof options === "string" ?
		createOptions( options ) :
		jQuery.extend( {}, options );

	var // Flag to know if list is currently firing
		firing,

		// Last fire value for non-forgettable lists
		memory,

		// Flag to know if list was already fired
		fired,

		// Flag to prevent firing
		locked,

		// Actual callback list
		list = [],

		// Queue of execution data for repeatable lists
		queue = [],

		// Index of currently firing callback (modified by add/remove as needed)
		firingIndex = -1,

		// Fire callbacks
		fire = function() {

			// Enforce single-firing
			locked = locked || options.once;

			// Execute callbacks for all pending executions,
			// respecting firingIndex overrides and runtime changes
			fired = firing = true;
			for ( ; queue.length; firingIndex = -1 ) {
				memory = queue.shift();
				while ( ++firingIndex < list.length ) {

					// Run callback and check for early termination
					if ( list[ firingIndex ].apply( memory[ 0 ], memory[ 1 ] ) === false &&
						options.stopOnFalse ) {

						// Jump to end and forget the data so .add doesn't re-fire
						firingIndex = list.length;
						memory = false;
					}
				}
			}

			// Forget the data if we're done with it
			if ( !options.memory ) {
				memory = false;
			}

			firing = false;

			// Clean up if we're done firing for good
			if ( locked ) {

				// Keep an empty list if we have data for future add calls
				if ( memory ) {
					list = [];

				// Otherwise, this object is spent
				} else {
					list = "";
				}
			}
		},

		// Actual Callbacks object
		self = {

			// Add a callback or a collection of callbacks to the list
			add: function() {
				if ( list ) {

					// If we have memory from a past run, we should fire after adding
					if ( memory && !firing ) {
						firingIndex = list.length - 1;
						queue.push( memory );
					}

					( function add( args ) {
						jQuery.each( args, function( _, arg ) {
							if ( isFunction( arg ) ) {
								if ( !options.unique || !self.has( arg ) ) {
									list.push( arg );
								}
							} else if ( arg && arg.length && toType( arg ) !== "string" ) {

								// Inspect recursively
								add( arg );
							}
						} );
					} )( arguments );

					if ( memory && !firing ) {
						fire();
					}
				}
				return this;
			},

			// Remove a callback from the list
			remove: function() {
				jQuery.each( arguments, function( _, arg ) {
					var index;
					while ( ( index = jQuery.inArray( arg, list, index ) ) > -1 ) {
						list.splice( index, 1 );

						// Handle firing indexes
						if ( index <= firingIndex ) {
							firingIndex--;
						}
					}
				} );
				return this;
			},

			// Check if a given callback is in the list.
			// If no argument is given, return whether or not list has callbacks attached.
			has: function( fn ) {
				return fn ?
					jQuery.inArray( fn, list ) > -1 :
					list.length > 0;
			},

			// Remove all callbacks from the list
			empty: function() {
				if ( list ) {
					list = [];
				}
				return this;
			},

			// Disable .fire and .add
			// Abort any current/pending executions
			// Clear all callbacks and values
			disable: function() {
				locked = queue = [];
				list = memory = "";
				return this;
			},
			disabled: function() {
				return !list;
			},

			// Disable .fire
			// Also disable .add unless we have memory (since it would have no effect)
			// Abort any pending executions
			lock: function() {
				locked = queue = [];
				if ( !memory && !firing ) {
					list = memory = "";
				}
				return this;
			},
			locked: function() {
				return !!locked;
			},

			// Call all callbacks with the given context and arguments
			fireWith: function( context, args ) {
				if ( !locked ) {
					args = args || [];
					args = [ context, args.slice ? args.slice() : args ];
					queue.push( args );
					if ( !firing ) {
						fire();
					}
				}
				return this;
			},

			// Call all the callbacks with the given arguments
			fire: function() {
				self.fireWith( this, arguments );
				return this;
			},

			// To know if the callbacks have already been called at least once
			fired: function() {
				return !!fired;
			}
		};

	return self;
};


function Identity( v ) {
	return v;
}
function Thrower( ex ) {
	throw ex;
}

function adoptValue( value, resolve, reject, noValue ) {
	var method;

	try {

		// Check for promise aspect first to privilege synchronous behavior
		if ( value && isFunction( ( method = value.promise ) ) ) {
			method.call( value ).done( resolve ).fail( reject );

		// Other thenables
		} else if ( value && isFunction( ( method = value.then ) ) ) {
			method.call( value, resolve, reject );

		// Other non-thenables
		} else {

			// Control `resolve` arguments by letting Array#slice cast boolean `noValue` to integer:
			// * false: [ value ].slice( 0 ) => resolve( value )
			// * true: [ value ].slice( 1 ) => resolve()
			resolve.apply( undefined, [ value ].slice( noValue ) );
		}

	// For Promises/A+, convert exceptions into rejections
	// Since jQuery.when doesn't unwrap thenables, we can skip the extra checks appearing in
	// Deferred#then to conditionally suppress rejection.
	} catch ( value ) {

		// Support: Android 4.0 only
		// Strict mode functions invoked without .call/.apply get global-object context
		reject.apply( undefined, [ value ] );
	}
}

jQuery.extend( {

	Deferred: function( func ) {
		var tuples = [

				// action, add listener, callbacks,
				// ... .then handlers, argument index, [final state]
				[ "notify", "progress", jQuery.Callbacks( "memory" ),
					jQuery.Callbacks( "memory" ), 2 ],
				[ "resolve", "done", jQuery.Callbacks( "once memory" ),
					jQuery.Callbacks( "once memory" ), 0, "resolved" ],
				[ "reject", "fail", jQuery.Callbacks( "once memory" ),
					jQuery.Callbacks( "once memory" ), 1, "rejected" ]
			],
			state = "pending",
			promise = {
				state: function() {
					return state;
				},
				always: function() {
					deferred.done( arguments ).fail( arguments );
					return this;
				},
				"catch": function( fn ) {
					return promise.then( null, fn );
				},

				// Keep pipe for back-compat
				pipe: function( /* fnDone, fnFail, fnProgress */ ) {
					var fns = arguments;

					return jQuery.Deferred( function( newDefer ) {
						jQuery.each( tuples, function( i, tuple ) {

							// Map tuples (progress, done, fail) to arguments (done, fail, progress)
							var fn = isFunction( fns[ tuple[ 4 ] ] ) && fns[ tuple[ 4 ] ];

							// deferred.progress(function() { bind to newDefer or newDefer.notify })
							// deferred.done(function() { bind to newDefer or newDefer.resolve })
							// deferred.fail(function() { bind to newDefer or newDefer.reject })
							deferred[ tuple[ 1 ] ]( function() {
								var returned = fn && fn.apply( this, arguments );
								if ( returned && isFunction( returned.promise ) ) {
									returned.promise()
										.progress( newDefer.notify )
										.done( newDefer.resolve )
										.fail( newDefer.reject );
								} else {
									newDefer[ tuple[ 0 ] + "With" ](
										this,
										fn ? [ returned ] : arguments
									);
								}
							} );
						} );
						fns = null;
					} ).promise();
				},
				then: function( onFulfilled, onRejected, onProgress ) {
					var maxDepth = 0;
					function resolve( depth, deferred, handler, special ) {
						return function() {
							var that = this,
								args = arguments,
								mightThrow = function() {
									var returned, then;

									// Support: Promises/A+ section 2.3.3.3.3
									// https://promisesaplus.com/#point-59
									// Ignore double-resolution attempts
									if ( depth < maxDepth ) {
										return;
									}

									returned = handler.apply( that, args );

									// Support: Promises/A+ section 2.3.1
									// https://promisesaplus.com/#point-48
									if ( returned === deferred.promise() ) {
										throw new TypeError( "Thenable self-resolution" );
									}

									// Support: Promises/A+ sections 2.3.3.1, 3.5
									// https://promisesaplus.com/#point-54
									// https://promisesaplus.com/#point-75
									// Retrieve `then` only once
									then = returned &&

										// Support: Promises/A+ section 2.3.4
										// https://promisesaplus.com/#point-64
										// Only check objects and functions for thenability
										( typeof returned === "object" ||
											typeof returned === "function" ) &&
										returned.then;

									// Handle a returned thenable
									if ( isFunction( then ) ) {

										// Special processors (notify) just wait for resolution
										if ( special ) {
											then.call(
												returned,
												resolve( maxDepth, deferred, Identity, special ),
												resolve( maxDepth, deferred, Thrower, special )
											);

										// Normal processors (resolve) also hook into progress
										} else {

											// ...and disregard older resolution values
											maxDepth++;

											then.call(
												returned,
												resolve( maxDepth, deferred, Identity, special ),
												resolve( maxDepth, deferred, Thrower, special ),
												resolve( maxDepth, deferred, Identity,
													deferred.notifyWith )
											);
										}

									// Handle all other returned values
									} else {

										// Only substitute handlers pass on context
										// and multiple values (non-spec behavior)
										if ( handler !== Identity ) {
											that = undefined;
											args = [ returned ];
										}

										// Process the value(s)
										// Default process is resolve
										( special || deferred.resolveWith )( that, args );
									}
								},

								// Only normal processors (resolve) catch and reject exceptions
								process = special ?
									mightThrow :
									function() {
										try {
											mightThrow();
										} catch ( e ) {

											if ( jQuery.Deferred.exceptionHook ) {
												jQuery.Deferred.exceptionHook( e,
													process.stackTrace );
											}

											// Support: Promises/A+ section 2.3.3.3.4.1
											// https://promisesaplus.com/#point-61
											// Ignore post-resolution exceptions
											if ( depth + 1 >= maxDepth ) {

												// Only substitute handlers pass on context
												// and multiple values (non-spec behavior)
												if ( handler !== Thrower ) {
													that = undefined;
													args = [ e ];
												}

												deferred.rejectWith( that, args );
											}
										}
									};

							// Support: Promises/A+ section 2.3.3.3.1
							// https://promisesaplus.com/#point-57
							// Re-resolve promises immediately to dodge false rejection from
							// subsequent errors
							if ( depth ) {
								process();
							} else {

								// Call an optional hook to record the stack, in case of exception
								// since it's otherwise lost when execution goes async
								if ( jQuery.Deferred.getStackHook ) {
									process.stackTrace = jQuery.Deferred.getStackHook();
								}
								window.setTimeout( process );
							}
						};
					}

					return jQuery.Deferred( function( newDefer ) {

						// progress_handlers.add( ... )
						tuples[ 0 ][ 3 ].add(
							resolve(
								0,
								newDefer,
								isFunction( onProgress ) ?
									onProgress :
									Identity,
								newDefer.notifyWith
							)
						);

						// fulfilled_handlers.add( ... )
						tuples[ 1 ][ 3 ].add(
							resolve(
								0,
								newDefer,
								isFunction( onFulfilled ) ?
									onFulfilled :
									Identity
							)
						);

						// rejected_handlers.add( ... )
						tuples[ 2 ][ 3 ].add(
							resolve(
								0,
								newDefer,
								isFunction( onRejected ) ?
									onRejected :
									Thrower
							)
						);
					} ).promise();
				},

				// Get a promise for this deferred
				// If obj is provided, the promise aspect is added to the object
				promise: function( obj ) {
					return obj != null ? jQuery.extend( obj, promise ) : promise;
				}
			},
			deferred = {};

		// Add list-specific methods
		jQuery.each( tuples, function( i, tuple ) {
			var list = tuple[ 2 ],
				stateString = tuple[ 5 ];

			// promise.progress = list.add
			// promise.done = list.add
			// promise.fail = list.add
			promise[ tuple[ 1 ] ] = list.add;

			// Handle state
			if ( stateString ) {
				list.add(
					function() {

						// state = "resolved" (i.e., fulfilled)
						// state = "rejected"
						state = stateString;
					},

					// rejected_callbacks.disable
					// fulfilled_callbacks.disable
					tuples[ 3 - i ][ 2 ].disable,

					// rejected_handlers.disable
					// fulfilled_handlers.disable
					tuples[ 3 - i ][ 3 ].disable,

					// progress_callbacks.lock
					tuples[ 0 ][ 2 ].lock,

					// progress_handlers.lock
					tuples[ 0 ][ 3 ].lock
				);
			}

			// progress_handlers.fire
			// fulfilled_handlers.fire
			// rejected_handlers.fire
			list.add( tuple[ 3 ].fire );

			// deferred.notify = function() { deferred.notifyWith(...) }
			// deferred.resolve = function() { deferred.resolveWith(...) }
			// deferred.reject = function() { deferred.rejectWith(...) }
			deferred[ tuple[ 0 ] ] = function() {
				deferred[ tuple[ 0 ] + "With" ]( this === deferred ? undefined : this, arguments );
				return this;
			};

			// deferred.notifyWith = list.fireWith
			// deferred.resolveWith = list.fireWith
			// deferred.rejectWith = list.fireWith
			deferred[ tuple[ 0 ] + "With" ] = list.fireWith;
		} );

		// Make the deferred a promise
		promise.promise( deferred );

		// Call given func if any
		if ( func ) {
			func.call( deferred, deferred );
		}

		// All done!
		return deferred;
	},

	// Deferred helper
	when: function( singleValue ) {
		var

			// count of uncompleted subordinates
			remaining = arguments.length,

			// count of unprocessed arguments
			i = remaining,

			// subordinate fulfillment data
			resolveContexts = Array( i ),
			resolveValues = slice.call( arguments ),

			// the master Deferred
			master = jQuery.Deferred(),

			// subordinate callback factory
			updateFunc = function( i ) {
				return function( value ) {
					resolveContexts[ i ] = this;
					resolveValues[ i ] = arguments.length > 1 ? slice.call( arguments ) : value;
					if ( !( --remaining ) ) {
						master.resolveWith( resolveContexts, resolveValues );
					}
				};
			};

		// Single- and empty arguments are adopted like Promise.resolve
		if ( remaining <= 1 ) {
			adoptValue( singleValue, master.done( updateFunc( i ) ).resolve, master.reject,
				!remaining );

			// Use .then() to unwrap secondary thenables (cf. gh-3000)
			if ( master.state() === "pending" ||
				isFunction( resolveValues[ i ] && resolveValues[ i ].then ) ) {

				return master.then();
			}
		}

		// Multiple arguments are aggregated like Promise.all array elements
		while ( i-- ) {
			adoptValue( resolveValues[ i ], updateFunc( i ), master.reject );
		}

		return master.promise();
	}
} );


// These usually indicate a programmer mistake during development,
// warn about them ASAP rather than swallowing them by default.
var rerrorNames = /^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;

jQuery.Deferred.exceptionHook = function( error, stack ) {

	// Support: IE 8 - 9 only
	// Console exists when dev tools are open, which can happen at any time
	if ( window.console && window.console.warn && error && rerrorNames.test( error.name ) ) {
		window.console.warn( "jQuery.Deferred exception: " + error.message, error.stack, stack );
	}
};




jQuery.readyException = function( error ) {
	window.setTimeout( function() {
		throw error;
	} );
};




// The deferred used on DOM ready
var readyList = jQuery.Deferred();

jQuery.fn.ready = function( fn ) {

	readyList
		.then( fn )

		// Wrap jQuery.readyException in a function so that the lookup
		// happens at the time of error handling instead of callback
		// registration.
		.catch( function( error ) {
			jQuery.readyException( error );
		} );

	return this;
};

jQuery.extend( {

	// Is the DOM ready to be used? Set to true once it occurs.
	isReady: false,

	// A counter to track how many items to wait for before
	// the ready event fires. See #6781
	readyWait: 1,

	// Handle when the DOM is ready
	ready: function( wait ) {

		// Abort if there are pending holds or we're already ready
		if ( wait === true ? --jQuery.readyWait : jQuery.isReady ) {
			return;
		}

		// Remember that the DOM is ready
		jQuery.isReady = true;

		// If a normal DOM Ready event fired, decrement, and wait if need be
		if ( wait !== true && --jQuery.readyWait > 0 ) {
			return;
		}

		// If there are functions bound, to execute
		readyList.resolveWith( document, [ jQuery ] );
	}
} );

jQuery.ready.then = readyList.then;

// The ready event handler and self cleanup method
function completed() {
	document.removeEventListener( "DOMContentLoaded", completed );
	window.removeEventListener( "load", completed );
	jQuery.ready();
}

// Catch cases where $(document).ready() is called
// after the browser event has already occurred.
// Support: IE <=9 - 10 only
// Older IE sometimes signals "interactive" too soon
if ( document.readyState === "complete" ||
	( document.readyState !== "loading" && !document.documentElement.doScroll ) ) {

	// Handle it asynchronously to allow scripts the opportunity to delay ready
	window.setTimeout( jQuery.ready );

} else {

	// Use the handy event callback
	document.addEventListener( "DOMContentLoaded", completed );

	// A fallback to window.onload, that will always work
	window.addEventListener( "load", completed );
}




// Multifunctional method to get and set values of a collection
// The value/s can optionally be executed if it's a function
var access = function( elems, fn, key, value, chainable, emptyGet, raw ) {
	var i = 0,
		len = elems.length,
		bulk = key == null;

	// Sets many values
	if ( toType( key ) === "object" ) {
		chainable = true;
		for ( i in key ) {
			access( elems, fn, i, key[ i ], true, emptyGet, raw );
		}

	// Sets one value
	} else if ( value !== undefined ) {
		chainable = true;

		if ( !isFunction( value ) ) {
			raw = true;
		}

		if ( bulk ) {

			// Bulk operations run against the entire set
			if ( raw ) {
				fn.call( elems, value );
				fn = null;

			// ...except when executing function values
			} else {
				bulk = fn;
				fn = function( elem, key, value ) {
					return bulk.call( jQuery( elem ), value );
				};
			}
		}

		if ( fn ) {
			for ( ; i < len; i++ ) {
				fn(
					elems[ i ], key, raw ?
					value :
					value.call( elems[ i ], i, fn( elems[ i ], key ) )
				);
			}
		}
	}

	if ( chainable ) {
		return elems;
	}

	// Gets
	if ( bulk ) {
		return fn.call( elems );
	}

	return len ? fn( elems[ 0 ], key ) : emptyGet;
};


// Matches dashed string for camelizing
var rmsPrefix = /^-ms-/,
	rdashAlpha = /-([a-z])/g;

// Used by camelCase as callback to replace()
function fcamelCase( all, letter ) {
	return letter.toUpperCase();
}

// Convert dashed to camelCase; used by the css and data modules
// Support: IE <=9 - 11, Edge 12 - 15
// Microsoft forgot to hump their vendor prefix (#9572)
function camelCase( string ) {
	return string.replace( rmsPrefix, "ms-" ).replace( rdashAlpha, fcamelCase );
}
var acceptData = function( owner ) {

	// Accepts only:
	//  - Node
	//    - Node.ELEMENT_NODE
	//    - Node.DOCUMENT_NODE
	//  - Object
	//    - Any
	return owner.nodeType === 1 || owner.nodeType === 9 || !( +owner.nodeType );
};




function Data() {
	this.expando = jQuery.expando + Data.uid++;
}

Data.uid = 1;

Data.prototype = {

	cache: function( owner ) {

		// Check if the owner object already has a cache
		var value = owner[ this.expando ];

		// If not, create one
		if ( !value ) {
			value = {};

			// We can accept data for non-element nodes in modern browsers,
			// but we should not, see #8335.
			// Always return an empty object.
			if ( acceptData( owner ) ) {

				// If it is a node unlikely to be stringify-ed or looped over
				// use plain assignment
				if ( owner.nodeType ) {
					owner[ this.expando ] = value;

				// Otherwise secure it in a non-enumerable property
				// configurable must be true to allow the property to be
				// deleted when data is removed
				} else {
					Object.defineProperty( owner, this.expando, {
						value: value,
						configurable: true
					} );
				}
			}
		}

		return value;
	},
	set: function( owner, data, value ) {
		var prop,
			cache = this.cache( owner );

		// Handle: [ owner, key, value ] args
		// Always use camelCase key (gh-2257)
		if ( typeof data === "string" ) {
			cache[ camelCase( data ) ] = value;

		// Handle: [ owner, { properties } ] args
		} else {

			// Copy the properties one-by-one to the cache object
			for ( prop in data ) {
				cache[ camelCase( prop ) ] = data[ prop ];
			}
		}
		return cache;
	},
	get: function( owner, key ) {
		return key === undefined ?
			this.cache( owner ) :

			// Always use camelCase key (gh-2257)
			owner[ this.expando ] && owner[ this.expando ][ camelCase( key ) ];
	},
	access: function( owner, key, value ) {

		// In cases where either:
		//
		//   1. No key was specified
		//   2. A string key was specified, but no value provided
		//
		// Take the "read" path and allow the get method to determine
		// which value to return, respectively either:
		//
		//   1. The entire cache object
		//   2. The data stored at the key
		//
		if ( key === undefined ||
				( ( key && typeof key === "string" ) && value === undefined ) ) {

			return this.get( owner, key );
		}

		// When the key is not a string, or both a key and value
		// are specified, set or extend (existing objects) with either:
		//
		//   1. An object of properties
		//   2. A key and value
		//
		this.set( owner, key, value );

		// Since the "set" path can have two possible entry points
		// return the expected data based on which path was taken[*]
		return value !== undefined ? value : key;
	},
	remove: function( owner, key ) {
		var i,
			cache = owner[ this.expando ];

		if ( cache === undefined ) {
			return;
		}

		if ( key !== undefined ) {

			// Support array or space separated string of keys
			if ( Array.isArray( key ) ) {

				// If key is an array of keys...
				// We always set camelCase keys, so remove that.
				key = key.map( camelCase );
			} else {
				key = camelCase( key );

				// If a key with the spaces exists, use it.
				// Otherwise, create an array by matching non-whitespace
				key = key in cache ?
					[ key ] :
					( key.match( rnothtmlwhite ) || [] );
			}

			i = key.length;

			while ( i-- ) {
				delete cache[ key[ i ] ];
			}
		}

		// Remove the expando if there's no more data
		if ( key === undefined || jQuery.isEmptyObject( cache ) ) {

			// Support: Chrome <=35 - 45
			// Webkit & Blink performance suffers when deleting properties
			// from DOM nodes, so set to undefined instead
			// https://bugs.chromium.org/p/chromium/issues/detail?id=378607 (bug restricted)
			if ( owner.nodeType ) {
				owner[ this.expando ] = undefined;
			} else {
				delete owner[ this.expando ];
			}
		}
	},
	hasData: function( owner ) {
		var cache = owner[ this.expando ];
		return cache !== undefined && !jQuery.isEmptyObject( cache );
	}
};
var dataPriv = new Data();

var dataUser = new Data();



//	Implementation Summary
//
//	1. Enforce API surface and semantic compatibility with 1.9.x branch
//	2. Improve the module's maintainability by reducing the storage
//		paths to a single mechanism.
//	3. Use the same single mechanism to support "private" and "user" data.
//	4. _Never_ expose "private" data to user code (TODO: Drop _data, _removeData)
//	5. Avoid exposing implementation details on user objects (eg. expando properties)
//	6. Provide a clear path for implementation upgrade to WeakMap in 2014

var rbrace = /^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,
	rmultiDash = /[A-Z]/g;

function getData( data ) {
	if ( data === "true" ) {
		return true;
	}

	if ( data === "false" ) {
		return false;
	}

	if ( data === "null" ) {
		return null;
	}

	// Only convert to a number if it doesn't change the string
	if ( data === +data + "" ) {
		return +data;
	}

	if ( rbrace.test( data ) ) {
		return JSON.parse( data );
	}

	return data;
}

function dataAttr( elem, key, data ) {
	var name;

	// If nothing was found internally, try to fetch any
	// data from the HTML5 data-* attribute
	if ( data === undefined && elem.nodeType === 1 ) {
		name = "data-" + key.replace( rmultiDash, "-$&" ).toLowerCase();
		data = elem.getAttribute( name );

		if ( typeof data === "string" ) {
			try {
				data = getData( data );
			} catch ( e ) {}

			// Make sure we set the data so it isn't changed later
			dataUser.set( elem, key, data );
		} else {
			data = undefined;
		}
	}
	return data;
}

jQuery.extend( {
	hasData: function( elem ) {
		return dataUser.hasData( elem ) || dataPriv.hasData( elem );
	},

	data: function( elem, name, data ) {
		return dataUser.access( elem, name, data );
	},

	removeData: function( elem, name ) {
		dataUser.remove( elem, name );
	},

	// TODO: Now that all calls to _data and _removeData have been replaced
	// with direct calls to dataPriv methods, these can be deprecated.
	_data: function( elem, name, data ) {
		return dataPriv.access( elem, name, data );
	},

	_removeData: function( elem, name ) {
		dataPriv.remove( elem, name );
	}
} );

jQuery.fn.extend( {
	data: function( key, value ) {
		var i, name, data,
			elem = this[ 0 ],
			attrs = elem && elem.attributes;

		// Gets all values
		if ( key === undefined ) {
			if ( this.length ) {
				data = dataUser.get( elem );

				if ( elem.nodeType === 1 && !dataPriv.get( elem, "hasDataAttrs" ) ) {
					i = attrs.length;
					while ( i-- ) {

						// Support: IE 11 only
						// The attrs elements can be null (#14894)
						if ( attrs[ i ] ) {
							name = attrs[ i ].name;
							if ( name.indexOf( "data-" ) === 0 ) {
								name = camelCase( name.slice( 5 ) );
								dataAttr( elem, name, data[ name ] );
							}
						}
					}
					dataPriv.set( elem, "hasDataAttrs", true );
				}
			}

			return data;
		}

		// Sets multiple values
		if ( typeof key === "object" ) {
			return this.each( function() {
				dataUser.set( this, key );
			} );
		}

		return access( this, function( value ) {
			var data;

			// The calling jQuery object (element matches) is not empty
			// (and therefore has an element appears at this[ 0 ]) and the
			// `value` parameter was not undefined. An empty jQuery object
			// will result in `undefined` for elem = this[ 0 ] which will
			// throw an exception if an attempt to read a data cache is made.
			if ( elem && value === undefined ) {

				// Attempt to get data from the cache
				// The key will always be camelCased in Data
				data = dataUser.get( elem, key );
				if ( data !== undefined ) {
					return data;
				}

				// Attempt to "discover" the data in
				// HTML5 custom data-* attrs
				data = dataAttr( elem, key );
				if ( data !== undefined ) {
					return data;
				}

				// We tried really hard, but the data doesn't exist.
				return;
			}

			// Set the data...
			this.each( function() {

				// We always store the camelCased key
				dataUser.set( this, key, value );
			} );
		}, null, value, arguments.length > 1, null, true );
	},

	removeData: function( key ) {
		return this.each( function() {
			dataUser.remove( this, key );
		} );
	}
} );


jQuery.extend( {
	queue: function( elem, type, data ) {
		var queue;

		if ( elem ) {
			type = ( type || "fx" ) + "queue";
			queue = dataPriv.get( elem, type );

			// Speed up dequeue by getting out quickly if this is just a lookup
			if ( data ) {
				if ( !queue || Array.isArray( data ) ) {
					queue = dataPriv.access( elem, type, jQuery.makeArray( data ) );
				} else {
					queue.push( data );
				}
			}
			return queue || [];
		}
	},

	dequeue: function( elem, type ) {
		type = type || "fx";

		var queue = jQuery.queue( elem, type ),
			startLength = queue.length,
			fn = queue.shift(),
			hooks = jQuery._queueHooks( elem, type ),
			next = function() {
				jQuery.dequeue( elem, type );
			};

		// If the fx queue is dequeued, always remove the progress sentinel
		if ( fn === "inprogress" ) {
			fn = queue.shift();
			startLength--;
		}

		if ( fn ) {

			// Add a progress sentinel to prevent the fx queue from being
			// automatically dequeued
			if ( type === "fx" ) {
				queue.unshift( "inprogress" );
			}

			// Clear up the last queue stop function
			delete hooks.stop;
			fn.call( elem, next, hooks );
		}

		if ( !startLength && hooks ) {
			hooks.empty.fire();
		}
	},

	// Not public - generate a queueHooks object, or return the current one
	_queueHooks: function( elem, type ) {
		var key = type + "queueHooks";
		return dataPriv.get( elem, key ) || dataPriv.access( elem, key, {
			empty: jQuery.Callbacks( "once memory" ).add( function() {
				dataPriv.remove( elem, [ type + "queue", key ] );
			} )
		} );
	}
} );

jQuery.fn.extend( {
	queue: function( type, data ) {
		var setter = 2;

		if ( typeof type !== "string" ) {
			data = type;
			type = "fx";
			setter--;
		}

		if ( arguments.length < setter ) {
			return jQuery.queue( this[ 0 ], type );
		}

		return data === undefined ?
			this :
			this.each( function() {
				var queue = jQuery.queue( this, type, data );

				// Ensure a hooks for this queue
				jQuery._queueHooks( this, type );

				if ( type === "fx" && queue[ 0 ] !== "inprogress" ) {
					jQuery.dequeue( this, type );
				}
			} );
	},
	dequeue: function( type ) {
		return this.each( function() {
			jQuery.dequeue( this, type );
		} );
	},
	clearQueue: function( type ) {
		return this.queue( type || "fx", [] );
	},

	// Get a promise resolved when queues of a certain type
	// are emptied (fx is the type by default)
	promise: function( type, obj ) {
		var tmp,
			count = 1,
			defer = jQuery.Deferred(),
			elements = this,
			i = this.length,
			resolve = function() {
				if ( !( --count ) ) {
					defer.resolveWith( elements, [ elements ] );
				}
			};

		if ( typeof type !== "string" ) {
			obj = type;
			type = undefined;
		}
		type = type || "fx";

		while ( i-- ) {
			tmp = dataPriv.get( elements[ i ], type + "queueHooks" );
			if ( tmp && tmp.empty ) {
				count++;
				tmp.empty.add( resolve );
			}
		}
		resolve();
		return defer.promise( obj );
	}
} );
var pnum = ( /[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/ ).source;

var rcssNum = new RegExp( "^(?:([+-])=|)(" + pnum + ")([a-z%]*)$", "i" );


var cssExpand = [ "Top", "Right", "Bottom", "Left" ];

var isHiddenWithinTree = function( elem, el ) {

		// isHiddenWithinTree might be called from jQuery#filter function;
		// in that case, element will be second argument
		elem = el || elem;

		// Inline style trumps all
		return elem.style.display === "none" ||
			elem.style.display === "" &&

			// Otherwise, check computed style
			// Support: Firefox <=43 - 45
			// Disconnected elements can have computed display: none, so first confirm that elem is
			// in the document.
			jQuery.contains( elem.ownerDocument, elem ) &&

			jQuery.css( elem, "display" ) === "none";
	};

var swap = function( elem, options, callback, args ) {
	var ret, name,
		old = {};

	// Remember the old values, and insert the new ones
	for ( name in options ) {
		old[ name ] = elem.style[ name ];
		elem.style[ name ] = options[ name ];
	}

	ret = callback.apply( elem, args || [] );

	// Revert the old values
	for ( name in options ) {
		elem.style[ name ] = old[ name ];
	}

	return ret;
};




function adjustCSS( elem, prop, valueParts, tween ) {
	var adjusted, scale,
		maxIterations = 20,
		currentValue = tween ?
			function() {
				return tween.cur();
			} :
			function() {
				return jQuery.css( elem, prop, "" );
			},
		initial = currentValue(),
		unit = valueParts && valueParts[ 3 ] || ( jQuery.cssNumber[ prop ] ? "" : "px" ),

		// Starting value computation is required for potential unit mismatches
		initialInUnit = ( jQuery.cssNumber[ prop ] || unit !== "px" && +initial ) &&
			rcssNum.exec( jQuery.css( elem, prop ) );

	if ( initialInUnit && initialInUnit[ 3 ] !== unit ) {

		// Support: Firefox <=54
		// Halve the iteration target value to prevent interference from CSS upper bounds (gh-2144)
		initial = initial / 2;

		// Trust units reported by jQuery.css
		unit = unit || initialInUnit[ 3 ];

		// Iteratively approximate from a nonzero starting point
		initialInUnit = +initial || 1;

		while ( maxIterations-- ) {

			// Evaluate and update our best guess (doubling guesses that zero out).
			// Finish if the scale equals or crosses 1 (making the old*new product non-positive).
			jQuery.style( elem, prop, initialInUnit + unit );
			if ( ( 1 - scale ) * ( 1 - ( scale = currentValue() / initial || 0.5 ) ) <= 0 ) {
				maxIterations = 0;
			}
			initialInUnit = initialInUnit / scale;

		}

		initialInUnit = initialInUnit * 2;
		jQuery.style( elem, prop, initialInUnit + unit );

		// Make sure we update the tween properties later on
		valueParts = valueParts || [];
	}

	if ( valueParts ) {
		initialInUnit = +initialInUnit || +initial || 0;

		// Apply relative offset (+=/-=) if specified
		adjusted = valueParts[ 1 ] ?
			initialInUnit + ( valueParts[ 1 ] + 1 ) * valueParts[ 2 ] :
			+valueParts[ 2 ];
		if ( tween ) {
			tween.unit = unit;
			tween.start = initialInUnit;
			tween.end = adjusted;
		}
	}
	return adjusted;
}


var defaultDisplayMap = {};

function getDefaultDisplay( elem ) {
	var temp,
		doc = elem.ownerDocument,
		nodeName = elem.nodeName,
		display = defaultDisplayMap[ nodeName ];

	if ( display ) {
		return display;
	}

	temp = doc.body.appendChild( doc.createElement( nodeName ) );
	display = jQuery.css( temp, "display" );

	temp.parentNode.removeChild( temp );

	if ( display === "none" ) {
		display = "block";
	}
	defaultDisplayMap[ nodeName ] = display;

	return display;
}

function showHide( elements, show ) {
	var display, elem,
		values = [],
		index = 0,
		length = elements.length;

	// Determine new display value for elements that need to change
	for ( ; index < length; index++ ) {
		elem = elements[ index ];
		if ( !elem.style ) {
			continue;
		}

		display = elem.style.display;
		if ( show ) {

			// Since we force visibility upon cascade-hidden elements, an immediate (and slow)
			// check is required in this first loop unless we have a nonempty display value (either
			// inline or about-to-be-restored)
			if ( display === "none" ) {
				values[ index ] = dataPriv.get( elem, "display" ) || null;
				if ( !values[ index ] ) {
					elem.style.display = "";
				}
			}
			if ( elem.style.display === "" && isHiddenWithinTree( elem ) ) {
				values[ index ] = getDefaultDisplay( elem );
			}
		} else {
			if ( display !== "none" ) {
				values[ index ] = "none";

				// Remember what we're overwriting
				dataPriv.set( elem, "display", display );
			}
		}
	}

	// Set the display of the elements in a second loop to avoid constant reflow
	for ( index = 0; index < length; index++ ) {
		if ( values[ index ] != null ) {
			elements[ index ].style.display = values[ index ];
		}
	}

	return elements;
}

jQuery.fn.extend( {
	show: function() {
		return showHide( this, true );
	},
	hide: function() {
		return showHide( this );
	},
	toggle: function( state ) {
		if ( typeof state === "boolean" ) {
			return state ? this.show() : this.hide();
		}

		return this.each( function() {
			if ( isHiddenWithinTree( this ) ) {
				jQuery( this ).show();
			} else {
				jQuery( this ).hide();
			}
		} );
	}
} );
var rcheckableType = ( /^(?:checkbox|radio)$/i );

var rtagName = ( /<([a-z][^\/\0>\x20\t\r\n\f]+)/i );

var rscriptType = ( /^$|^module$|\/(?:java|ecma)script/i );



// We have to close these tags to support XHTML (#13200)
var wrapMap = {

	// Support: IE <=9 only
	option: [ 1, "<select multiple='multiple'>", "</select>" ],

	// XHTML parsers do not magically insert elements in the
	// same way that tag soup parsers do. So we cannot shorten
	// this by omitting <tbody> or other required elements.
	thead: [ 1, "<table>", "</table>" ],
	col: [ 2, "<table><colgroup>", "</colgroup></table>" ],
	tr: [ 2, "<table><tbody>", "</tbody></table>" ],
	td: [ 3, "<table><tbody><tr>", "</tr></tbody></table>" ],

	_default: [ 0, "", "" ]
};

// Support: IE <=9 only
wrapMap.optgroup = wrapMap.option;

wrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;
wrapMap.th = wrapMap.td;


function getAll( context, tag ) {

	// Support: IE <=9 - 11 only
	// Use typeof to avoid zero-argument method invocation on host objects (#15151)
	var ret;

	if ( typeof context.getElementsByTagName !== "undefined" ) {
		ret = context.getElementsByTagName( tag || "*" );

	} else if ( typeof context.querySelectorAll !== "undefined" ) {
		ret = context.querySelectorAll( tag || "*" );

	} else {
		ret = [];
	}

	if ( tag === undefined || tag && nodeName( context, tag ) ) {
		return jQuery.merge( [ context ], ret );
	}

	return ret;
}


// Mark scripts as having already been evaluated
function setGlobalEval( elems, refElements ) {
	var i = 0,
		l = elems.length;

	for ( ; i < l; i++ ) {
		dataPriv.set(
			elems[ i ],
			"globalEval",
			!refElements || dataPriv.get( refElements[ i ], "globalEval" )
		);
	}
}


var rhtml = /<|&#?\w+;/;

function buildFragment( elems, context, scripts, selection, ignored ) {
	var elem, tmp, tag, wrap, contains, j,
		fragment = context.createDocumentFragment(),
		nodes = [],
		i = 0,
		l = elems.length;

	for ( ; i < l; i++ ) {
		elem = elems[ i ];

		if ( elem || elem === 0 ) {

			// Add nodes directly
			if ( toType( elem ) === "object" ) {

				// Support: Android <=4.0 only, PhantomJS 1 only
				// push.apply(_, arraylike) throws on ancient WebKit
				jQuery.merge( nodes, elem.nodeType ? [ elem ] : elem );

			// Convert non-html into a text node
			} else if ( !rhtml.test( elem ) ) {
				nodes.push( context.createTextNode( elem ) );

			// Convert html into DOM nodes
			} else {
				tmp = tmp || fragment.appendChild( context.createElement( "div" ) );

				// Deserialize a standard representation
				tag = ( rtagName.exec( elem ) || [ "", "" ] )[ 1 ].toLowerCase();
				wrap = wrapMap[ tag ] || wrapMap._default;
				tmp.innerHTML = wrap[ 1 ] + jQuery.htmlPrefilter( elem ) + wrap[ 2 ];

				// Descend through wrappers to the right content
				j = wrap[ 0 ];
				while ( j-- ) {
					tmp = tmp.lastChild;
				}

				// Support: Android <=4.0 only, PhantomJS 1 only
				// push.apply(_, arraylike) throws on ancient WebKit
				jQuery.merge( nodes, tmp.childNodes );

				// Remember the top-level container
				tmp = fragment.firstChild;

				// Ensure the created nodes are orphaned (#12392)
				tmp.textContent = "";
			}
		}
	}

	// Remove wrapper from fragment
	fragment.textContent = "";

	i = 0;
	while ( ( elem = nodes[ i++ ] ) ) {

		// Skip elements already in the context collection (trac-4087)
		if ( selection && jQuery.inArray( elem, selection ) > -1 ) {
			if ( ignored ) {
				ignored.push( elem );
			}
			continue;
		}

		contains = jQuery.contains( elem.ownerDocument, elem );

		// Append to fragment
		tmp = getAll( fragment.appendChild( elem ), "script" );

		// Preserve script evaluation history
		if ( contains ) {
			setGlobalEval( tmp );
		}

		// Capture executables
		if ( scripts ) {
			j = 0;
			while ( ( elem = tmp[ j++ ] ) ) {
				if ( rscriptType.test( elem.type || "" ) ) {
					scripts.push( elem );
				}
			}
		}
	}

	return fragment;
}


( function() {
	var fragment = document.createDocumentFragment(),
		div = fragment.appendChild( document.createElement( "div" ) ),
		input = document.createElement( "input" );

	// Support: Android 4.0 - 4.3 only
	// Check state lost if the name is set (#11217)
	// Support: Windows Web Apps (WWA)
	// `name` and `type` must use .setAttribute for WWA (#14901)
	input.setAttribute( "type", "radio" );
	input.setAttribute( "checked", "checked" );
	input.setAttribute( "name", "t" );

	div.appendChild( input );

	// Support: Android <=4.1 only
	// Older WebKit doesn't clone checked state correctly in fragments
	support.checkClone = div.cloneNode( true ).cloneNode( true ).lastChild.checked;

	// Support: IE <=11 only
	// Make sure textarea (and checkbox) defaultValue is properly cloned
	div.innerHTML = "<textarea>x</textarea>";
	support.noCloneChecked = !!div.cloneNode( true ).lastChild.defaultValue;
} )();
var documentElement = document.documentElement;



var
	rkeyEvent = /^key/,
	rmouseEvent = /^(?:mouse|pointer|contextmenu|drag|drop)|click/,
	rtypenamespace = /^([^.]*)(?:\.(.+)|)/;

function returnTrue() {
	return true;
}

function returnFalse() {
	return false;
}

// Support: IE <=9 only
// See #13393 for more info
function safeActiveElement() {
	try {
		return document.activeElement;
	} catch ( err ) { }
}

function on( elem, types, selector, data, fn, one ) {
	var origFn, type;

	// Types can be a map of types/handlers
	if ( typeof types === "object" ) {

		// ( types-Object, selector, data )
		if ( typeof selector !== "string" ) {

			// ( types-Object, data )
			data = data || selector;
			selector = undefined;
		}
		for ( type in types ) {
			on( elem, type, selector, data, types[ type ], one );
		}
		return elem;
	}

	if ( data == null && fn == null ) {

		// ( types, fn )
		fn = selector;
		data = selector = undefined;
	} else if ( fn == null ) {
		if ( typeof selector === "string" ) {

			// ( types, selector, fn )
			fn = data;
			data = undefined;
		} else {

			// ( types, data, fn )
			fn = data;
			data = selector;
			selector = undefined;
		}
	}
	if ( fn === false ) {
		fn = returnFalse;
	} else if ( !fn ) {
		return elem;
	}

	if ( one === 1 ) {
		origFn = fn;
		fn = function( event ) {

			// Can use an empty set, since event contains the info
			jQuery().off( event );
			return origFn.apply( this, arguments );
		};

		// Use same guid so caller can remove using origFn
		fn.guid = origFn.guid || ( origFn.guid = jQuery.guid++ );
	}
	return elem.each( function() {
		jQuery.event.add( this, types, fn, data, selector );
	} );
}

/*
 * Helper functions for managing events -- not part of the public interface.
 * Props to Dean Edwards' addEvent library for many of the ideas.
 */
jQuery.event = {

	global: {},

	add: function( elem, types, handler, data, selector ) {

		var handleObjIn, eventHandle, tmp,
			events, t, handleObj,
			special, handlers, type, namespaces, origType,
			elemData = dataPriv.get( elem );

		// Don't attach events to noData or text/comment nodes (but allow plain objects)
		if ( !elemData ) {
			return;
		}

		// Caller can pass in an object of custom data in lieu of the handler
		if ( handler.handler ) {
			handleObjIn = handler;
			handler = handleObjIn.handler;
			selector = handleObjIn.selector;
		}

		// Ensure that invalid selectors throw exceptions at attach time
		// Evaluate against documentElement in case elem is a non-element node (e.g., document)
		if ( selector ) {
			jQuery.find.matchesSelector( documentElement, selector );
		}

		// Make sure that the handler has a unique ID, used to find/remove it later
		if ( !handler.guid ) {
			handler.guid = jQuery.guid++;
		}

		// Init the element's event structure and main handler, if this is the first
		if ( !( events = elemData.events ) ) {
			events = elemData.events = {};
		}
		if ( !( eventHandle = elemData.handle ) ) {
			eventHandle = elemData.handle = function( e ) {

				// Discard the second event of a jQuery.event.trigger() and
				// when an event is called after a page has unloaded
				return typeof jQuery !== "undefined" && jQuery.event.triggered !== e.type ?
					jQuery.event.dispatch.apply( elem, arguments ) : undefined;
			};
		}

		// Handle multiple events separated by a space
		types = ( types || "" ).match( rnothtmlwhite ) || [ "" ];
		t = types.length;
		while ( t-- ) {
			tmp = rtypenamespace.exec( types[ t ] ) || [];
			type = origType = tmp[ 1 ];
			namespaces = ( tmp[ 2 ] || "" ).split( "." ).sort();

			// There *must* be a type, no attaching namespace-only handlers
			if ( !type ) {
				continue;
			}

			// If event changes its type, use the special event handlers for the changed type
			special = jQuery.event.special[ type ] || {};

			// If selector defined, determine special event api type, otherwise given type
			type = ( selector ? special.delegateType : special.bindType ) || type;

			// Update special based on newly reset type
			special = jQuery.event.special[ type ] || {};

			// handleObj is passed to all event handlers
			handleObj = jQuery.extend( {
				type: type,
				origType: origType,
				data: data,
				handler: handler,
				guid: handler.guid,
				selector: selector,
				needsContext: selector && jQuery.expr.match.needsContext.test( selector ),
				namespace: namespaces.join( "." )
			}, handleObjIn );

			// Init the event handler queue if we're the first
			if ( !( handlers = events[ type ] ) ) {
				handlers = events[ type ] = [];
				handlers.delegateCount = 0;

				// Only use addEventListener if the special events handler returns false
				if ( !special.setup ||
					special.setup.call( elem, data, namespaces, eventHandle ) === false ) {

					if ( elem.addEventListener ) {
						elem.addEventListener( type, eventHandle );
					}
				}
			}

			if ( special.add ) {
				special.add.call( elem, handleObj );

				if ( !handleObj.handler.guid ) {
					handleObj.handler.guid = handler.guid;
				}
			}

			// Add to the element's handler list, delegates in front
			if ( selector ) {
				handlers.splice( handlers.delegateCount++, 0, handleObj );
			} else {
				handlers.push( handleObj );
			}

			// Keep track of which events have ever been used, for event optimization
			jQuery.event.global[ type ] = true;
		}

	},

	// Detach an event or set of events from an element
	remove: function( elem, types, handler, selector, mappedTypes ) {

		var j, origCount, tmp,
			events, t, handleObj,
			special, handlers, type, namespaces, origType,
			elemData = dataPriv.hasData( elem ) && dataPriv.get( elem );

		if ( !elemData || !( events = elemData.events ) ) {
			return;
		}

		// Once for each type.namespace in types; type may be omitted
		types = ( types || "" ).match( rnothtmlwhite ) || [ "" ];
		t = types.length;
		while ( t-- ) {
			tmp = rtypenamespace.exec( types[ t ] ) || [];
			type = origType = tmp[ 1 ];
			namespaces = ( tmp[ 2 ] || "" ).split( "." ).sort();

			// Unbind all events (on this namespace, if provided) for the element
			if ( !type ) {
				for ( type in events ) {
					jQuery.event.remove( elem, type + types[ t ], handler, selector, true );
				}
				continue;
			}

			special = jQuery.event.special[ type ] || {};
			type = ( selector ? special.delegateType : special.bindType ) || type;
			handlers = events[ type ] || [];
			tmp = tmp[ 2 ] &&
				new RegExp( "(^|\\.)" + namespaces.join( "\\.(?:.*\\.|)" ) + "(\\.|$)" );

			// Remove matching events
			origCount = j = handlers.length;
			while ( j-- ) {
				handleObj = handlers[ j ];

				if ( ( mappedTypes || origType === handleObj.origType ) &&
					( !handler || handler.guid === handleObj.guid ) &&
					( !tmp || tmp.test( handleObj.namespace ) ) &&
					( !selector || selector === handleObj.selector ||
						selector === "**" && handleObj.selector ) ) {
					handlers.splice( j, 1 );

					if ( handleObj.selector ) {
						handlers.delegateCount--;
					}
					if ( special.remove ) {
						special.remove.call( elem, handleObj );
					}
				}
			}

			// Remove generic event handler if we removed something and no more handlers exist
			// (avoids potential for endless recursion during removal of special event handlers)
			if ( origCount && !handlers.length ) {
				if ( !special.teardown ||
					special.teardown.call( elem, namespaces, elemData.handle ) === false ) {

					jQuery.removeEvent( elem, type, elemData.handle );
				}

				delete events[ type ];
			}
		}

		// Remove data and the expando if it's no longer used
		if ( jQuery.isEmptyObject( events ) ) {
			dataPriv.remove( elem, "handle events" );
		}
	},

	dispatch: function( nativeEvent ) {

		// Make a writable jQuery.Event from the native event object
		var event = jQuery.event.fix( nativeEvent );

		var i, j, ret, matched, handleObj, handlerQueue,
			args = new Array( arguments.length ),
			handlers = ( dataPriv.get( this, "events" ) || {} )[ event.type ] || [],
			special = jQuery.event.special[ event.type ] || {};

		// Use the fix-ed jQuery.Event rather than the (read-only) native event
		args[ 0 ] = event;

		for ( i = 1; i < arguments.length; i++ ) {
			args[ i ] = arguments[ i ];
		}

		event.delegateTarget = this;

		// Call the preDispatch hook for the mapped type, and let it bail if desired
		if ( special.preDispatch && special.preDispatch.call( this, event ) === false ) {
			return;
		}

		// Determine handlers
		handlerQueue = jQuery.event.handlers.call( this, event, handlers );

		// Run delegates first; they may want to stop propagation beneath us
		i = 0;
		while ( ( matched = handlerQueue[ i++ ] ) && !event.isPropagationStopped() ) {
			event.currentTarget = matched.elem;

			j = 0;
			while ( ( handleObj = matched.handlers[ j++ ] ) &&
				!event.isImmediatePropagationStopped() ) {

				// Triggered event must either 1) have no namespace, or 2) have namespace(s)
				// a subset or equal to those in the bound event (both can have no namespace).
				if ( !event.rnamespace || event.rnamespace.test( handleObj.namespace ) ) {

					event.handleObj = handleObj;
					event.data = handleObj.data;

					ret = ( ( jQuery.event.special[ handleObj.origType ] || {} ).handle ||
						handleObj.handler ).apply( matched.elem, args );

					if ( ret !== undefined ) {
						if ( ( event.result = ret ) === false ) {
							event.preventDefault();
							event.stopPropagation();
						}
					}
				}
			}
		}

		// Call the postDispatch hook for the mapped type
		if ( special.postDispatch ) {
			special.postDispatch.call( this, event );
		}

		return event.result;
	},

	handlers: function( event, handlers ) {
		var i, handleObj, sel, matchedHandlers, matchedSelectors,
			handlerQueue = [],
			delegateCount = handlers.delegateCount,
			cur = event.target;

		// Find delegate handlers
		if ( delegateCount &&

			// Support: IE <=9
			// Black-hole SVG <use> instance trees (trac-13180)
			cur.nodeType &&

			// Support: Firefox <=42
			// Suppress spec-violating clicks indicating a non-primary pointer button (trac-3861)
			// https://www.w3.org/TR/DOM-Level-3-Events/#event-type-click
			// Support: IE 11 only
			// ...but not arrow key "clicks" of radio inputs, which can have `button` -1 (gh-2343)
			!( event.type === "click" && event.button >= 1 ) ) {

			for ( ; cur !== this; cur = cur.parentNode || this ) {

				// Don't check non-elements (#13208)
				// Don't process clicks on disabled elements (#6911, #8165, #11382, #11764)
				if ( cur.nodeType === 1 && !( event.type === "click" && cur.disabled === true ) ) {
					matchedHandlers = [];
					matchedSelectors = {};
					for ( i = 0; i < delegateCount; i++ ) {
						handleObj = handlers[ i ];

						// Don't conflict with Object.prototype properties (#13203)
						sel = handleObj.selector + " ";

						if ( matchedSelectors[ sel ] === undefined ) {
							matchedSelectors[ sel ] = handleObj.needsContext ?
								jQuery( sel, this ).index( cur ) > -1 :
								jQuery.find( sel, this, null, [ cur ] ).length;
						}
						if ( matchedSelectors[ sel ] ) {
							matchedHandlers.push( handleObj );
						}
					}
					if ( matchedHandlers.length ) {
						handlerQueue.push( { elem: cur, handlers: matchedHandlers } );
					}
				}
			}
		}

		// Add the remaining (directly-bound) handlers
		cur = this;
		if ( delegateCount < handlers.length ) {
			handlerQueue.push( { elem: cur, handlers: handlers.slice( delegateCount ) } );
		}

		return handlerQueue;
	},

	addProp: function( name, hook ) {
		Object.defineProperty( jQuery.Event.prototype, name, {
			enumerable: true,
			configurable: true,

			get: isFunction( hook ) ?
				function() {
					if ( this.originalEvent ) {
							return hook( this.originalEvent );
					}
				} :
				function() {
					if ( this.originalEvent ) {
							return this.originalEvent[ name ];
					}
				},

			set: function( value ) {
				Object.defineProperty( this, name, {
					enumerable: true,
					configurable: true,
					writable: true,
					value: value
				} );
			}
		} );
	},

	fix: function( originalEvent ) {
		return originalEvent[ jQuery.expando ] ?
			originalEvent :
			new jQuery.Event( originalEvent );
	},

	special: {
		load: {

			// Prevent triggered image.load events from bubbling to window.load
			noBubble: true
		},
		focus: {

			// Fire native event if possible so blur/focus sequence is correct
			trigger: function() {
				if ( this !== safeActiveElement() && this.focus ) {
					this.focus();
					return false;
				}
			},
			delegateType: "focusin"
		},
		blur: {
			trigger: function() {
				if ( this === safeActiveElement() && this.blur ) {
					this.blur();
					return false;
				}
			},
			delegateType: "focusout"
		},
		click: {

			// For checkbox, fire native event so checked state will be right
			trigger: function() {
				if ( this.type === "checkbox" && this.click && nodeName( this, "input" ) ) {
					this.click();
					return false;
				}
			},

			// For cross-browser consistency, don't fire native .click() on links
			_default: function( event ) {
				return nodeName( event.target, "a" );
			}
		},

		beforeunload: {
			postDispatch: function( event ) {

				// Support: Firefox 20+
				// Firefox doesn't alert if the returnValue field is not set.
				if ( event.result !== undefined && event.originalEvent ) {
					event.originalEvent.returnValue = event.result;
				}
			}
		}
	}
};

jQuery.removeEvent = function( elem, type, handle ) {

	// This "if" is needed for plain objects
	if ( elem.removeEventListener ) {
		elem.removeEventListener( type, handle );
	}
};

jQuery.Event = function( src, props ) {

	// Allow instantiation without the 'new' keyword
	if ( !( this instanceof jQuery.Event ) ) {
		return new jQuery.Event( src, props );
	}

	// Event object
	if ( src && src.type ) {
		this.originalEvent = src;
		this.type = src.type;

		// Events bubbling up the document may have been marked as prevented
		// by a handler lower down the tree; reflect the correct value.
		this.isDefaultPrevented = src.defaultPrevented ||
				src.defaultPrevented === undefined &&

				// Support: Android <=2.3 only
				src.returnValue === false ?
			returnTrue :
			returnFalse;

		// Create target properties
		// Support: Safari <=6 - 7 only
		// Target should not be a text node (#504, #13143)
		this.target = ( src.target && src.target.nodeType === 3 ) ?
			src.target.parentNode :
			src.target;

		this.currentTarget = src.currentTarget;
		this.relatedTarget = src.relatedTarget;

	// Event type
	} else {
		this.type = src;
	}

	// Put explicitly provided properties onto the event object
	if ( props ) {
		jQuery.extend( this, props );
	}

	// Create a timestamp if incoming event doesn't have one
	this.timeStamp = src && src.timeStamp || Date.now();

	// Mark it as fixed
	this[ jQuery.expando ] = true;
};

// jQuery.Event is based on DOM3 Events as specified by the ECMAScript Language Binding
// https://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/ecma-script-binding.html
jQuery.Event.prototype = {
	constructor: jQuery.Event,
	isDefaultPrevented: returnFalse,
	isPropagationStopped: returnFalse,
	isImmediatePropagationStopped: returnFalse,
	isSimulated: false,

	preventDefault: function() {
		var e = this.originalEvent;

		this.isDefaultPrevented = returnTrue;

		if ( e && !this.isSimulated ) {
			e.preventDefault();
		}
	},
	stopPropagation: function() {
		var e = this.originalEvent;

		this.isPropagationStopped = returnTrue;

		if ( e && !this.isSimulated ) {
			e.stopPropagation();
		}
	},
	stopImmediatePropagation: function() {
		var e = this.originalEvent;

		this.isImmediatePropagationStopped = returnTrue;

		if ( e && !this.isSimulated ) {
			e.stopImmediatePropagation();
		}

		this.stopPropagation();
	}
};

// Includes all common event props including KeyEvent and MouseEvent specific props
jQuery.each( {
	altKey: true,
	bubbles: true,
	cancelable: true,
	changedTouches: true,
	ctrlKey: true,
	detail: true,
	eventPhase: true,
	metaKey: true,
	pageX: true,
	pageY: true,
	shiftKey: true,
	view: true,
	"char": true,
	charCode: true,
	key: true,
	keyCode: true,
	button: true,
	buttons: true,
	clientX: true,
	clientY: true,
	offsetX: true,
	offsetY: true,
	pointerId: true,
	pointerType: true,
	screenX: true,
	screenY: true,
	targetTouches: true,
	toElement: true,
	touches: true,

	which: function( event ) {
		var button = event.button;

		// Add which for key events
		if ( event.which == null && rkeyEvent.test( event.type ) ) {
			return event.charCode != null ? event.charCode : event.keyCode;
		}

		// Add which for click: 1 === left; 2 === middle; 3 === right
		if ( !event.which && button !== undefined && rmouseEvent.test( event.type ) ) {
			if ( button & 1 ) {
				return 1;
			}

			if ( button & 2 ) {
				return 3;
			}

			if ( button & 4 ) {
				return 2;
			}

			return 0;
		}

		return event.which;
	}
}, jQuery.event.addProp );

// Create mouseenter/leave events using mouseover/out and event-time checks
// so that event delegation works in jQuery.
// Do the same for pointerenter/pointerleave and pointerover/pointerout
//
// Support: Safari 7 only
// Safari sends mouseenter too often; see:
// https://bugs.chromium.org/p/chromium/issues/detail?id=470258
// for the description of the bug (it existed in older Chrome versions as well).
jQuery.each( {
	mouseenter: "mouseover",
	mouseleave: "mouseout",
	pointerenter: "pointerover",
	pointerleave: "pointerout"
}, function( orig, fix ) {
	jQuery.event.special[ orig ] = {
		delegateType: fix,
		bindType: fix,

		handle: function( event ) {
			var ret,
				target = this,
				related = event.relatedTarget,
				handleObj = event.handleObj;

			// For mouseenter/leave call the handler if related is outside the target.
			// NB: No relatedTarget if the mouse left/entered the browser window
			if ( !related || ( related !== target && !jQuery.contains( target, related ) ) ) {
				event.type = handleObj.origType;
				ret = handleObj.handler.apply( this, arguments );
				event.type = fix;
			}
			return ret;
		}
	};
} );

jQuery.fn.extend( {

	on: function( types, selector, data, fn ) {
		return on( this, types, selector, data, fn );
	},
	one: function( types, selector, data, fn ) {
		return on( this, types, selector, data, fn, 1 );
	},
	off: function( types, selector, fn ) {
		var handleObj, type;
		if ( types && types.preventDefault && types.handleObj ) {

			// ( event )  dispatched jQuery.Event
			handleObj = types.handleObj;
			jQuery( types.delegateTarget ).off(
				handleObj.namespace ?
					handleObj.origType + "." + handleObj.namespace :
					handleObj.origType,
				handleObj.selector,
				handleObj.handler
			);
			return this;
		}
		if ( typeof types === "object" ) {

			// ( types-object [, selector] )
			for ( type in types ) {
				this.off( type, selector, types[ type ] );
			}
			return this;
		}
		if ( selector === false || typeof selector === "function" ) {

			// ( types [, fn] )
			fn = selector;
			selector = undefined;
		}
		if ( fn === false ) {
			fn = returnFalse;
		}
		return this.each( function() {
			jQuery.event.remove( this, types, fn, selector );
		} );
	}
} );


var

	/* eslint-disable max-len */

	// See https://github.com/eslint/eslint/issues/3229
	rxhtmlTag = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([a-z][^\/\0>\x20\t\r\n\f]*)[^>]*)\/>/gi,

	/* eslint-enable */

	// Support: IE <=10 - 11, Edge 12 - 13 only
	// In IE/Edge using regex groups here causes severe slowdowns.
	// See https://connect.microsoft.com/IE/feedback/details/1736512/
	rnoInnerhtml = /<script|<style|<link/i,

	// checked="checked" or checked
	rchecked = /checked\s*(?:[^=]|=\s*.checked.)/i,
	rcleanScript = /^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;

// Prefer a tbody over its parent table for containing new rows
function manipulationTarget( elem, content ) {
	if ( nodeName( elem, "table" ) &&
		nodeName( content.nodeType !== 11 ? content : content.firstChild, "tr" ) ) {

		return jQuery( elem ).children( "tbody" )[ 0 ] || elem;
	}

	return elem;
}

// Replace/restore the type attribute of script elements for safe DOM manipulation
function disableScript( elem ) {
	elem.type = ( elem.getAttribute( "type" ) !== null ) + "/" + elem.type;
	return elem;
}
function restoreScript( elem ) {
	if ( ( elem.type || "" ).slice( 0, 5 ) === "true/" ) {
		elem.type = elem.type.slice( 5 );
	} else {
		elem.removeAttribute( "type" );
	}

	return elem;
}

function cloneCopyEvent( src, dest ) {
	var i, l, type, pdataOld, pdataCur, udataOld, udataCur, events;

	if ( dest.nodeType !== 1 ) {
		return;
	}

	// 1. Copy private data: events, handlers, etc.
	if ( dataPriv.hasData( src ) ) {
		pdataOld = dataPriv.access( src );
		pdataCur = dataPriv.set( dest, pdataOld );
		events = pdataOld.events;

		if ( events ) {
			delete pdataCur.handle;
			pdataCur.events = {};

			for ( type in events ) {
				for ( i = 0, l = events[ type ].length; i < l; i++ ) {
					jQuery.event.add( dest, type, events[ type ][ i ] );
				}
			}
		}
	}

	// 2. Copy user data
	if ( dataUser.hasData( src ) ) {
		udataOld = dataUser.access( src );
		udataCur = jQuery.extend( {}, udataOld );

		dataUser.set( dest, udataCur );
	}
}

// Fix IE bugs, see support tests
function fixInput( src, dest ) {
	var nodeName = dest.nodeName.toLowerCase();

	// Fails to persist the checked state of a cloned checkbox or radio button.
	if ( nodeName === "input" && rcheckableType.test( src.type ) ) {
		dest.checked = src.checked;

	// Fails to return the selected option to the default selected state when cloning options
	} else if ( nodeName === "input" || nodeName === "textarea" ) {
		dest.defaultValue = src.defaultValue;
	}
}

function domManip( collection, args, callback, ignored ) {

	// Flatten any nested arrays
	args = concat.apply( [], args );

	var fragment, first, scripts, hasScripts, node, doc,
		i = 0,
		l = collection.length,
		iNoClone = l - 1,
		value = args[ 0 ],
		valueIsFunction = isFunction( value );

	// We can't cloneNode fragments that contain checked, in WebKit
	if ( valueIsFunction ||
			( l > 1 && typeof value === "string" &&
				!support.checkClone && rchecked.test( value ) ) ) {
		return collection.each( function( index ) {
			var self = collection.eq( index );
			if ( valueIsFunction ) {
				args[ 0 ] = value.call( this, index, self.html() );
			}
			domManip( self, args, callback, ignored );
		} );
	}

	if ( l ) {
		fragment = buildFragment( args, collection[ 0 ].ownerDocument, false, collection, ignored );
		first = fragment.firstChild;

		if ( fragment.childNodes.length === 1 ) {
			fragment = first;
		}

		// Require either new content or an interest in ignored elements to invoke the callback
		if ( first || ignored ) {
			scripts = jQuery.map( getAll( fragment, "script" ), disableScript );
			hasScripts = scripts.length;

			// Use the original fragment for the last item
			// instead of the first because it can end up
			// being emptied incorrectly in certain situations (#8070).
			for ( ; i < l; i++ ) {
				node = fragment;

				if ( i !== iNoClone ) {
					node = jQuery.clone( node, true, true );

					// Keep references to cloned scripts for later restoration
					if ( hasScripts ) {

						// Support: Android <=4.0 only, PhantomJS 1 only
						// push.apply(_, arraylike) throws on ancient WebKit
						jQuery.merge( scripts, getAll( node, "script" ) );
					}
				}

				callback.call( collection[ i ], node, i );
			}

			if ( hasScripts ) {
				doc = scripts[ scripts.length - 1 ].ownerDocument;

				// Reenable scripts
				jQuery.map( scripts, restoreScript );

				// Evaluate executable scripts on first document insertion
				for ( i = 0; i < hasScripts; i++ ) {
					node = scripts[ i ];
					if ( rscriptType.test( node.type || "" ) &&
						!dataPriv.access( node, "globalEval" ) &&
						jQuery.contains( doc, node ) ) {

						if ( node.src && ( node.type || "" ).toLowerCase()  !== "module" ) {

							// Optional AJAX dependency, but won't run scripts if not present
							if ( jQuery._evalUrl ) {
								jQuery._evalUrl( node.src );
							}
						} else {
							DOMEval( node.textContent.replace( rcleanScript, "" ), doc, node );
						}
					}
				}
			}
		}
	}

	return collection;
}

function remove( elem, selector, keepData ) {
	var node,
		nodes = selector ? jQuery.filter( selector, elem ) : elem,
		i = 0;

	for ( ; ( node = nodes[ i ] ) != null; i++ ) {
		if ( !keepData && node.nodeType === 1 ) {
			jQuery.cleanData( getAll( node ) );
		}

		if ( node.parentNode ) {
			if ( keepData && jQuery.contains( node.ownerDocument, node ) ) {
				setGlobalEval( getAll( node, "script" ) );
			}
			node.parentNode.removeChild( node );
		}
	}

	return elem;
}

jQuery.extend( {
	htmlPrefilter: function( html ) {
		return html.replace( rxhtmlTag, "<$1></$2>" );
	},

	clone: function( elem, dataAndEvents, deepDataAndEvents ) {
		var i, l, srcElements, destElements,
			clone = elem.cloneNode( true ),
			inPage = jQuery.contains( elem.ownerDocument, elem );

		// Fix IE cloning issues
		if ( !support.noCloneChecked && ( elem.nodeType === 1 || elem.nodeType === 11 ) &&
				!jQuery.isXMLDoc( elem ) ) {

			// We eschew Sizzle here for performance reasons: https://jsperf.com/getall-vs-sizzle/2
			destElements = getAll( clone );
			srcElements = getAll( elem );

			for ( i = 0, l = srcElements.length; i < l; i++ ) {
				fixInput( srcElements[ i ], destElements[ i ] );
			}
		}

		// Copy the events from the original to the clone
		if ( dataAndEvents ) {
			if ( deepDataAndEvents ) {
				srcElements = srcElements || getAll( elem );
				destElements = destElements || getAll( clone );

				for ( i = 0, l = srcElements.length; i < l; i++ ) {
					cloneCopyEvent( srcElements[ i ], destElements[ i ] );
				}
			} else {
				cloneCopyEvent( elem, clone );
			}
		}

		// Preserve script evaluation history
		destElements = getAll( clone, "script" );
		if ( destElements.length > 0 ) {
			setGlobalEval( destElements, !inPage && getAll( elem, "script" ) );
		}

		// Return the cloned set
		return clone;
	},

	cleanData: function( elems ) {
		var data, elem, type,
			special = jQuery.event.special,
			i = 0;

		for ( ; ( elem = elems[ i ] ) !== undefined; i++ ) {
			if ( acceptData( elem ) ) {
				if ( ( data = elem[ dataPriv.expando ] ) ) {
					if ( data.events ) {
						for ( type in data.events ) {
							if ( special[ type ] ) {
								jQuery.event.remove( elem, type );

							// This is a shortcut to avoid jQuery.event.remove's overhead
							} else {
								jQuery.removeEvent( elem, type, data.handle );
							}
						}
					}

					// Support: Chrome <=35 - 45+
					// Assign undefined instead of using delete, see Data#remove
					elem[ dataPriv.expando ] = undefined;
				}
				if ( elem[ dataUser.expando ] ) {

					// Support: Chrome <=35 - 45+
					// Assign undefined instead of using delete, see Data#remove
					elem[ dataUser.expando ] = undefined;
				}
			}
		}
	}
} );

jQuery.fn.extend( {
	detach: function( selector ) {
		return remove( this, selector, true );
	},

	remove: function( selector ) {
		return remove( this, selector );
	},

	text: function( value ) {
		return access( this, function( value ) {
			return value === undefined ?
				jQuery.text( this ) :
				this.empty().each( function() {
					if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
						this.textContent = value;
					}
				} );
		}, null, value, arguments.length );
	},

	append: function() {
		return domManip( this, arguments, function( elem ) {
			if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
				var target = manipulationTarget( this, elem );
				target.appendChild( elem );
			}
		} );
	},

	prepend: function() {
		return domManip( this, arguments, function( elem ) {
			if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
				var target = manipulationTarget( this, elem );
				target.insertBefore( elem, target.firstChild );
			}
		} );
	},

	before: function() {
		return domManip( this, arguments, function( elem ) {
			if ( this.parentNode ) {
				this.parentNode.insertBefore( elem, this );
			}
		} );
	},

	after: function() {
		return domManip( this, arguments, function( elem ) {
			if ( this.parentNode ) {
				this.parentNode.insertBefore( elem, this.nextSibling );
			}
		} );
	},

	empty: function() {
		var elem,
			i = 0;

		for ( ; ( elem = this[ i ] ) != null; i++ ) {
			if ( elem.nodeType === 1 ) {

				// Prevent memory leaks
				jQuery.cleanData( getAll( elem, false ) );

				// Remove any remaining nodes
				elem.textContent = "";
			}
		}

		return this;
	},

	clone: function( dataAndEvents, deepDataAndEvents ) {
		dataAndEvents = dataAndEvents == null ? false : dataAndEvents;
		deepDataAndEvents = deepDataAndEvents == null ? dataAndEvents : deepDataAndEvents;

		return this.map( function() {
			return jQuery.clone( this, dataAndEvents, deepDataAndEvents );
		} );
	},

	html: function( value ) {
		return access( this, function( value ) {
			var elem = this[ 0 ] || {},
				i = 0,
				l = this.length;

			if ( value === undefined && elem.nodeType === 1 ) {
				return elem.innerHTML;
			}

			// See if we can take a shortcut and just use innerHTML
			if ( typeof value === "string" && !rnoInnerhtml.test( value ) &&
				!wrapMap[ ( rtagName.exec( value ) || [ "", "" ] )[ 1 ].toLowerCase() ] ) {

				value = jQuery.htmlPrefilter( value );

				try {
					for ( ; i < l; i++ ) {
						elem = this[ i ] || {};

						// Remove element nodes and prevent memory leaks
						if ( elem.nodeType === 1 ) {
							jQuery.cleanData( getAll( elem, false ) );
							elem.innerHTML = value;
						}
					}

					elem = 0;

				// If using innerHTML throws an exception, use the fallback method
				} catch ( e ) {}
			}

			if ( elem ) {
				this.empty().append( value );
			}
		}, null, value, arguments.length );
	},

	replaceWith: function() {
		var ignored = [];

		// Make the changes, replacing each non-ignored context element with the new content
		return domManip( this, arguments, function( elem ) {
			var parent = this.parentNode;

			if ( jQuery.inArray( this, ignored ) < 0 ) {
				jQuery.cleanData( getAll( this ) );
				if ( parent ) {
					parent.replaceChild( elem, this );
				}
			}

		// Force callback invocation
		}, ignored );
	}
} );

jQuery.each( {
	appendTo: "append",
	prependTo: "prepend",
	insertBefore: "before",
	insertAfter: "after",
	replaceAll: "replaceWith"
}, function( name, original ) {
	jQuery.fn[ name ] = function( selector ) {
		var elems,
			ret = [],
			insert = jQuery( selector ),
			last = insert.length - 1,
			i = 0;

		for ( ; i <= last; i++ ) {
			elems = i === last ? this : this.clone( true );
			jQuery( insert[ i ] )[ original ]( elems );

			// Support: Android <=4.0 only, PhantomJS 1 only
			// .get() because push.apply(_, arraylike) throws on ancient WebKit
			push.apply( ret, elems.get() );
		}

		return this.pushStack( ret );
	};
} );
var rnumnonpx = new RegExp( "^(" + pnum + ")(?!px)[a-z%]+$", "i" );

var getStyles = function( elem ) {

		// Support: IE <=11 only, Firefox <=30 (#15098, #14150)
		// IE throws on elements created in popups
		// FF meanwhile throws on frame elements through "defaultView.getComputedStyle"
		var view = elem.ownerDocument.defaultView;

		if ( !view || !view.opener ) {
			view = window;
		}

		return view.getComputedStyle( elem );
	};

var rboxStyle = new RegExp( cssExpand.join( "|" ), "i" );



( function() {

	// Executing both pixelPosition & boxSizingReliable tests require only one layout
	// so they're executed at the same time to save the second computation.
	function computeStyleTests() {

		// This is a singleton, we need to execute it only once
		if ( !div ) {
			return;
		}

		container.style.cssText = "position:absolute;left:-11111px;width:60px;" +
			"margin-top:1px;padding:0;border:0";
		div.style.cssText =
			"position:relative;display:block;box-sizing:border-box;overflow:scroll;" +
			"margin:auto;border:1px;padding:1px;" +
			"width:60%;top:1%";
		documentElement.appendChild( container ).appendChild( div );

		var divStyle = window.getComputedStyle( div );
		pixelPositionVal = divStyle.top !== "1%";

		// Support: Android 4.0 - 4.3 only, Firefox <=3 - 44
		reliableMarginLeftVal = roundPixelMeasures( divStyle.marginLeft ) === 12;

		// Support: Android 4.0 - 4.3 only, Safari <=9.1 - 10.1, iOS <=7.0 - 9.3
		// Some styles come back with percentage values, even though they shouldn't
		div.style.right = "60%";
		pixelBoxStylesVal = roundPixelMeasures( divStyle.right ) === 36;

		// Support: IE 9 - 11 only
		// Detect misreporting of content dimensions for box-sizing:border-box elements
		boxSizingReliableVal = roundPixelMeasures( divStyle.width ) === 36;

		// Support: IE 9 only
		// Detect overflow:scroll screwiness (gh-3699)
		div.style.position = "absolute";
		scrollboxSizeVal = div.offsetWidth === 36 || "absolute";

		documentElement.removeChild( container );

		// Nullify the div so it wouldn't be stored in the memory and
		// it will also be a sign that checks already performed
		div = null;
	}

	function roundPixelMeasures( measure ) {
		return Math.round( parseFloat( measure ) );
	}

	var pixelPositionVal, boxSizingReliableVal, scrollboxSizeVal, pixelBoxStylesVal,
		reliableMarginLeftVal,
		container = document.createElement( "div" ),
		div = document.createElement( "div" );

	// Finish early in limited (non-browser) environments
	if ( !div.style ) {
		return;
	}

	// Support: IE <=9 - 11 only
	// Style of cloned element affects source element cloned (#8908)
	div.style.backgroundClip = "content-box";
	div.cloneNode( true ).style.backgroundClip = "";
	support.clearCloneStyle = div.style.backgroundClip === "content-box";

	jQuery.extend( support, {
		boxSizingReliable: function() {
			computeStyleTests();
			return boxSizingReliableVal;
		},
		pixelBoxStyles: function() {
			computeStyleTests();
			return pixelBoxStylesVal;
		},
		pixelPosition: function() {
			computeStyleTests();
			return pixelPositionVal;
		},
		reliableMarginLeft: function() {
			computeStyleTests();
			return reliableMarginLeftVal;
		},
		scrollboxSize: function() {
			computeStyleTests();
			return scrollboxSizeVal;
		}
	} );
} )();


function curCSS( elem, name, computed ) {
	var width, minWidth, maxWidth, ret,

		// Support: Firefox 51+
		// Retrieving style before computed somehow
		// fixes an issue with getting wrong values
		// on detached elements
		style = elem.style;

	computed = computed || getStyles( elem );

	// getPropertyValue is needed for:
	//   .css('filter') (IE 9 only, #12537)
	//   .css('--customProperty) (#3144)
	if ( computed ) {
		ret = computed.getPropertyValue( name ) || computed[ name ];

		if ( ret === "" && !jQuery.contains( elem.ownerDocument, elem ) ) {
			ret = jQuery.style( elem, name );
		}

		// A tribute to the "awesome hack by Dean Edwards"
		// Android Browser returns percentage for some values,
		// but width seems to be reliably pixels.
		// This is against the CSSOM draft spec:
		// https://drafts.csswg.org/cssom/#resolved-values
		if ( !support.pixelBoxStyles() && rnumnonpx.test( ret ) && rboxStyle.test( name ) ) {

			// Remember the original values
			width = style.width;
			minWidth = style.minWidth;
			maxWidth = style.maxWidth;

			// Put in the new values to get a computed value out
			style.minWidth = style.maxWidth = style.width = ret;
			ret = computed.width;

			// Revert the changed values
			style.width = width;
			style.minWidth = minWidth;
			style.maxWidth = maxWidth;
		}
	}

	return ret !== undefined ?

		// Support: IE <=9 - 11 only
		// IE returns zIndex value as an integer.
		ret + "" :
		ret;
}


function addGetHookIf( conditionFn, hookFn ) {

	// Define the hook, we'll check on the first run if it's really needed.
	return {
		get: function() {
			if ( conditionFn() ) {

				// Hook not needed (or it's not possible to use it due
				// to missing dependency), remove it.
				delete this.get;
				return;
			}

			// Hook needed; redefine it so that the support test is not executed again.
			return ( this.get = hookFn ).apply( this, arguments );
		}
	};
}


var

	// Swappable if display is none or starts with table
	// except "table", "table-cell", or "table-caption"
	// See here for display values: https://developer.mozilla.org/en-US/docs/CSS/display
	rdisplayswap = /^(none|table(?!-c[ea]).+)/,
	rcustomProp = /^--/,
	cssShow = { position: "absolute", visibility: "hidden", display: "block" },
	cssNormalTransform = {
		letterSpacing: "0",
		fontWeight: "400"
	},

	cssPrefixes = [ "Webkit", "Moz", "ms" ],
	emptyStyle = document.createElement( "div" ).style;

// Return a css property mapped to a potentially vendor prefixed property
function vendorPropName( name ) {

	// Shortcut for names that are not vendor prefixed
	if ( name in emptyStyle ) {
		return name;
	}

	// Check for vendor prefixed names
	var capName = name[ 0 ].toUpperCase() + name.slice( 1 ),
		i = cssPrefixes.length;

	while ( i-- ) {
		name = cssPrefixes[ i ] + capName;
		if ( name in emptyStyle ) {
			return name;
		}
	}
}

// Return a property mapped along what jQuery.cssProps suggests or to
// a vendor prefixed property.
function finalPropName( name ) {
	var ret = jQuery.cssProps[ name ];
	if ( !ret ) {
		ret = jQuery.cssProps[ name ] = vendorPropName( name ) || name;
	}
	return ret;
}

function setPositiveNumber( elem, value, subtract ) {

	// Any relative (+/-) values have already been
	// normalized at this point
	var matches = rcssNum.exec( value );
	return matches ?

		// Guard against undefined "subtract", e.g., when used as in cssHooks
		Math.max( 0, matches[ 2 ] - ( subtract || 0 ) ) + ( matches[ 3 ] || "px" ) :
		value;
}

function boxModelAdjustment( elem, dimension, box, isBorderBox, styles, computedVal ) {
	var i = dimension === "width" ? 1 : 0,
		extra = 0,
		delta = 0;

	// Adjustment may not be necessary
	if ( box === ( isBorderBox ? "border" : "content" ) ) {
		return 0;
	}

	for ( ; i < 4; i += 2 ) {

		// Both box models exclude margin
		if ( box === "margin" ) {
			delta += jQuery.css( elem, box + cssExpand[ i ], true, styles );
		}

		// If we get here with a content-box, we're seeking "padding" or "border" or "margin"
		if ( !isBorderBox ) {

			// Add padding
			delta += jQuery.css( elem, "padding" + cssExpand[ i ], true, styles );

			// For "border" or "margin", add border
			if ( box !== "padding" ) {
				delta += jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );

			// But still keep track of it otherwise
			} else {
				extra += jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );
			}

		// If we get here with a border-box (content + padding + border), we're seeking "content" or
		// "padding" or "margin"
		} else {

			// For "content", subtract padding
			if ( box === "content" ) {
				delta -= jQuery.css( elem, "padding" + cssExpand[ i ], true, styles );
			}

			// For "content" or "padding", subtract border
			if ( box !== "margin" ) {
				delta -= jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );
			}
		}
	}

	// Account for positive content-box scroll gutter when requested by providing computedVal
	if ( !isBorderBox && computedVal >= 0 ) {

		// offsetWidth/offsetHeight is a rounded sum of content, padding, scroll gutter, and border
		// Assuming integer scroll gutter, subtract the rest and round down
		delta += Math.max( 0, Math.ceil(
			elem[ "offset" + dimension[ 0 ].toUpperCase() + dimension.slice( 1 ) ] -
			computedVal -
			delta -
			extra -
			0.5
		) );
	}

	return delta;
}

function getWidthOrHeight( elem, dimension, extra ) {

	// Start with computed style
	var styles = getStyles( elem ),
		val = curCSS( elem, dimension, styles ),
		isBorderBox = jQuery.css( elem, "boxSizing", false, styles ) === "border-box",
		valueIsBorderBox = isBorderBox;

	// Support: Firefox <=54
	// Return a confounding non-pixel value or feign ignorance, as appropriate.
	if ( rnumnonpx.test( val ) ) {
		if ( !extra ) {
			return val;
		}
		val = "auto";
	}

	// Check for style in case a browser which returns unreliable values
	// for getComputedStyle silently falls back to the reliable elem.style
	valueIsBorderBox = valueIsBorderBox &&
		( support.boxSizingReliable() || val === elem.style[ dimension ] );

	// Fall back to offsetWidth/offsetHeight when value is "auto"
	// This happens for inline elements with no explicit setting (gh-3571)
	// Support: Android <=4.1 - 4.3 only
	// Also use offsetWidth/offsetHeight for misreported inline dimensions (gh-3602)
	if ( val === "auto" ||
		!parseFloat( val ) && jQuery.css( elem, "display", false, styles ) === "inline" ) {

		val = elem[ "offset" + dimension[ 0 ].toUpperCase() + dimension.slice( 1 ) ];

		// offsetWidth/offsetHeight provide border-box values
		valueIsBorderBox = true;
	}

	// Normalize "" and auto
	val = parseFloat( val ) || 0;

	// Adjust for the element's box model
	return ( val +
		boxModelAdjustment(
			elem,
			dimension,
			extra || ( isBorderBox ? "border" : "content" ),
			valueIsBorderBox,
			styles,

			// Provide the current computed size to request scroll gutter calculation (gh-3589)
			val
		)
	) + "px";
}

jQuery.extend( {

	// Add in style property hooks for overriding the default
	// behavior of getting and setting a style property
	cssHooks: {
		opacity: {
			get: function( elem, computed ) {
				if ( computed ) {

					// We should always get a number back from opacity
					var ret = curCSS( elem, "opacity" );
					return ret === "" ? "1" : ret;
				}
			}
		}
	},

	// Don't automatically add "px" to these possibly-unitless properties
	cssNumber: {
		"animationIterationCount": true,
		"columnCount": true,
		"fillOpacity": true,
		"flexGrow": true,
		"flexShrink": true,
		"fontWeight": true,
		"lineHeight": true,
		"opacity": true,
		"order": true,
		"orphans": true,
		"widows": true,
		"zIndex": true,
		"zoom": true
	},

	// Add in properties whose names you wish to fix before
	// setting or getting the value
	cssProps: {},

	// Get and set the style property on a DOM Node
	style: function( elem, name, value, extra ) {

		// Don't set styles on text and comment nodes
		if ( !elem || elem.nodeType === 3 || elem.nodeType === 8 || !elem.style ) {
			return;
		}

		// Make sure that we're working with the right name
		var ret, type, hooks,
			origName = camelCase( name ),
			isCustomProp = rcustomProp.test( name ),
			style = elem.style;

		// Make sure that we're working with the right name. We don't
		// want to query the value if it is a CSS custom property
		// since they are user-defined.
		if ( !isCustomProp ) {
			name = finalPropName( origName );
		}

		// Gets hook for the prefixed version, then unprefixed version
		hooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];

		// Check if we're setting a value
		if ( value !== undefined ) {
			type = typeof value;

			// Convert "+=" or "-=" to relative numbers (#7345)
			if ( type === "string" && ( ret = rcssNum.exec( value ) ) && ret[ 1 ] ) {
				value = adjustCSS( elem, name, ret );

				// Fixes bug #9237
				type = "number";
			}

			// Make sure that null and NaN values aren't set (#7116)
			if ( value == null || value !== value ) {
				return;
			}

			// If a number was passed in, add the unit (except for certain CSS properties)
			if ( type === "number" ) {
				value += ret && ret[ 3 ] || ( jQuery.cssNumber[ origName ] ? "" : "px" );
			}

			// background-* props affect original clone's values
			if ( !support.clearCloneStyle && value === "" && name.indexOf( "background" ) === 0 ) {
				style[ name ] = "inherit";
			}

			// If a hook was provided, use that value, otherwise just set the specified value
			if ( !hooks || !( "set" in hooks ) ||
				( value = hooks.set( elem, value, extra ) ) !== undefined ) {

				if ( isCustomProp ) {
					style.setProperty( name, value );
				} else {
					style[ name ] = value;
				}
			}

		} else {

			// If a hook was provided get the non-computed value from there
			if ( hooks && "get" in hooks &&
				( ret = hooks.get( elem, false, extra ) ) !== undefined ) {

				return ret;
			}

			// Otherwise just get the value from the style object
			return style[ name ];
		}
	},

	css: function( elem, name, extra, styles ) {
		var val, num, hooks,
			origName = camelCase( name ),
			isCustomProp = rcustomProp.test( name );

		// Make sure that we're working with the right name. We don't
		// want to modify the value if it is a CSS custom property
		// since they are user-defined.
		if ( !isCustomProp ) {
			name = finalPropName( origName );
		}

		// Try prefixed name followed by the unprefixed name
		hooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];

		// If a hook was provided get the computed value from there
		if ( hooks && "get" in hooks ) {
			val = hooks.get( elem, true, extra );
		}

		// Otherwise, if a way to get the computed value exists, use that
		if ( val === undefined ) {
			val = curCSS( elem, name, styles );
		}

		// Convert "normal" to computed value
		if ( val === "normal" && name in cssNormalTransform ) {
			val = cssNormalTransform[ name ];
		}

		// Make numeric if forced or a qualifier was provided and val looks numeric
		if ( extra === "" || extra ) {
			num = parseFloat( val );
			return extra === true || isFinite( num ) ? num || 0 : val;
		}

		return val;
	}
} );

jQuery.each( [ "height", "width" ], function( i, dimension ) {
	jQuery.cssHooks[ dimension ] = {
		get: function( elem, computed, extra ) {
			if ( computed ) {

				// Certain elements can have dimension info if we invisibly show them
				// but it must have a current display style that would benefit
				return rdisplayswap.test( jQuery.css( elem, "display" ) ) &&

					// Support: Safari 8+
					// Table columns in Safari have non-zero offsetWidth & zero
					// getBoundingClientRect().width unless display is changed.
					// Support: IE <=11 only
					// Running getBoundingClientRect on a disconnected node
					// in IE throws an error.
					( !elem.getClientRects().length || !elem.getBoundingClientRect().width ) ?
						swap( elem, cssShow, function() {
							return getWidthOrHeight( elem, dimension, extra );
						} ) :
						getWidthOrHeight( elem, dimension, extra );
			}
		},

		set: function( elem, value, extra ) {
			var matches,
				styles = getStyles( elem ),
				isBorderBox = jQuery.css( elem, "boxSizing", false, styles ) === "border-box",
				subtract = extra && boxModelAdjustment(
					elem,
					dimension,
					extra,
					isBorderBox,
					styles
				);

			// Account for unreliable border-box dimensions by comparing offset* to computed and
			// faking a content-box to get border and padding (gh-3699)
			if ( isBorderBox && support.scrollboxSize() === styles.position ) {
				subtract -= Math.ceil(
					elem[ "offset" + dimension[ 0 ].toUpperCase() + dimension.slice( 1 ) ] -
					parseFloat( styles[ dimension ] ) -
					boxModelAdjustment( elem, dimension, "border", false, styles ) -
					0.5
				);
			}

			// Convert to pixels if value adjustment is needed
			if ( subtract && ( matches = rcssNum.exec( value ) ) &&
				( matches[ 3 ] || "px" ) !== "px" ) {

				elem.style[ dimension ] = value;
				value = jQuery.css( elem, dimension );
			}

			return setPositiveNumber( elem, value, subtract );
		}
	};
} );

jQuery.cssHooks.marginLeft = addGetHookIf( support.reliableMarginLeft,
	function( elem, computed ) {
		if ( computed ) {
			return ( parseFloat( curCSS( elem, "marginLeft" ) ) ||
				elem.getBoundingClientRect().left -
					swap( elem, { marginLeft: 0 }, function() {
						return elem.getBoundingClientRect().left;
					} )
				) + "px";
		}
	}
);

// These hooks are used by animate to expand properties
jQuery.each( {
	margin: "",
	padding: "",
	border: "Width"
}, function( prefix, suffix ) {
	jQuery.cssHooks[ prefix + suffix ] = {
		expand: function( value ) {
			var i = 0,
				expanded = {},

				// Assumes a single number if not a string
				parts = typeof value === "string" ? value.split( " " ) : [ value ];

			for ( ; i < 4; i++ ) {
				expanded[ prefix + cssExpand[ i ] + suffix ] =
					parts[ i ] || parts[ i - 2 ] || parts[ 0 ];
			}

			return expanded;
		}
	};

	if ( prefix !== "margin" ) {
		jQuery.cssHooks[ prefix + suffix ].set = setPositiveNumber;
	}
} );

jQuery.fn.extend( {
	css: function( name, value ) {
		return access( this, function( elem, name, value ) {
			var styles, len,
				map = {},
				i = 0;

			if ( Array.isArray( name ) ) {
				styles = getStyles( elem );
				len = name.length;

				for ( ; i < len; i++ ) {
					map[ name[ i ] ] = jQuery.css( elem, name[ i ], false, styles );
				}

				return map;
			}

			return value !== undefined ?
				jQuery.style( elem, name, value ) :
				jQuery.css( elem, name );
		}, name, value, arguments.length > 1 );
	}
} );


function Tween( elem, options, prop, end, easing ) {
	return new Tween.prototype.init( elem, options, prop, end, easing );
}
jQuery.Tween = Tween;

Tween.prototype = {
	constructor: Tween,
	init: function( elem, options, prop, end, easing, unit ) {
		this.elem = elem;
		this.prop = prop;
		this.easing = easing || jQuery.easing._default;
		this.options = options;
		this.start = this.now = this.cur();
		this.end = end;
		this.unit = unit || ( jQuery.cssNumber[ prop ] ? "" : "px" );
	},
	cur: function() {
		var hooks = Tween.propHooks[ this.prop ];

		return hooks && hooks.get ?
			hooks.get( this ) :
			Tween.propHooks._default.get( this );
	},
	run: function( percent ) {
		var eased,
			hooks = Tween.propHooks[ this.prop ];

		if ( this.options.duration ) {
			this.pos = eased = jQuery.easing[ this.easing ](
				percent, this.options.duration * percent, 0, 1, this.options.duration
			);
		} else {
			this.pos = eased = percent;
		}
		this.now = ( this.end - this.start ) * eased + this.start;

		if ( this.options.step ) {
			this.options.step.call( this.elem, this.now, this );
		}

		if ( hooks && hooks.set ) {
			hooks.set( this );
		} else {
			Tween.propHooks._default.set( this );
		}
		return this;
	}
};

Tween.prototype.init.prototype = Tween.prototype;

Tween.propHooks = {
	_default: {
		get: function( tween ) {
			var result;

			// Use a property on the element directly when it is not a DOM element,
			// or when there is no matching style property that exists.
			if ( tween.elem.nodeType !== 1 ||
				tween.elem[ tween.prop ] != null && tween.elem.style[ tween.prop ] == null ) {
				return tween.elem[ tween.prop ];
			}

			// Passing an empty string as a 3rd parameter to .css will automatically
			// attempt a parseFloat and fallback to a string if the parse fails.
			// Simple values such as "10px" are parsed to Float;
			// complex values such as "rotate(1rad)" are returned as-is.
			result = jQuery.css( tween.elem, tween.prop, "" );

			// Empty strings, null, undefined and "auto" are converted to 0.
			return !result || result === "auto" ? 0 : result;
		},
		set: function( tween ) {

			// Use step hook for back compat.
			// Use cssHook if its there.
			// Use .style if available and use plain properties where available.
			if ( jQuery.fx.step[ tween.prop ] ) {
				jQuery.fx.step[ tween.prop ]( tween );
			} else if ( tween.elem.nodeType === 1 &&
				( tween.elem.style[ jQuery.cssProps[ tween.prop ] ] != null ||
					jQuery.cssHooks[ tween.prop ] ) ) {
				jQuery.style( tween.elem, tween.prop, tween.now + tween.unit );
			} else {
				tween.elem[ tween.prop ] = tween.now;
			}
		}
	}
};

// Support: IE <=9 only
// Panic based approach to setting things on disconnected nodes
Tween.propHooks.scrollTop = Tween.propHooks.scrollLeft = {
	set: function( tween ) {
		if ( tween.elem.nodeType && tween.elem.parentNode ) {
			tween.elem[ tween.prop ] = tween.now;
		}
	}
};

jQuery.easing = {
	linear: function( p ) {
		return p;
	},
	swing: function( p ) {
		return 0.5 - Math.cos( p * Math.PI ) / 2;
	},
	_default: "swing"
};

jQuery.fx = Tween.prototype.init;

// Back compat <1.8 extension point
jQuery.fx.step = {};




var
	fxNow, inProgress,
	rfxtypes = /^(?:toggle|show|hide)$/,
	rrun = /queueHooks$/;

function schedule() {
	if ( inProgress ) {
		if ( document.hidden === false && window.requestAnimationFrame ) {
			window.requestAnimationFrame( schedule );
		} else {
			window.setTimeout( schedule, jQuery.fx.interval );
		}

		jQuery.fx.tick();
	}
}

// Animations created synchronously will run synchronously
function createFxNow() {
	window.setTimeout( function() {
		fxNow = undefined;
	} );
	return ( fxNow = Date.now() );
}

// Generate parameters to create a standard animation
function genFx( type, includeWidth ) {
	var which,
		i = 0,
		attrs = { height: type };

	// If we include width, step value is 1 to do all cssExpand values,
	// otherwise step value is 2 to skip over Left and Right
	includeWidth = includeWidth ? 1 : 0;
	for ( ; i < 4; i += 2 - includeWidth ) {
		which = cssExpand[ i ];
		attrs[ "margin" + which ] = attrs[ "padding" + which ] = type;
	}

	if ( includeWidth ) {
		attrs.opacity = attrs.width = type;
	}

	return attrs;
}

function createTween( value, prop, animation ) {
	var tween,
		collection = ( Animation.tweeners[ prop ] || [] ).concat( Animation.tweeners[ "*" ] ),
		index = 0,
		length = collection.length;
	for ( ; index < length; index++ ) {
		if ( ( tween = collection[ index ].call( animation, prop, value ) ) ) {

			// We're done with this property
			return tween;
		}
	}
}

function defaultPrefilter( elem, props, opts ) {
	var prop, value, toggle, hooks, oldfire, propTween, restoreDisplay, display,
		isBox = "width" in props || "height" in props,
		anim = this,
		orig = {},
		style = elem.style,
		hidden = elem.nodeType && isHiddenWithinTree( elem ),
		dataShow = dataPriv.get( elem, "fxshow" );

	// Queue-skipping animations hijack the fx hooks
	if ( !opts.queue ) {
		hooks = jQuery._queueHooks( elem, "fx" );
		if ( hooks.unqueued == null ) {
			hooks.unqueued = 0;
			oldfire = hooks.empty.fire;
			hooks.empty.fire = function() {
				if ( !hooks.unqueued ) {
					oldfire();
				}
			};
		}
		hooks.unqueued++;

		anim.always( function() {

			// Ensure the complete handler is called before this completes
			anim.always( function() {
				hooks.unqueued--;
				if ( !jQuery.queue( elem, "fx" ).length ) {
					hooks.empty.fire();
				}
			} );
		} );
	}

	// Detect show/hide animations
	for ( prop in props ) {
		value = props[ prop ];
		if ( rfxtypes.test( value ) ) {
			delete props[ prop ];
			toggle = toggle || value === "toggle";
			if ( value === ( hidden ? "hide" : "show" ) ) {

				// Pretend to be hidden if this is a "show" and
				// there is still data from a stopped show/hide
				if ( value === "show" && dataShow && dataShow[ prop ] !== undefined ) {
					hidden = true;

				// Ignore all other no-op show/hide data
				} else {
					continue;
				}
			}
			orig[ prop ] = dataShow && dataShow[ prop ] || jQuery.style( elem, prop );
		}
	}

	// Bail out if this is a no-op like .hide().hide()
	propTween = !jQuery.isEmptyObject( props );
	if ( !propTween && jQuery.isEmptyObject( orig ) ) {
		return;
	}

	// Restrict "overflow" and "display" styles during box animations
	if ( isBox && elem.nodeType === 1 ) {

		// Support: IE <=9 - 11, Edge 12 - 15
		// Record all 3 overflow attributes because IE does not infer the shorthand
		// from identically-valued overflowX and overflowY and Edge just mirrors
		// the overflowX value there.
		opts.overflow = [ style.overflow, style.overflowX, style.overflowY ];

		// Identify a display type, preferring old show/hide data over the CSS cascade
		restoreDisplay = dataShow && dataShow.display;
		if ( restoreDisplay == null ) {
			restoreDisplay = dataPriv.get( elem, "display" );
		}
		display = jQuery.css( elem, "display" );
		if ( display === "none" ) {
			if ( restoreDisplay ) {
				display = restoreDisplay;
			} else {

				// Get nonempty value(s) by temporarily forcing visibility
				showHide( [ elem ], true );
				restoreDisplay = elem.style.display || restoreDisplay;
				display = jQuery.css( elem, "display" );
				showHide( [ elem ] );
			}
		}

		// Animate inline elements as inline-block
		if ( display === "inline" || display === "inline-block" && restoreDisplay != null ) {
			if ( jQuery.css( elem, "float" ) === "none" ) {

				// Restore the original display value at the end of pure show/hide animations
				if ( !propTween ) {
					anim.done( function() {
						style.display = restoreDisplay;
					} );
					if ( restoreDisplay == null ) {
						display = style.display;
						restoreDisplay = display === "none" ? "" : display;
					}
				}
				style.display = "inline-block";
			}
		}
	}

	if ( opts.overflow ) {
		style.overflow = "hidden";
		anim.always( function() {
			style.overflow = opts.overflow[ 0 ];
			style.overflowX = opts.overflow[ 1 ];
			style.overflowY = opts.overflow[ 2 ];
		} );
	}

	// Implement show/hide animations
	propTween = false;
	for ( prop in orig ) {

		// General show/hide setup for this element animation
		if ( !propTween ) {
			if ( dataShow ) {
				if ( "hidden" in dataShow ) {
					hidden = dataShow.hidden;
				}
			} else {
				dataShow = dataPriv.access( elem, "fxshow", { display: restoreDisplay } );
			}

			// Store hidden/visible for toggle so `.stop().toggle()` "reverses"
			if ( toggle ) {
				dataShow.hidden = !hidden;
			}

			// Show elements before animating them
			if ( hidden ) {
				showHide( [ elem ], true );
			}

			/* eslint-disable no-loop-func */

			anim.done( function() {

			/* eslint-enable no-loop-func */

				// The final step of a "hide" animation is actually hiding the element
				if ( !hidden ) {
					showHide( [ elem ] );
				}
				dataPriv.remove( elem, "fxshow" );
				for ( prop in orig ) {
					jQuery.style( elem, prop, orig[ prop ] );
				}
			} );
		}

		// Per-property setup
		propTween = createTween( hidden ? dataShow[ prop ] : 0, prop, anim );
		if ( !( prop in dataShow ) ) {
			dataShow[ prop ] = propTween.start;
			if ( hidden ) {
				propTween.end = propTween.start;
				propTween.start = 0;
			}
		}
	}
}

function propFilter( props, specialEasing ) {
	var index, name, easing, value, hooks;

	// camelCase, specialEasing and expand cssHook pass
	for ( index in props ) {
		name = camelCase( index );
		easing = specialEasing[ name ];
		value = props[ index ];
		if ( Array.isArray( value ) ) {
			easing = value[ 1 ];
			value = props[ index ] = value[ 0 ];
		}

		if ( index !== name ) {
			props[ name ] = value;
			delete props[ index ];
		}

		hooks = jQuery.cssHooks[ name ];
		if ( hooks && "expand" in hooks ) {
			value = hooks.expand( value );
			delete props[ name ];

			// Not quite $.extend, this won't overwrite existing keys.
			// Reusing 'index' because we have the correct "name"
			for ( index in value ) {
				if ( !( index in props ) ) {
					props[ index ] = value[ index ];
					specialEasing[ index ] = easing;
				}
			}
		} else {
			specialEasing[ name ] = easing;
		}
	}
}

function Animation( elem, properties, options ) {
	var result,
		stopped,
		index = 0,
		length = Animation.prefilters.length,
		deferred = jQuery.Deferred().always( function() {

			// Don't match elem in the :animated selector
			delete tick.elem;
		} ),
		tick = function() {
			if ( stopped ) {
				return false;
			}
			var currentTime = fxNow || createFxNow(),
				remaining = Math.max( 0, animation.startTime + animation.duration - currentTime ),

				// Support: Android 2.3 only
				// Archaic crash bug won't allow us to use `1 - ( 0.5 || 0 )` (#12497)
				temp = remaining / animation.duration || 0,
				percent = 1 - temp,
				index = 0,
				length = animation.tweens.length;

			for ( ; index < length; index++ ) {
				animation.tweens[ index ].run( percent );
			}

			deferred.notifyWith( elem, [ animation, percent, remaining ] );

			// If there's more to do, yield
			if ( percent < 1 && length ) {
				return remaining;
			}

			// If this was an empty animation, synthesize a final progress notification
			if ( !length ) {
				deferred.notifyWith( elem, [ animation, 1, 0 ] );
			}

			// Resolve the animation and report its conclusion
			deferred.resolveWith( elem, [ animation ] );
			return false;
		},
		animation = deferred.promise( {
			elem: elem,
			props: jQuery.extend( {}, properties ),
			opts: jQuery.extend( true, {
				specialEasing: {},
				easing: jQuery.easing._default
			}, options ),
			originalProperties: properties,
			originalOptions: options,
			startTime: fxNow || createFxNow(),
			duration: options.duration,
			tweens: [],
			createTween: function( prop, end ) {
				var tween = jQuery.Tween( elem, animation.opts, prop, end,
						animation.opts.specialEasing[ prop ] || animation.opts.easing );
				animation.tweens.push( tween );
				return tween;
			},
			stop: function( gotoEnd ) {
				var index = 0,

					// If we are going to the end, we want to run all the tweens
					// otherwise we skip this part
					length = gotoEnd ? animation.tweens.length : 0;
				if ( stopped ) {
					return this;
				}
				stopped = true;
				for ( ; index < length; index++ ) {
					animation.tweens[ index ].run( 1 );
				}

				// Resolve when we played the last frame; otherwise, reject
				if ( gotoEnd ) {
					deferred.notifyWith( elem, [ animation, 1, 0 ] );
					deferred.resolveWith( elem, [ animation, gotoEnd ] );
				} else {
					deferred.rejectWith( elem, [ animation, gotoEnd ] );
				}
				return this;
			}
		} ),
		props = animation.props;

	propFilter( props, animation.opts.specialEasing );

	for ( ; index < length; index++ ) {
		result = Animation.prefilters[ index ].call( animation, elem, props, animation.opts );
		if ( result ) {
			if ( isFunction( result.stop ) ) {
				jQuery._queueHooks( animation.elem, animation.opts.queue ).stop =
					result.stop.bind( result );
			}
			return result;
		}
	}

	jQuery.map( props, createTween, animation );

	if ( isFunction( animation.opts.start ) ) {
		animation.opts.start.call( elem, animation );
	}

	// Attach callbacks from options
	animation
		.progress( animation.opts.progress )
		.done( animation.opts.done, animation.opts.complete )
		.fail( animation.opts.fail )
		.always( animation.opts.always );

	jQuery.fx.timer(
		jQuery.extend( tick, {
			elem: elem,
			anim: animation,
			queue: animation.opts.queue
		} )
	);

	return animation;
}

jQuery.Animation = jQuery.extend( Animation, {

	tweeners: {
		"*": [ function( prop, value ) {
			var tween = this.createTween( prop, value );
			adjustCSS( tween.elem, prop, rcssNum.exec( value ), tween );
			return tween;
		} ]
	},

	tweener: function( props, callback ) {
		if ( isFunction( props ) ) {
			callback = props;
			props = [ "*" ];
		} else {
			props = props.match( rnothtmlwhite );
		}

		var prop,
			index = 0,
			length = props.length;

		for ( ; index < length; index++ ) {
			prop = props[ index ];
			Animation.tweeners[ prop ] = Animation.tweeners[ prop ] || [];
			Animation.tweeners[ prop ].unshift( callback );
		}
	},

	prefilters: [ defaultPrefilter ],

	prefilter: function( callback, prepend ) {
		if ( prepend ) {
			Animation.prefilters.unshift( callback );
		} else {
			Animation.prefilters.push( callback );
		}
	}
} );

jQuery.speed = function( speed, easing, fn ) {
	var opt = speed && typeof speed === "object" ? jQuery.extend( {}, speed ) : {
		complete: fn || !fn && easing ||
			isFunction( speed ) && speed,
		duration: speed,
		easing: fn && easing || easing && !isFunction( easing ) && easing
	};

	// Go to the end state if fx are off
	if ( jQuery.fx.off ) {
		opt.duration = 0;

	} else {
		if ( typeof opt.duration !== "number" ) {
			if ( opt.duration in jQuery.fx.speeds ) {
				opt.duration = jQuery.fx.speeds[ opt.duration ];

			} else {
				opt.duration = jQuery.fx.speeds._default;
			}
		}
	}

	// Normalize opt.queue - true/undefined/null -> "fx"
	if ( opt.queue == null || opt.queue === true ) {
		opt.queue = "fx";
	}

	// Queueing
	opt.old = opt.complete;

	opt.complete = function() {
		if ( isFunction( opt.old ) ) {
			opt.old.call( this );
		}

		if ( opt.queue ) {
			jQuery.dequeue( this, opt.queue );
		}
	};

	return opt;
};

jQuery.fn.extend( {
	fadeTo: function( speed, to, easing, callback ) {

		// Show any hidden elements after setting opacity to 0
		return this.filter( isHiddenWithinTree ).css( "opacity", 0 ).show()

			// Animate to the value specified
			.end().animate( { opacity: to }, speed, easing, callback );
	},
	animate: function( prop, speed, easing, callback ) {
		var empty = jQuery.isEmptyObject( prop ),
			optall = jQuery.speed( speed, easing, callback ),
			doAnimation = function() {

				// Operate on a copy of prop so per-property easing won't be lost
				var anim = Animation( this, jQuery.extend( {}, prop ), optall );

				// Empty animations, or finishing resolves immediately
				if ( empty || dataPriv.get( this, "finish" ) ) {
					anim.stop( true );
				}
			};
			doAnimation.finish = doAnimation;

		return empty || optall.queue === false ?
			this.each( doAnimation ) :
			this.queue( optall.queue, doAnimation );
	},
	stop: function( type, clearQueue, gotoEnd ) {
		var stopQueue = function( hooks ) {
			var stop = hooks.stop;
			delete hooks.stop;
			stop( gotoEnd );
		};

		if ( typeof type !== "string" ) {
			gotoEnd = clearQueue;
			clearQueue = type;
			type = undefined;
		}
		if ( clearQueue && type !== false ) {
			this.queue( type || "fx", [] );
		}

		return this.each( function() {
			var dequeue = true,
				index = type != null && type + "queueHooks",
				timers = jQuery.timers,
				data = dataPriv.get( this );

			if ( index ) {
				if ( data[ index ] && data[ index ].stop ) {
					stopQueue( data[ index ] );
				}
			} else {
				for ( index in data ) {
					if ( data[ index ] && data[ index ].stop && rrun.test( index ) ) {
						stopQueue( data[ index ] );
					}
				}
			}

			for ( index = timers.length; index--; ) {
				if ( timers[ index ].elem === this &&
					( type == null || timers[ index ].queue === type ) ) {

					timers[ index ].anim.stop( gotoEnd );
					dequeue = false;
					timers.splice( index, 1 );
				}
			}

			// Start the next in the queue if the last step wasn't forced.
			// Timers currently will call their complete callbacks, which
			// will dequeue but only if they were gotoEnd.
			if ( dequeue || !gotoEnd ) {
				jQuery.dequeue( this, type );
			}
		} );
	},
	finish: function( type ) {
		if ( type !== false ) {
			type = type || "fx";
		}
		return this.each( function() {
			var index,
				data = dataPriv.get( this ),
				queue = data[ type + "queue" ],
				hooks = data[ type + "queueHooks" ],
				timers = jQuery.timers,
				length = queue ? queue.length : 0;

			// Enable finishing flag on private data
			data.finish = true;

			// Empty the queue first
			jQuery.queue( this, type, [] );

			if ( hooks && hooks.stop ) {
				hooks.stop.call( this, true );
			}

			// Look for any active animations, and finish them
			for ( index = timers.length; index--; ) {
				if ( timers[ index ].elem === this && timers[ index ].queue === type ) {
					timers[ index ].anim.stop( true );
					timers.splice( index, 1 );
				}
			}

			// Look for any animations in the old queue and finish them
			for ( index = 0; index < length; index++ ) {
				if ( queue[ index ] && queue[ index ].finish ) {
					queue[ index ].finish.call( this );
				}
			}

			// Turn off finishing flag
			delete data.finish;
		} );
	}
} );

jQuery.each( [ "toggle", "show", "hide" ], function( i, name ) {
	var cssFn = jQuery.fn[ name ];
	jQuery.fn[ name ] = function( speed, easing, callback ) {
		return speed == null || typeof speed === "boolean" ?
			cssFn.apply( this, arguments ) :
			this.animate( genFx( name, true ), speed, easing, callback );
	};
} );

// Generate shortcuts for custom animations
jQuery.each( {
	slideDown: genFx( "show" ),
	slideUp: genFx( "hide" ),
	slideToggle: genFx( "toggle" ),
	fadeIn: { opacity: "show" },
	fadeOut: { opacity: "hide" },
	fadeToggle: { opacity: "toggle" }
}, function( name, props ) {
	jQuery.fn[ name ] = function( speed, easing, callback ) {
		return this.animate( props, speed, easing, callback );
	};
} );

jQuery.timers = [];
jQuery.fx.tick = function() {
	var timer,
		i = 0,
		timers = jQuery.timers;

	fxNow = Date.now();

	for ( ; i < timers.length; i++ ) {
		timer = timers[ i ];

		// Run the timer and safely remove it when done (allowing for external removal)
		if ( !timer() && timers[ i ] === timer ) {
			timers.splice( i--, 1 );
		}
	}

	if ( !timers.length ) {
		jQuery.fx.stop();
	}
	fxNow = undefined;
};

jQuery.fx.timer = function( timer ) {
	jQuery.timers.push( timer );
	jQuery.fx.start();
};

jQuery.fx.interval = 13;
jQuery.fx.start = function() {
	if ( inProgress ) {
		return;
	}

	inProgress = true;
	schedule();
};

jQuery.fx.stop = function() {
	inProgress = null;
};

jQuery.fx.speeds = {
	slow: 600,
	fast: 200,

	// Default speed
	_default: 400
};


// Based off of the plugin by Clint Helfers, with permission.
// https://web.archive.org/web/20100324014747/http://blindsignals.com/index.php/2009/07/jquery-delay/
jQuery.fn.delay = function( time, type ) {
	time = jQuery.fx ? jQuery.fx.speeds[ time ] || time : time;
	type = type || "fx";

	return this.queue( type, function( next, hooks ) {
		var timeout = window.setTimeout( next, time );
		hooks.stop = function() {
			window.clearTimeout( timeout );
		};
	} );
};


( function() {
	var input = document.createElement( "input" ),
		select = document.createElement( "select" ),
		opt = select.appendChild( document.createElement( "option" ) );

	input.type = "checkbox";

	// Support: Android <=4.3 only
	// Default value for a checkbox should be "on"
	support.checkOn = input.value !== "";

	// Support: IE <=11 only
	// Must access selectedIndex to make default options select
	support.optSelected = opt.selected;

	// Support: IE <=11 only
	// An input loses its value after becoming a radio
	input = document.createElement( "input" );
	input.value = "t";
	input.type = "radio";
	support.radioValue = input.value === "t";
} )();


var boolHook,
	attrHandle = jQuery.expr.attrHandle;

jQuery.fn.extend( {
	attr: function( name, value ) {
		return access( this, jQuery.attr, name, value, arguments.length > 1 );
	},

	removeAttr: function( name ) {
		return this.each( function() {
			jQuery.removeAttr( this, name );
		} );
	}
} );

jQuery.extend( {
	attr: function( elem, name, value ) {
		var ret, hooks,
			nType = elem.nodeType;

		// Don't get/set attributes on text, comment and attribute nodes
		if ( nType === 3 || nType === 8 || nType === 2 ) {
			return;
		}

		// Fallback to prop when attributes are not supported
		if ( typeof elem.getAttribute === "undefined" ) {
			return jQuery.prop( elem, name, value );
		}

		// Attribute hooks are determined by the lowercase version
		// Grab necessary hook if one is defined
		if ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {
			hooks = jQuery.attrHooks[ name.toLowerCase() ] ||
				( jQuery.expr.match.bool.test( name ) ? boolHook : undefined );
		}

		if ( value !== undefined ) {
			if ( value === null ) {
				jQuery.removeAttr( elem, name );
				return;
			}

			if ( hooks && "set" in hooks &&
				( ret = hooks.set( elem, value, name ) ) !== undefined ) {
				return ret;
			}

			elem.setAttribute( name, value + "" );
			return value;
		}

		if ( hooks && "get" in hooks && ( ret = hooks.get( elem, name ) ) !== null ) {
			return ret;
		}

		ret = jQuery.find.attr( elem, name );

		// Non-existent attributes return null, we normalize to undefined
		return ret == null ? undefined : ret;
	},

	attrHooks: {
		type: {
			set: function( elem, value ) {
				if ( !support.radioValue && value === "radio" &&
					nodeName( elem, "input" ) ) {
					var val = elem.value;
					elem.setAttribute( "type", value );
					if ( val ) {
						elem.value = val;
					}
					return value;
				}
			}
		}
	},

	removeAttr: function( elem, value ) {
		var name,
			i = 0,

			// Attribute names can contain non-HTML whitespace characters
			// https://html.spec.whatwg.org/multipage/syntax.html#attributes-2
			attrNames = value && value.match( rnothtmlwhite );

		if ( attrNames && elem.nodeType === 1 ) {
			while ( ( name = attrNames[ i++ ] ) ) {
				elem.removeAttribute( name );
			}
		}
	}
} );

// Hooks for boolean attributes
boolHook = {
	set: function( elem, value, name ) {
		if ( value === false ) {

			// Remove boolean attributes when set to false
			jQuery.removeAttr( elem, name );
		} else {
			elem.setAttribute( name, name );
		}
		return name;
	}
};

jQuery.each( jQuery.expr.match.bool.source.match( /\w+/g ), function( i, name ) {
	var getter = attrHandle[ name ] || jQuery.find.attr;

	attrHandle[ name ] = function( elem, name, isXML ) {
		var ret, handle,
			lowercaseName = name.toLowerCase();

		if ( !isXML ) {

			// Avoid an infinite loop by temporarily removing this function from the getter
			handle = attrHandle[ lowercaseName ];
			attrHandle[ lowercaseName ] = ret;
			ret = getter( elem, name, isXML ) != null ?
				lowercaseName :
				null;
			attrHandle[ lowercaseName ] = handle;
		}
		return ret;
	};
} );




var rfocusable = /^(?:input|select|textarea|button)$/i,
	rclickable = /^(?:a|area)$/i;

jQuery.fn.extend( {
	prop: function( name, value ) {
		return access( this, jQuery.prop, name, value, arguments.length > 1 );
	},

	removeProp: function( name ) {
		return this.each( function() {
			delete this[ jQuery.propFix[ name ] || name ];
		} );
	}
} );

jQuery.extend( {
	prop: function( elem, name, value ) {
		var ret, hooks,
			nType = elem.nodeType;

		// Don't get/set properties on text, comment and attribute nodes
		if ( nType === 3 || nType === 8 || nType === 2 ) {
			return;
		}

		if ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {

			// Fix name and attach hooks
			name = jQuery.propFix[ name ] || name;
			hooks = jQuery.propHooks[ name ];
		}

		if ( value !== undefined ) {
			if ( hooks && "set" in hooks &&
				( ret = hooks.set( elem, value, name ) ) !== undefined ) {
				return ret;
			}

			return ( elem[ name ] = value );
		}

		if ( hooks && "get" in hooks && ( ret = hooks.get( elem, name ) ) !== null ) {
			return ret;
		}

		return elem[ name ];
	},

	propHooks: {
		tabIndex: {
			get: function( elem ) {

				// Support: IE <=9 - 11 only
				// elem.tabIndex doesn't always return the
				// correct value when it hasn't been explicitly set
				// https://web.archive.org/web/20141116233347/http://fluidproject.org/blog/2008/01/09/getting-setting-and-removing-tabindex-values-with-javascript/
				// Use proper attribute retrieval(#12072)
				var tabindex = jQuery.find.attr( elem, "tabindex" );

				if ( tabindex ) {
					return parseInt( tabindex, 10 );
				}

				if (
					rfocusable.test( elem.nodeName ) ||
					rclickable.test( elem.nodeName ) &&
					elem.href
				) {
					return 0;
				}

				return -1;
			}
		}
	},

	propFix: {
		"for": "htmlFor",
		"class": "className"
	}
} );

// Support: IE <=11 only
// Accessing the selectedIndex property
// forces the browser to respect setting selected
// on the option
// The getter ensures a default option is selected
// when in an optgroup
// eslint rule "no-unused-expressions" is disabled for this code
// since it considers such accessions noop
if ( !support.optSelected ) {
	jQuery.propHooks.selected = {
		get: function( elem ) {

			/* eslint no-unused-expressions: "off" */

			var parent = elem.parentNode;
			if ( parent && parent.parentNode ) {
				parent.parentNode.selectedIndex;
			}
			return null;
		},
		set: function( elem ) {

			/* eslint no-unused-expressions: "off" */

			var parent = elem.parentNode;
			if ( parent ) {
				parent.selectedIndex;

				if ( parent.parentNode ) {
					parent.parentNode.selectedIndex;
				}
			}
		}
	};
}

jQuery.each( [
	"tabIndex",
	"readOnly",
	"maxLength",
	"cellSpacing",
	"cellPadding",
	"rowSpan",
	"colSpan",
	"useMap",
	"frameBorder",
	"contentEditable"
], function() {
	jQuery.propFix[ this.toLowerCase() ] = this;
} );




	// Strip and collapse whitespace according to HTML spec
	// https://infra.spec.whatwg.org/#strip-and-collapse-ascii-whitespace
	function stripAndCollapse( value ) {
		var tokens = value.match( rnothtmlwhite ) || [];
		return tokens.join( " " );
	}


function getClass( elem ) {
	return elem.getAttribute && elem.getAttribute( "class" ) || "";
}

function classesToArray( value ) {
	if ( Array.isArray( value ) ) {
		return value;
	}
	if ( typeof value === "string" ) {
		return value.match( rnothtmlwhite ) || [];
	}
	return [];
}

jQuery.fn.extend( {
	addClass: function( value ) {
		var classes, elem, cur, curValue, clazz, j, finalValue,
			i = 0;

		if ( isFunction( value ) ) {
			return this.each( function( j ) {
				jQuery( this ).addClass( value.call( this, j, getClass( this ) ) );
			} );
		}

		classes = classesToArray( value );

		if ( classes.length ) {
			while ( ( elem = this[ i++ ] ) ) {
				curValue = getClass( elem );
				cur = elem.nodeType === 1 && ( " " + stripAndCollapse( curValue ) + " " );

				if ( cur ) {
					j = 0;
					while ( ( clazz = classes[ j++ ] ) ) {
						if ( cur.indexOf( " " + clazz + " " ) < 0 ) {
							cur += clazz + " ";
						}
					}

					// Only assign if different to avoid unneeded rendering.
					finalValue = stripAndCollapse( cur );
					if ( curValue !== finalValue ) {
						elem.setAttribute( "class", finalValue );
					}
				}
			}
		}

		return this;
	},

	removeClass: function( value ) {
		var classes, elem, cur, curValue, clazz, j, finalValue,
			i = 0;

		if ( isFunction( value ) ) {
			return this.each( function( j ) {
				jQuery( this ).removeClass( value.call( this, j, getClass( this ) ) );
			} );
		}

		if ( !arguments.length ) {
			return this.attr( "class", "" );
		}

		classes = classesToArray( value );

		if ( classes.length ) {
			while ( ( elem = this[ i++ ] ) ) {
				curValue = getClass( elem );

				// This expression is here for better compressibility (see addClass)
				cur = elem.nodeType === 1 && ( " " + stripAndCollapse( curValue ) + " " );

				if ( cur ) {
					j = 0;
					while ( ( clazz = classes[ j++ ] ) ) {

						// Remove *all* instances
						while ( cur.indexOf( " " + clazz + " " ) > -1 ) {
							cur = cur.replace( " " + clazz + " ", " " );
						}
					}

					// Only assign if different to avoid unneeded rendering.
					finalValue = stripAndCollapse( cur );
					if ( curValue !== finalValue ) {
						elem.setAttribute( "class", finalValue );
					}
				}
			}
		}

		return this;
	},

	toggleClass: function( value, stateVal ) {
		var type = typeof value,
			isValidValue = type === "string" || Array.isArray( value );

		if ( typeof stateVal === "boolean" && isValidValue ) {
			return stateVal ? this.addClass( value ) : this.removeClass( value );
		}

		if ( isFunction( value ) ) {
			return this.each( function( i ) {
				jQuery( this ).toggleClass(
					value.call( this, i, getClass( this ), stateVal ),
					stateVal
				);
			} );
		}

		return this.each( function() {
			var className, i, self, classNames;

			if ( isValidValue ) {

				// Toggle individual class names
				i = 0;
				self = jQuery( this );
				classNames = classesToArray( value );

				while ( ( className = classNames[ i++ ] ) ) {

					// Check each className given, space separated list
					if ( self.hasClass( className ) ) {
						self.removeClass( className );
					} else {
						self.addClass( className );
					}
				}

			// Toggle whole class name
			} else if ( value === undefined || type === "boolean" ) {
				className = getClass( this );
				if ( className ) {

					// Store className if set
					dataPriv.set( this, "__className__", className );
				}

				// If the element has a class name or if we're passed `false`,
				// then remove the whole classname (if there was one, the above saved it).
				// Otherwise bring back whatever was previously saved (if anything),
				// falling back to the empty string if nothing was stored.
				if ( this.setAttribute ) {
					this.setAttribute( "class",
						className || value === false ?
						"" :
						dataPriv.get( this, "__className__" ) || ""
					);
				}
			}
		} );
	},

	hasClass: function( selector ) {
		var className, elem,
			i = 0;

		className = " " + selector + " ";
		while ( ( elem = this[ i++ ] ) ) {
			if ( elem.nodeType === 1 &&
				( " " + stripAndCollapse( getClass( elem ) ) + " " ).indexOf( className ) > -1 ) {
					return true;
			}
		}

		return false;
	}
} );




var rreturn = /\r/g;

jQuery.fn.extend( {
	val: function( value ) {
		var hooks, ret, valueIsFunction,
			elem = this[ 0 ];

		if ( !arguments.length ) {
			if ( elem ) {
				hooks = jQuery.valHooks[ elem.type ] ||
					jQuery.valHooks[ elem.nodeName.toLowerCase() ];

				if ( hooks &&
					"get" in hooks &&
					( ret = hooks.get( elem, "value" ) ) !== undefined
				) {
					return ret;
				}

				ret = elem.value;

				// Handle most common string cases
				if ( typeof ret === "string" ) {
					return ret.replace( rreturn, "" );
				}

				// Handle cases where value is null/undef or number
				return ret == null ? "" : ret;
			}

			return;
		}

		valueIsFunction = isFunction( value );

		return this.each( function( i ) {
			var val;

			if ( this.nodeType !== 1 ) {
				return;
			}

			if ( valueIsFunction ) {
				val = value.call( this, i, jQuery( this ).val() );
			} else {
				val = value;
			}

			// Treat null/undefined as ""; convert numbers to string
			if ( val == null ) {
				val = "";

			} else if ( typeof val === "number" ) {
				val += "";

			} else if ( Array.isArray( val ) ) {
				val = jQuery.map( val, function( value ) {
					return value == null ? "" : value + "";
				} );
			}

			hooks = jQuery.valHooks[ this.type ] || jQuery.valHooks[ this.nodeName.toLowerCase() ];

			// If set returns undefined, fall back to normal setting
			if ( !hooks || !( "set" in hooks ) || hooks.set( this, val, "value" ) === undefined ) {
				this.value = val;
			}
		} );
	}
} );

jQuery.extend( {
	valHooks: {
		option: {
			get: function( elem ) {

				var val = jQuery.find.attr( elem, "value" );
				return val != null ?
					val :

					// Support: IE <=10 - 11 only
					// option.text throws exceptions (#14686, #14858)
					// Strip and collapse whitespace
					// https://html.spec.whatwg.org/#strip-and-collapse-whitespace
					stripAndCollapse( jQuery.text( elem ) );
			}
		},
		select: {
			get: function( elem ) {
				var value, option, i,
					options = elem.options,
					index = elem.selectedIndex,
					one = elem.type === "select-one",
					values = one ? null : [],
					max = one ? index + 1 : options.length;

				if ( index < 0 ) {
					i = max;

				} else {
					i = one ? index : 0;
				}

				// Loop through all the selected options
				for ( ; i < max; i++ ) {
					option = options[ i ];

					// Support: IE <=9 only
					// IE8-9 doesn't update selected after form reset (#2551)
					if ( ( option.selected || i === index ) &&

							// Don't return options that are disabled or in a disabled optgroup
							!option.disabled &&
							( !option.parentNode.disabled ||
								!nodeName( option.parentNode, "optgroup" ) ) ) {

						// Get the specific value for the option
						value = jQuery( option ).val();

						// We don't need an array for one selects
						if ( one ) {
							return value;
						}

						// Multi-Selects return an array
						values.push( value );
					}
				}

				return values;
			},

			set: function( elem, value ) {
				var optionSet, option,
					options = elem.options,
					values = jQuery.makeArray( value ),
					i = options.length;

				while ( i-- ) {
					option = options[ i ];

					/* eslint-disable no-cond-assign */

					if ( option.selected =
						jQuery.inArray( jQuery.valHooks.option.get( option ), values ) > -1
					) {
						optionSet = true;
					}

					/* eslint-enable no-cond-assign */
				}

				// Force browsers to behave consistently when non-matching value is set
				if ( !optionSet ) {
					elem.selectedIndex = -1;
				}
				return values;
			}
		}
	}
} );

// Radios and checkboxes getter/setter
jQuery.each( [ "radio", "checkbox" ], function() {
	jQuery.valHooks[ this ] = {
		set: function( elem, value ) {
			if ( Array.isArray( value ) ) {
				return ( elem.checked = jQuery.inArray( jQuery( elem ).val(), value ) > -1 );
			}
		}
	};
	if ( !support.checkOn ) {
		jQuery.valHooks[ this ].get = function( elem ) {
			return elem.getAttribute( "value" ) === null ? "on" : elem.value;
		};
	}
} );




// Return jQuery for attributes-only inclusion


support.focusin = "onfocusin" in window;


var rfocusMorph = /^(?:focusinfocus|focusoutblur)$/,
	stopPropagationCallback = function( e ) {
		e.stopPropagation();
	};

jQuery.extend( jQuery.event, {

	trigger: function( event, data, elem, onlyHandlers ) {

		var i, cur, tmp, bubbleType, ontype, handle, special, lastElement,
			eventPath = [ elem || document ],
			type = hasOwn.call( event, "type" ) ? event.type : event,
			namespaces = hasOwn.call( event, "namespace" ) ? event.namespace.split( "." ) : [];

		cur = lastElement = tmp = elem = elem || document;

		// Don't do events on text and comment nodes
		if ( elem.nodeType === 3 || elem.nodeType === 8 ) {
			return;
		}

		// focus/blur morphs to focusin/out; ensure we're not firing them right now
		if ( rfocusMorph.test( type + jQuery.event.triggered ) ) {
			return;
		}

		if ( type.indexOf( "." ) > -1 ) {

			// Namespaced trigger; create a regexp to match event type in handle()
			namespaces = type.split( "." );
			type = namespaces.shift();
			namespaces.sort();
		}
		ontype = type.indexOf( ":" ) < 0 && "on" + type;

		// Caller can pass in a jQuery.Event object, Object, or just an event type string
		event = event[ jQuery.expando ] ?
			event :
			new jQuery.Event( type, typeof event === "object" && event );

		// Trigger bitmask: & 1 for native handlers; & 2 for jQuery (always true)
		event.isTrigger = onlyHandlers ? 2 : 3;
		event.namespace = namespaces.join( "." );
		event.rnamespace = event.namespace ?
			new RegExp( "(^|\\.)" + namespaces.join( "\\.(?:.*\\.|)" ) + "(\\.|$)" ) :
			null;

		// Clean up the event in case it is being reused
		event.result = undefined;
		if ( !event.target ) {
			event.target = elem;
		}

		// Clone any incoming data and prepend the event, creating the handler arg list
		data = data == null ?
			[ event ] :
			jQuery.makeArray( data, [ event ] );

		// Allow special events to draw outside the lines
		special = jQuery.event.special[ type ] || {};
		if ( !onlyHandlers && special.trigger && special.trigger.apply( elem, data ) === false ) {
			return;
		}

		// Determine event propagation path in advance, per W3C events spec (#9951)
		// Bubble up to document, then to window; watch for a global ownerDocument var (#9724)
		if ( !onlyHandlers && !special.noBubble && !isWindow( elem ) ) {

			bubbleType = special.delegateType || type;
			if ( !rfocusMorph.test( bubbleType + type ) ) {
				cur = cur.parentNode;
			}
			for ( ; cur; cur = cur.parentNode ) {
				eventPath.push( cur );
				tmp = cur;
			}

			// Only add window if we got to document (e.g., not plain obj or detached DOM)
			if ( tmp === ( elem.ownerDocument || document ) ) {
				eventPath.push( tmp.defaultView || tmp.parentWindow || window );
			}
		}

		// Fire handlers on the event path
		i = 0;
		while ( ( cur = eventPath[ i++ ] ) && !event.isPropagationStopped() ) {
			lastElement = cur;
			event.type = i > 1 ?
				bubbleType :
				special.bindType || type;

			// jQuery handler
			handle = ( dataPriv.get( cur, "events" ) || {} )[ event.type ] &&
				dataPriv.get( cur, "handle" );
			if ( handle ) {
				handle.apply( cur, data );
			}

			// Native handler
			handle = ontype && cur[ ontype ];
			if ( handle && handle.apply && acceptData( cur ) ) {
				event.result = handle.apply( cur, data );
				if ( event.result === false ) {
					event.preventDefault();
				}
			}
		}
		event.type = type;

		// If nobody prevented the default action, do it now
		if ( !onlyHandlers && !event.isDefaultPrevented() ) {

			if ( ( !special._default ||
				special._default.apply( eventPath.pop(), data ) === false ) &&
				acceptData( elem ) ) {

				// Call a native DOM method on the target with the same name as the event.
				// Don't do default actions on window, that's where global variables be (#6170)
				if ( ontype && isFunction( elem[ type ] ) && !isWindow( elem ) ) {

					// Don't re-trigger an onFOO event when we call its FOO() method
					tmp = elem[ ontype ];

					if ( tmp ) {
						elem[ ontype ] = null;
					}

					// Prevent re-triggering of the same event, since we already bubbled it above
					jQuery.event.triggered = type;

					if ( event.isPropagationStopped() ) {
						lastElement.addEventListener( type, stopPropagationCallback );
					}

					elem[ type ]();

					if ( event.isPropagationStopped() ) {
						lastElement.removeEventListener( type, stopPropagationCallback );
					}

					jQuery.event.triggered = undefined;

					if ( tmp ) {
						elem[ ontype ] = tmp;
					}
				}
			}
		}

		return event.result;
	},

	// Piggyback on a donor event to simulate a different one
	// Used only for `focus(in | out)` events
	simulate: function( type, elem, event ) {
		var e = jQuery.extend(
			new jQuery.Event(),
			event,
			{
				type: type,
				isSimulated: true
			}
		);

		jQuery.event.trigger( e, null, elem );
	}

} );

jQuery.fn.extend( {

	trigger: function( type, data ) {
		return this.each( function() {
			jQuery.event.trigger( type, data, this );
		} );
	},
	triggerHandler: function( type, data ) {
		var elem = this[ 0 ];
		if ( elem ) {
			return jQuery.event.trigger( type, data, elem, true );
		}
	}
} );


// Support: Firefox <=44
// Firefox doesn't have focus(in | out) events
// Related ticket - https://bugzilla.mozilla.org/show_bug.cgi?id=687787
//
// Support: Chrome <=48 - 49, Safari <=9.0 - 9.1
// focus(in | out) events fire after focus & blur events,
// which is spec violation - http://www.w3.org/TR/DOM-Level-3-Events/#events-focusevent-event-order
// Related ticket - https://bugs.chromium.org/p/chromium/issues/detail?id=449857
if ( !support.focusin ) {
	jQuery.each( { focus: "focusin", blur: "focusout" }, function( orig, fix ) {

		// Attach a single capturing handler on the document while someone wants focusin/focusout
		var handler = function( event ) {
			jQuery.event.simulate( fix, event.target, jQuery.event.fix( event ) );
		};

		jQuery.event.special[ fix ] = {
			setup: function() {
				var doc = this.ownerDocument || this,
					attaches = dataPriv.access( doc, fix );

				if ( !attaches ) {
					doc.addEventListener( orig, handler, true );
				}
				dataPriv.access( doc, fix, ( attaches || 0 ) + 1 );
			},
			teardown: function() {
				var doc = this.ownerDocument || this,
					attaches = dataPriv.access( doc, fix ) - 1;

				if ( !attaches ) {
					doc.removeEventListener( orig, handler, true );
					dataPriv.remove( doc, fix );

				} else {
					dataPriv.access( doc, fix, attaches );
				}
			}
		};
	} );
}
var location = window.location;

var nonce = Date.now();

var rquery = ( /\?/ );



// Cross-browser xml parsing
jQuery.parseXML = function( data ) {
	var xml;
	if ( !data || typeof data !== "string" ) {
		return null;
	}

	// Support: IE 9 - 11 only
	// IE throws on parseFromString with invalid input.
	try {
		xml = ( new window.DOMParser() ).parseFromString( data, "text/xml" );
	} catch ( e ) {
		xml = undefined;
	}

	if ( !xml || xml.getElementsByTagName( "parsererror" ).length ) {
		jQuery.error( "Invalid XML: " + data );
	}
	return xml;
};


var
	rbracket = /\[\]$/,
	rCRLF = /\r?\n/g,
	rsubmitterTypes = /^(?:submit|button|image|reset|file)$/i,
	rsubmittable = /^(?:input|select|textarea|keygen)/i;

function buildParams( prefix, obj, traditional, add ) {
	var name;

	if ( Array.isArray( obj ) ) {

		// Serialize array item.
		jQuery.each( obj, function( i, v ) {
			if ( traditional || rbracket.test( prefix ) ) {

				// Treat each array item as a scalar.
				add( prefix, v );

			} else {

				// Item is non-scalar (array or object), encode its numeric index.
				buildParams(
					prefix + "[" + ( typeof v === "object" && v != null ? i : "" ) + "]",
					v,
					traditional,
					add
				);
			}
		} );

	} else if ( !traditional && toType( obj ) === "object" ) {

		// Serialize object item.
		for ( name in obj ) {
			buildParams( prefix + "[" + name + "]", obj[ name ], traditional, add );
		}

	} else {

		// Serialize scalar item.
		add( prefix, obj );
	}
}

// Serialize an array of form elements or a set of
// key/values into a query string
jQuery.param = function( a, traditional ) {
	var prefix,
		s = [],
		add = function( key, valueOrFunction ) {

			// If value is a function, invoke it and use its return value
			var value = isFunction( valueOrFunction ) ?
				valueOrFunction() :
				valueOrFunction;

			s[ s.length ] = encodeURIComponent( key ) + "=" +
				encodeURIComponent( value == null ? "" : value );
		};

	// If an array was passed in, assume that it is an array of form elements.
	if ( Array.isArray( a ) || ( a.jquery && !jQuery.isPlainObject( a ) ) ) {

		// Serialize the form elements
		jQuery.each( a, function() {
			add( this.name, this.value );
		} );

	} else {

		// If traditional, encode the "old" way (the way 1.3.2 or older
		// did it), otherwise encode params recursively.
		for ( prefix in a ) {
			buildParams( prefix, a[ prefix ], traditional, add );
		}
	}

	// Return the resulting serialization
	return s.join( "&" );
};

jQuery.fn.extend( {
	serialize: function() {
		return jQuery.param( this.serializeArray() );
	},
	serializeArray: function() {
		return this.map( function() {

			// Can add propHook for "elements" to filter or add form elements
			var elements = jQuery.prop( this, "elements" );
			return elements ? jQuery.makeArray( elements ) : this;
		} )
		.filter( function() {
			var type = this.type;

			// Use .is( ":disabled" ) so that fieldset[disabled] works
			return this.name && !jQuery( this ).is( ":disabled" ) &&
				rsubmittable.test( this.nodeName ) && !rsubmitterTypes.test( type ) &&
				( this.checked || !rcheckableType.test( type ) );
		} )
		.map( function( i, elem ) {
			var val = jQuery( this ).val();

			if ( val == null ) {
				return null;
			}

			if ( Array.isArray( val ) ) {
				return jQuery.map( val, function( val ) {
					return { name: elem.name, value: val.replace( rCRLF, "\r\n" ) };
				} );
			}

			return { name: elem.name, value: val.replace( rCRLF, "\r\n" ) };
		} ).get();
	}
} );


var
	r20 = /%20/g,
	rhash = /#.*$/,
	rantiCache = /([?&])_=[^&]*/,
	rheaders = /^(.*?):[ \t]*([^\r\n]*)$/mg,

	// #7653, #8125, #8152: local protocol detection
	rlocalProtocol = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/,
	rnoContent = /^(?:GET|HEAD)$/,
	rprotocol = /^\/\//,

	/* Prefilters
	 * 1) They are useful to introduce custom dataTypes (see ajax/jsonp.js for an example)
	 * 2) These are called:
	 *    - BEFORE asking for a transport
	 *    - AFTER param serialization (s.data is a string if s.processData is true)
	 * 3) key is the dataType
	 * 4) the catchall symbol "*" can be used
	 * 5) execution will start with transport dataType and THEN continue down to "*" if needed
	 */
	prefilters = {},

	/* Transports bindings
	 * 1) key is the dataType
	 * 2) the catchall symbol "*" can be used
	 * 3) selection will start with transport dataType and THEN go to "*" if needed
	 */
	transports = {},

	// Avoid comment-prolog char sequence (#10098); must appease lint and evade compression
	allTypes = "*/".concat( "*" ),

	// Anchor tag for parsing the document origin
	originAnchor = document.createElement( "a" );
	originAnchor.href = location.href;

// Base "constructor" for jQuery.ajaxPrefilter and jQuery.ajaxTransport
function addToPrefiltersOrTransports( structure ) {

	// dataTypeExpression is optional and defaults to "*"
	return function( dataTypeExpression, func ) {

		if ( typeof dataTypeExpression !== "string" ) {
			func = dataTypeExpression;
			dataTypeExpression = "*";
		}

		var dataType,
			i = 0,
			dataTypes = dataTypeExpression.toLowerCase().match( rnothtmlwhite ) || [];

		if ( isFunction( func ) ) {

			// For each dataType in the dataTypeExpression
			while ( ( dataType = dataTypes[ i++ ] ) ) {

				// Prepend if requested
				if ( dataType[ 0 ] === "+" ) {
					dataType = dataType.slice( 1 ) || "*";
					( structure[ dataType ] = structure[ dataType ] || [] ).unshift( func );

				// Otherwise append
				} else {
					( structure[ dataType ] = structure[ dataType ] || [] ).push( func );
				}
			}
		}
	};
}

// Base inspection function for prefilters and transports
function inspectPrefiltersOrTransports( structure, options, originalOptions, jqXHR ) {

	var inspected = {},
		seekingTransport = ( structure === transports );

	function inspect( dataType ) {
		var selected;
		inspected[ dataType ] = true;
		jQuery.each( structure[ dataType ] || [], function( _, prefilterOrFactory ) {
			var dataTypeOrTransport = prefilterOrFactory( options, originalOptions, jqXHR );
			if ( typeof dataTypeOrTransport === "string" &&
				!seekingTransport && !inspected[ dataTypeOrTransport ] ) {

				options.dataTypes.unshift( dataTypeOrTransport );
				inspect( dataTypeOrTransport );
				return false;
			} else if ( seekingTransport ) {
				return !( selected = dataTypeOrTransport );
			}
		} );
		return selected;
	}

	return inspect( options.dataTypes[ 0 ] ) || !inspected[ "*" ] && inspect( "*" );
}

// A special extend for ajax options
// that takes "flat" options (not to be deep extended)
// Fixes #9887
function ajaxExtend( target, src ) {
	var key, deep,
		flatOptions = jQuery.ajaxSettings.flatOptions || {};

	for ( key in src ) {
		if ( src[ key ] !== undefined ) {
			( flatOptions[ key ] ? target : ( deep || ( deep = {} ) ) )[ key ] = src[ key ];
		}
	}
	if ( deep ) {
		jQuery.extend( true, target, deep );
	}

	return target;
}

/* Handles responses to an ajax request:
 * - finds the right dataType (mediates between content-type and expected dataType)
 * - returns the corresponding response
 */
function ajaxHandleResponses( s, jqXHR, responses ) {

	var ct, type, finalDataType, firstDataType,
		contents = s.contents,
		dataTypes = s.dataTypes;

	// Remove auto dataType and get content-type in the process
	while ( dataTypes[ 0 ] === "*" ) {
		dataTypes.shift();
		if ( ct === undefined ) {
			ct = s.mimeType || jqXHR.getResponseHeader( "Content-Type" );
		}
	}

	// Check if we're dealing with a known content-type
	if ( ct ) {
		for ( type in contents ) {
			if ( contents[ type ] && contents[ type ].test( ct ) ) {
				dataTypes.unshift( type );
				break;
			}
		}
	}

	// Check to see if we have a response for the expected dataType
	if ( dataTypes[ 0 ] in responses ) {
		finalDataType = dataTypes[ 0 ];
	} else {

		// Try convertible dataTypes
		for ( type in responses ) {
			if ( !dataTypes[ 0 ] || s.converters[ type + " " + dataTypes[ 0 ] ] ) {
				finalDataType = type;
				break;
			}
			if ( !firstDataType ) {
				firstDataType = type;
			}
		}

		// Or just use first one
		finalDataType = finalDataType || firstDataType;
	}

	// If we found a dataType
	// We add the dataType to the list if needed
	// and return the corresponding response
	if ( finalDataType ) {
		if ( finalDataType !== dataTypes[ 0 ] ) {
			dataTypes.unshift( finalDataType );
		}
		return responses[ finalDataType ];
	}
}

/* Chain conversions given the request and the original response
 * Also sets the responseXXX fields on the jqXHR instance
 */
function ajaxConvert( s, response, jqXHR, isSuccess ) {
	var conv2, current, conv, tmp, prev,
		converters = {},

		// Work with a copy of dataTypes in case we need to modify it for conversion
		dataTypes = s.dataTypes.slice();

	// Create converters map with lowercased keys
	if ( dataTypes[ 1 ] ) {
		for ( conv in s.converters ) {
			converters[ conv.toLowerCase() ] = s.converters[ conv ];
		}
	}

	current = dataTypes.shift();

	// Convert to each sequential dataType
	while ( current ) {

		if ( s.responseFields[ current ] ) {
			jqXHR[ s.responseFields[ current ] ] = response;
		}

		// Apply the dataFilter if provided
		if ( !prev && isSuccess && s.dataFilter ) {
			response = s.dataFilter( response, s.dataType );
		}

		prev = current;
		current = dataTypes.shift();

		if ( current ) {

			// There's only work to do if current dataType is non-auto
			if ( current === "*" ) {

				current = prev;

			// Convert response if prev dataType is non-auto and differs from current
			} else if ( prev !== "*" && prev !== current ) {

				// Seek a direct converter
				conv = converters[ prev + " " + current ] || converters[ "* " + current ];

				// If none found, seek a pair
				if ( !conv ) {
					for ( conv2 in converters ) {

						// If conv2 outputs current
						tmp = conv2.split( " " );
						if ( tmp[ 1 ] === current ) {

							// If prev can be converted to accepted input
							conv = converters[ prev + " " + tmp[ 0 ] ] ||
								converters[ "* " + tmp[ 0 ] ];
							if ( conv ) {

								// Condense equivalence converters
								if ( conv === true ) {
									conv = converters[ conv2 ];

								// Otherwise, insert the intermediate dataType
								} else if ( converters[ conv2 ] !== true ) {
									current = tmp[ 0 ];
									dataTypes.unshift( tmp[ 1 ] );
								}
								break;
							}
						}
					}
				}

				// Apply converter (if not an equivalence)
				if ( conv !== true ) {

					// Unless errors are allowed to bubble, catch and return them
					if ( conv && s.throws ) {
						response = conv( response );
					} else {
						try {
							response = conv( response );
						} catch ( e ) {
							return {
								state: "parsererror",
								error: conv ? e : "No conversion from " + prev + " to " + current
							};
						}
					}
				}
			}
		}
	}

	return { state: "success", data: response };
}

jQuery.extend( {

	// Counter for holding the number of active queries
	active: 0,

	// Last-Modified header cache for next request
	lastModified: {},
	etag: {},

	ajaxSettings: {
		url: location.href,
		type: "GET",
		isLocal: rlocalProtocol.test( location.protocol ),
		global: true,
		processData: true,
		async: true,
		contentType: "application/x-www-form-urlencoded; charset=UTF-8",

		/*
		timeout: 0,
		data: null,
		dataType: null,
		username: null,
		password: null,
		cache: null,
		throws: false,
		traditional: false,
		headers: {},
		*/

		accepts: {
			"*": allTypes,
			text: "text/plain",
			html: "text/html",
			xml: "application/xml, text/xml",
			json: "application/json, text/javascript"
		},

		contents: {
			xml: /\bxml\b/,
			html: /\bhtml/,
			json: /\bjson\b/
		},

		responseFields: {
			xml: "responseXML",
			text: "responseText",
			json: "responseJSON"
		},

		// Data converters
		// Keys separate source (or catchall "*") and destination types with a single space
		converters: {

			// Convert anything to text
			"* text": String,

			// Text to html (true = no transformation)
			"text html": true,

			// Evaluate text as a json expression
			"text json": JSON.parse,

			// Parse text as xml
			"text xml": jQuery.parseXML
		},

		// For options that shouldn't be deep extended:
		// you can add your own custom options here if
		// and when you create one that shouldn't be
		// deep extended (see ajaxExtend)
		flatOptions: {
			url: true,
			context: true
		}
	},

	// Creates a full fledged settings object into target
	// with both ajaxSettings and settings fields.
	// If target is omitted, writes into ajaxSettings.
	ajaxSetup: function( target, settings ) {
		return settings ?

			// Building a settings object
			ajaxExtend( ajaxExtend( target, jQuery.ajaxSettings ), settings ) :

			// Extending ajaxSettings
			ajaxExtend( jQuery.ajaxSettings, target );
	},

	ajaxPrefilter: addToPrefiltersOrTransports( prefilters ),
	ajaxTransport: addToPrefiltersOrTransports( transports ),

	// Main method
	ajax: function( url, options ) {

		// If url is an object, simulate pre-1.5 signature
		if ( typeof url === "object" ) {
			options = url;
			url = undefined;
		}

		// Force options to be an object
		options = options || {};

		var transport,

			// URL without anti-cache param
			cacheURL,

			// Response headers
			responseHeadersString,
			responseHeaders,

			// timeout handle
			timeoutTimer,

			// Url cleanup var
			urlAnchor,

			// Request state (becomes false upon send and true upon completion)
			completed,

			// To know if global events are to be dispatched
			fireGlobals,

			// Loop variable
			i,

			// uncached part of the url
			uncached,

			// Create the final options object
			s = jQuery.ajaxSetup( {}, options ),

			// Callbacks context
			callbackContext = s.context || s,

			// Context for global events is callbackContext if it is a DOM node or jQuery collection
			globalEventContext = s.context &&
				( callbackContext.nodeType || callbackContext.jquery ) ?
					jQuery( callbackContext ) :
					jQuery.event,

			// Deferreds
			deferred = jQuery.Deferred(),
			completeDeferred = jQuery.Callbacks( "once memory" ),

			// Status-dependent callbacks
			statusCode = s.statusCode || {},

			// Headers (they are sent all at once)
			requestHeaders = {},
			requestHeadersNames = {},

			// Default abort message
			strAbort = "canceled",

			// Fake xhr
			jqXHR = {
				readyState: 0,

				// Builds headers hashtable if needed
				getResponseHeader: function( key ) {
					var match;
					if ( completed ) {
						if ( !responseHeaders ) {
							responseHeaders = {};
							while ( ( match = rheaders.exec( responseHeadersString ) ) ) {
								responseHeaders[ match[ 1 ].toLowerCase() ] = match[ 2 ];
							}
						}
						match = responseHeaders[ key.toLowerCase() ];
					}
					return match == null ? null : match;
				},

				// Raw string
				getAllResponseHeaders: function() {
					return completed ? responseHeadersString : null;
				},

				// Caches the header
				setRequestHeader: function( name, value ) {
					if ( completed == null ) {
						name = requestHeadersNames[ name.toLowerCase() ] =
							requestHeadersNames[ name.toLowerCase() ] || name;
						requestHeaders[ name ] = value;
					}
					return this;
				},

				// Overrides response content-type header
				overrideMimeType: function( type ) {
					if ( completed == null ) {
						s.mimeType = type;
					}
					return this;
				},

				// Status-dependent callbacks
				statusCode: function( map ) {
					var code;
					if ( map ) {
						if ( completed ) {

							// Execute the appropriate callbacks
							jqXHR.always( map[ jqXHR.status ] );
						} else {

							// Lazy-add the new callbacks in a way that preserves old ones
							for ( code in map ) {
								statusCode[ code ] = [ statusCode[ code ], map[ code ] ];
							}
						}
					}
					return this;
				},

				// Cancel the request
				abort: function( statusText ) {
					var finalText = statusText || strAbort;
					if ( transport ) {
						transport.abort( finalText );
					}
					done( 0, finalText );
					return this;
				}
			};

		// Attach deferreds
		deferred.promise( jqXHR );

		// Add protocol if not provided (prefilters might expect it)
		// Handle falsy url in the settings object (#10093: consistency with old signature)
		// We also use the url parameter if available
		s.url = ( ( url || s.url || location.href ) + "" )
			.replace( rprotocol, location.protocol + "//" );

		// Alias method option to type as per ticket #12004
		s.type = options.method || options.type || s.method || s.type;

		// Extract dataTypes list
		s.dataTypes = ( s.dataType || "*" ).toLowerCase().match( rnothtmlwhite ) || [ "" ];

		// A cross-domain request is in order when the origin doesn't match the current origin.
		if ( s.crossDomain == null ) {
			urlAnchor = document.createElement( "a" );

			// Support: IE <=8 - 11, Edge 12 - 15
			// IE throws exception on accessing the href property if url is malformed,
			// e.g. http://example.com:80x/
			try {
				urlAnchor.href = s.url;

				// Support: IE <=8 - 11 only
				// Anchor's host property isn't correctly set when s.url is relative
				urlAnchor.href = urlAnchor.href;
				s.crossDomain = originAnchor.protocol + "//" + originAnchor.host !==
					urlAnchor.protocol + "//" + urlAnchor.host;
			} catch ( e ) {

				// If there is an error parsing the URL, assume it is crossDomain,
				// it can be rejected by the transport if it is invalid
				s.crossDomain = true;
			}
		}

		// Convert data if not already a string
		if ( s.data && s.processData && typeof s.data !== "string" ) {
			s.data = jQuery.param( s.data, s.traditional );
		}

		// Apply prefilters
		inspectPrefiltersOrTransports( prefilters, s, options, jqXHR );

		// If request was aborted inside a prefilter, stop there
		if ( completed ) {
			return jqXHR;
		}

		// We can fire global events as of now if asked to
		// Don't fire events if jQuery.event is undefined in an AMD-usage scenario (#15118)
		fireGlobals = jQuery.event && s.global;

		// Watch for a new set of requests
		if ( fireGlobals && jQuery.active++ === 0 ) {
			jQuery.event.trigger( "ajaxStart" );
		}

		// Uppercase the type
		s.type = s.type.toUpperCase();

		// Determine if request has content
		s.hasContent = !rnoContent.test( s.type );

		// Save the URL in case we're toying with the If-Modified-Since
		// and/or If-None-Match header later on
		// Remove hash to simplify url manipulation
		cacheURL = s.url.replace( rhash, "" );

		// More options handling for requests with no content
		if ( !s.hasContent ) {

			// Remember the hash so we can put it back
			uncached = s.url.slice( cacheURL.length );

			// If data is available and should be processed, append data to url
			if ( s.data && ( s.processData || typeof s.data === "string" ) ) {
				cacheURL += ( rquery.test( cacheURL ) ? "&" : "?" ) + s.data;

				// #9682: remove data so that it's not used in an eventual retry
				delete s.data;
			}

			// Add or update anti-cache param if needed
			if ( s.cache === false ) {
				cacheURL = cacheURL.replace( rantiCache, "$1" );
				uncached = ( rquery.test( cacheURL ) ? "&" : "?" ) + "_=" + ( nonce++ ) + uncached;
			}

			// Put hash and anti-cache on the URL that will be requested (gh-1732)
			s.url = cacheURL + uncached;

		// Change '%20' to '+' if this is encoded form body content (gh-2658)
		} else if ( s.data && s.processData &&
			( s.contentType || "" ).indexOf( "application/x-www-form-urlencoded" ) === 0 ) {
			s.data = s.data.replace( r20, "+" );
		}

		// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
		if ( s.ifModified ) {
			if ( jQuery.lastModified[ cacheURL ] ) {
				jqXHR.setRequestHeader( "If-Modified-Since", jQuery.lastModified[ cacheURL ] );
			}
			if ( jQuery.etag[ cacheURL ] ) {
				jqXHR.setRequestHeader( "If-None-Match", jQuery.etag[ cacheURL ] );
			}
		}

		// Set the correct header, if data is being sent
		if ( s.data && s.hasContent && s.contentType !== false || options.contentType ) {
			jqXHR.setRequestHeader( "Content-Type", s.contentType );
		}

		// Set the Accepts header for the server, depending on the dataType
		jqXHR.setRequestHeader(
			"Accept",
			s.dataTypes[ 0 ] && s.accepts[ s.dataTypes[ 0 ] ] ?
				s.accepts[ s.dataTypes[ 0 ] ] +
					( s.dataTypes[ 0 ] !== "*" ? ", " + allTypes + "; q=0.01" : "" ) :
				s.accepts[ "*" ]
		);

		// Check for headers option
		for ( i in s.headers ) {
			jqXHR.setRequestHeader( i, s.headers[ i ] );
		}

		// Allow custom headers/mimetypes and early abort
		if ( s.beforeSend &&
			( s.beforeSend.call( callbackContext, jqXHR, s ) === false || completed ) ) {

			// Abort if not done already and return
			return jqXHR.abort();
		}

		// Aborting is no longer a cancellation
		strAbort = "abort";

		// Install callbacks on deferreds
		completeDeferred.add( s.complete );
		jqXHR.done( s.success );
		jqXHR.fail( s.error );

		// Get transport
		transport = inspectPrefiltersOrTransports( transports, s, options, jqXHR );

		// If no transport, we auto-abort
		if ( !transport ) {
			done( -1, "No Transport" );
		} else {
			jqXHR.readyState = 1;

			// Send global event
			if ( fireGlobals ) {
				globalEventContext.trigger( "ajaxSend", [ jqXHR, s ] );
			}

			// If request was aborted inside ajaxSend, stop there
			if ( completed ) {
				return jqXHR;
			}

			// Timeout
			if ( s.async && s.timeout > 0 ) {
				timeoutTimer = window.setTimeout( function() {
					jqXHR.abort( "timeout" );
				}, s.timeout );
			}

			try {
				completed = false;
				transport.send( requestHeaders, done );
			} catch ( e ) {

				// Rethrow post-completion exceptions
				if ( completed ) {
					throw e;
				}

				// Propagate others as results
				done( -1, e );
			}
		}

		// Callback for when everything is done
		function done( status, nativeStatusText, responses, headers ) {
			var isSuccess, success, error, response, modified,
				statusText = nativeStatusText;

			// Ignore repeat invocations
			if ( completed ) {
				return;
			}

			completed = true;

			// Clear timeout if it exists
			if ( timeoutTimer ) {
				window.clearTimeout( timeoutTimer );
			}

			// Dereference transport for early garbage collection
			// (no matter how long the jqXHR object will be used)
			transport = undefined;

			// Cache response headers
			responseHeadersString = headers || "";

			// Set readyState
			jqXHR.readyState = status > 0 ? 4 : 0;

			// Determine if successful
			isSuccess = status >= 200 && status < 300 || status === 304;

			// Get response data
			if ( responses ) {
				response = ajaxHandleResponses( s, jqXHR, responses );
			}

			// Convert no matter what (that way responseXXX fields are always set)
			response = ajaxConvert( s, response, jqXHR, isSuccess );

			// If successful, handle type chaining
			if ( isSuccess ) {

				// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
				if ( s.ifModified ) {
					modified = jqXHR.getResponseHeader( "Last-Modified" );
					if ( modified ) {
						jQuery.lastModified[ cacheURL ] = modified;
					}
					modified = jqXHR.getResponseHeader( "etag" );
					if ( modified ) {
						jQuery.etag[ cacheURL ] = modified;
					}
				}

				// if no content
				if ( status === 204 || s.type === "HEAD" ) {
					statusText = "nocontent";

				// if not modified
				} else if ( status === 304 ) {
					statusText = "notmodified";

				// If we have data, let's convert it
				} else {
					statusText = response.state;
					success = response.data;
					error = response.error;
					isSuccess = !error;
				}
			} else {

				// Extract error from statusText and normalize for non-aborts
				error = statusText;
				if ( status || !statusText ) {
					statusText = "error";
					if ( status < 0 ) {
						status = 0;
					}
				}
			}

			// Set data for the fake xhr object
			jqXHR.status = status;
			jqXHR.statusText = ( nativeStatusText || statusText ) + "";

			// Success/Error
			if ( isSuccess ) {
				deferred.resolveWith( callbackContext, [ success, statusText, jqXHR ] );
			} else {
				deferred.rejectWith( callbackContext, [ jqXHR, statusText, error ] );
			}

			// Status-dependent callbacks
			jqXHR.statusCode( statusCode );
			statusCode = undefined;

			if ( fireGlobals ) {
				globalEventContext.trigger( isSuccess ? "ajaxSuccess" : "ajaxError",
					[ jqXHR, s, isSuccess ? success : error ] );
			}

			// Complete
			completeDeferred.fireWith( callbackContext, [ jqXHR, statusText ] );

			if ( fireGlobals ) {
				globalEventContext.trigger( "ajaxComplete", [ jqXHR, s ] );

				// Handle the global AJAX counter
				if ( !( --jQuery.active ) ) {
					jQuery.event.trigger( "ajaxStop" );
				}
			}
		}

		return jqXHR;
	},

	getJSON: function( url, data, callback ) {
		return jQuery.get( url, data, callback, "json" );
	},

	getScript: function( url, callback ) {
		return jQuery.get( url, undefined, callback, "script" );
	}
} );

jQuery.each( [ "get", "post" ], function( i, method ) {
	jQuery[ method ] = function( url, data, callback, type ) {

		// Shift arguments if data argument was omitted
		if ( isFunction( data ) ) {
			type = type || callback;
			callback = data;
			data = undefined;
		}

		// The url can be an options object (which then must have .url)
		return jQuery.ajax( jQuery.extend( {
			url: url,
			type: method,
			dataType: type,
			data: data,
			success: callback
		}, jQuery.isPlainObject( url ) && url ) );
	};
} );


jQuery._evalUrl = function( url ) {
	return jQuery.ajax( {
		url: url,

		// Make this explicit, since user can override this through ajaxSetup (#11264)
		type: "GET",
		dataType: "script",
		cache: true,
		async: false,
		global: false,
		"throws": true
	} );
};


jQuery.fn.extend( {
	wrapAll: function( html ) {
		var wrap;

		if ( this[ 0 ] ) {
			if ( isFunction( html ) ) {
				html = html.call( this[ 0 ] );
			}

			// The elements to wrap the target around
			wrap = jQuery( html, this[ 0 ].ownerDocument ).eq( 0 ).clone( true );

			if ( this[ 0 ].parentNode ) {
				wrap.insertBefore( this[ 0 ] );
			}

			wrap.map( function() {
				var elem = this;

				while ( elem.firstElementChild ) {
					elem = elem.firstElementChild;
				}

				return elem;
			} ).append( this );
		}

		return this;
	},

	wrapInner: function( html ) {
		if ( isFunction( html ) ) {
			return this.each( function( i ) {
				jQuery( this ).wrapInner( html.call( this, i ) );
			} );
		}

		return this.each( function() {
			var self = jQuery( this ),
				contents = self.contents();

			if ( contents.length ) {
				contents.wrapAll( html );

			} else {
				self.append( html );
			}
		} );
	},

	wrap: function( html ) {
		var htmlIsFunction = isFunction( html );

		return this.each( function( i ) {
			jQuery( this ).wrapAll( htmlIsFunction ? html.call( this, i ) : html );
		} );
	},

	unwrap: function( selector ) {
		this.parent( selector ).not( "body" ).each( function() {
			jQuery( this ).replaceWith( this.childNodes );
		} );
		return this;
	}
} );


jQuery.expr.pseudos.hidden = function( elem ) {
	return !jQuery.expr.pseudos.visible( elem );
};
jQuery.expr.pseudos.visible = function( elem ) {
	return !!( elem.offsetWidth || elem.offsetHeight || elem.getClientRects().length );
};




jQuery.ajaxSettings.xhr = function() {
	try {
		return new window.XMLHttpRequest();
	} catch ( e ) {}
};

var xhrSuccessStatus = {

		// File protocol always yields status code 0, assume 200
		0: 200,

		// Support: IE <=9 only
		// #1450: sometimes IE returns 1223 when it should be 204
		1223: 204
	},
	xhrSupported = jQuery.ajaxSettings.xhr();

support.cors = !!xhrSupported && ( "withCredentials" in xhrSupported );
support.ajax = xhrSupported = !!xhrSupported;

jQuery.ajaxTransport( function( options ) {
	var callback, errorCallback;

	// Cross domain only allowed if supported through XMLHttpRequest
	if ( support.cors || xhrSupported && !options.crossDomain ) {
		return {
			send: function( headers, complete ) {
				var i,
					xhr = options.xhr();

				xhr.open(
					options.type,
					options.url,
					options.async,
					options.username,
					options.password
				);

				// Apply custom fields if provided
				if ( options.xhrFields ) {
					for ( i in options.xhrFields ) {
						xhr[ i ] = options.xhrFields[ i ];
					}
				}

				// Override mime type if needed
				if ( options.mimeType && xhr.overrideMimeType ) {
					xhr.overrideMimeType( options.mimeType );
				}

				// X-Requested-With header
				// For cross-domain requests, seeing as conditions for a preflight are
				// akin to a jigsaw puzzle, we simply never set it to be sure.
				// (it can always be set on a per-request basis or even using ajaxSetup)
				// For same-domain requests, won't change header if already provided.
				if ( !options.crossDomain && !headers[ "X-Requested-With" ] ) {
					headers[ "X-Requested-With" ] = "XMLHttpRequest";
				}

				// Set headers
				for ( i in headers ) {
					xhr.setRequestHeader( i, headers[ i ] );
				}

				// Callback
				callback = function( type ) {
					return function() {
						if ( callback ) {
							callback = errorCallback = xhr.onload =
								xhr.onerror = xhr.onabort = xhr.ontimeout =
									xhr.onreadystatechange = null;

							if ( type === "abort" ) {
								xhr.abort();
							} else if ( type === "error" ) {

								// Support: IE <=9 only
								// On a manual native abort, IE9 throws
								// errors on any property access that is not readyState
								if ( typeof xhr.status !== "number" ) {
									complete( 0, "error" );
								} else {
									complete(

										// File: protocol always yields status 0; see #8605, #14207
										xhr.status,
										xhr.statusText
									);
								}
							} else {
								complete(
									xhrSuccessStatus[ xhr.status ] || xhr.status,
									xhr.statusText,

									// Support: IE <=9 only
									// IE9 has no XHR2 but throws on binary (trac-11426)
									// For XHR2 non-text, let the caller handle it (gh-2498)
									( xhr.responseType || "text" ) !== "text"  ||
									typeof xhr.responseText !== "string" ?
										{ binary: xhr.response } :
										{ text: xhr.responseText },
									xhr.getAllResponseHeaders()
								);
							}
						}
					};
				};

				// Listen to events
				xhr.onload = callback();
				errorCallback = xhr.onerror = xhr.ontimeout = callback( "error" );

				// Support: IE 9 only
				// Use onreadystatechange to replace onabort
				// to handle uncaught aborts
				if ( xhr.onabort !== undefined ) {
					xhr.onabort = errorCallback;
				} else {
					xhr.onreadystatechange = function() {

						// Check readyState before timeout as it changes
						if ( xhr.readyState === 4 ) {

							// Allow onerror to be called first,
							// but that will not handle a native abort
							// Also, save errorCallback to a variable
							// as xhr.onerror cannot be accessed
							window.setTimeout( function() {
								if ( callback ) {
									errorCallback();
								}
							} );
						}
					};
				}

				// Create the abort callback
				callback = callback( "abort" );

				try {

					// Do send the request (this may raise an exception)
					xhr.send( options.hasContent && options.data || null );
				} catch ( e ) {

					// #14683: Only rethrow if this hasn't been notified as an error yet
					if ( callback ) {
						throw e;
					}
				}
			},

			abort: function() {
				if ( callback ) {
					callback();
				}
			}
		};
	}
} );




// Prevent auto-execution of scripts when no explicit dataType was provided (See gh-2432)
jQuery.ajaxPrefilter( function( s ) {
	if ( s.crossDomain ) {
		s.contents.script = false;
	}
} );

// Install script dataType
jQuery.ajaxSetup( {
	accepts: {
		script: "text/javascript, application/javascript, " +
			"application/ecmascript, application/x-ecmascript"
	},
	contents: {
		script: /\b(?:java|ecma)script\b/
	},
	converters: {
		"text script": function( text ) {
			jQuery.globalEval( text );
			return text;
		}
	}
} );

// Handle cache's special case and crossDomain
jQuery.ajaxPrefilter( "script", function( s ) {
	if ( s.cache === undefined ) {
		s.cache = false;
	}
	if ( s.crossDomain ) {
		s.type = "GET";
	}
} );

// Bind script tag hack transport
jQuery.ajaxTransport( "script", function( s ) {

	// This transport only deals with cross domain requests
	if ( s.crossDomain ) {
		var script, callback;
		return {
			send: function( _, complete ) {
				script = jQuery( "<script>" ).prop( {
					charset: s.scriptCharset,
					src: s.url
				} ).on(
					"load error",
					callback = function( evt ) {
						script.remove();
						callback = null;
						if ( evt ) {
							complete( evt.type === "error" ? 404 : 200, evt.type );
						}
					}
				);

				// Use native DOM manipulation to avoid our domManip AJAX trickery
				document.head.appendChild( script[ 0 ] );
			},
			abort: function() {
				if ( callback ) {
					callback();
				}
			}
		};
	}
} );




var oldCallbacks = [],
	rjsonp = /(=)\?(?=&|$)|\?\?/;

// Default jsonp settings
jQuery.ajaxSetup( {
	jsonp: "callback",
	jsonpCallback: function() {
		var callback = oldCallbacks.pop() || ( jQuery.expando + "_" + ( nonce++ ) );
		this[ callback ] = true;
		return callback;
	}
} );

// Detect, normalize options and install callbacks for jsonp requests
jQuery.ajaxPrefilter( "json jsonp", function( s, originalSettings, jqXHR ) {

	var callbackName, overwritten, responseContainer,
		jsonProp = s.jsonp !== false && ( rjsonp.test( s.url ) ?
			"url" :
			typeof s.data === "string" &&
				( s.contentType || "" )
					.indexOf( "application/x-www-form-urlencoded" ) === 0 &&
				rjsonp.test( s.data ) && "data"
		);

	// Handle iff the expected data type is "jsonp" or we have a parameter to set
	if ( jsonProp || s.dataTypes[ 0 ] === "jsonp" ) {

		// Get callback name, remembering preexisting value associated with it
		callbackName = s.jsonpCallback = isFunction( s.jsonpCallback ) ?
			s.jsonpCallback() :
			s.jsonpCallback;

		// Insert callback into url or form data
		if ( jsonProp ) {
			s[ jsonProp ] = s[ jsonProp ].replace( rjsonp, "$1" + callbackName );
		} else if ( s.jsonp !== false ) {
			s.url += ( rquery.test( s.url ) ? "&" : "?" ) + s.jsonp + "=" + callbackName;
		}

		// Use data converter to retrieve json after script execution
		s.converters[ "script json" ] = function() {
			if ( !responseContainer ) {
				jQuery.error( callbackName + " was not called" );
			}
			return responseContainer[ 0 ];
		};

		// Force json dataType
		s.dataTypes[ 0 ] = "json";

		// Install callback
		overwritten = window[ callbackName ];
		window[ callbackName ] = function() {
			responseContainer = arguments;
		};

		// Clean-up function (fires after converters)
		jqXHR.always( function() {

			// If previous value didn't exist - remove it
			if ( overwritten === undefined ) {
				jQuery( window ).removeProp( callbackName );

			// Otherwise restore preexisting value
			} else {
				window[ callbackName ] = overwritten;
			}

			// Save back as free
			if ( s[ callbackName ] ) {

				// Make sure that re-using the options doesn't screw things around
				s.jsonpCallback = originalSettings.jsonpCallback;

				// Save the callback name for future use
				oldCallbacks.push( callbackName );
			}

			// Call if it was a function and we have a response
			if ( responseContainer && isFunction( overwritten ) ) {
				overwritten( responseContainer[ 0 ] );
			}

			responseContainer = overwritten = undefined;
		} );

		// Delegate to script
		return "script";
	}
} );




// Support: Safari 8 only
// In Safari 8 documents created via document.implementation.createHTMLDocument
// collapse sibling forms: the second one becomes a child of the first one.
// Because of that, this security measure has to be disabled in Safari 8.
// https://bugs.webkit.org/show_bug.cgi?id=137337
support.createHTMLDocument = ( function() {
	var body = document.implementation.createHTMLDocument( "" ).body;
	body.innerHTML = "<form></form><form></form>";
	return body.childNodes.length === 2;
} )();


// Argument "data" should be string of html
// context (optional): If specified, the fragment will be created in this context,
// defaults to document
// keepScripts (optional): If true, will include scripts passed in the html string
jQuery.parseHTML = function( data, context, keepScripts ) {
	if ( typeof data !== "string" ) {
		return [];
	}
	if ( typeof context === "boolean" ) {
		keepScripts = context;
		context = false;
	}

	var base, parsed, scripts;

	if ( !context ) {

		// Stop scripts or inline event handlers from being executed immediately
		// by using document.implementation
		if ( support.createHTMLDocument ) {
			context = document.implementation.createHTMLDocument( "" );

			// Set the base href for the created document
			// so any parsed elements with URLs
			// are based on the document's URL (gh-2965)
			base = context.createElement( "base" );
			base.href = document.location.href;
			context.head.appendChild( base );
		} else {
			context = document;
		}
	}

	parsed = rsingleTag.exec( data );
	scripts = !keepScripts && [];

	// Single tag
	if ( parsed ) {
		return [ context.createElement( parsed[ 1 ] ) ];
	}

	parsed = buildFragment( [ data ], context, scripts );

	if ( scripts && scripts.length ) {
		jQuery( scripts ).remove();
	}

	return jQuery.merge( [], parsed.childNodes );
};


/**
 * Load a url into a page
 */
jQuery.fn.load = function( url, params, callback ) {
	var selector, type, response,
		self = this,
		off = url.indexOf( " " );

	if ( off > -1 ) {
		selector = stripAndCollapse( url.slice( off ) );
		url = url.slice( 0, off );
	}

	// If it's a function
	if ( isFunction( params ) ) {

		// We assume that it's the callback
		callback = params;
		params = undefined;

	// Otherwise, build a param string
	} else if ( params && typeof params === "object" ) {
		type = "POST";
	}

	// If we have elements to modify, make the request
	if ( self.length > 0 ) {
		jQuery.ajax( {
			url: url,

			// If "type" variable is undefined, then "GET" method will be used.
			// Make value of this field explicit since
			// user can override it through ajaxSetup method
			type: type || "GET",
			dataType: "html",
			data: params
		} ).done( function( responseText ) {

			// Save response for use in complete callback
			response = arguments;

			self.html( selector ?

				// If a selector was specified, locate the right elements in a dummy div
				// Exclude scripts to avoid IE 'Permission Denied' errors
				jQuery( "<div>" ).append( jQuery.parseHTML( responseText ) ).find( selector ) :

				// Otherwise use the full result
				responseText );

		// If the request succeeds, this function gets "data", "status", "jqXHR"
		// but they are ignored because response was set above.
		// If it fails, this function gets "jqXHR", "status", "error"
		} ).always( callback && function( jqXHR, status ) {
			self.each( function() {
				callback.apply( this, response || [ jqXHR.responseText, status, jqXHR ] );
			} );
		} );
	}

	return this;
};




// Attach a bunch of functions for handling common AJAX events
jQuery.each( [
	"ajaxStart",
	"ajaxStop",
	"ajaxComplete",
	"ajaxError",
	"ajaxSuccess",
	"ajaxSend"
], function( i, type ) {
	jQuery.fn[ type ] = function( fn ) {
		return this.on( type, fn );
	};
} );




jQuery.expr.pseudos.animated = function( elem ) {
	return jQuery.grep( jQuery.timers, function( fn ) {
		return elem === fn.elem;
	} ).length;
};




jQuery.offset = {
	setOffset: function( elem, options, i ) {
		var curPosition, curLeft, curCSSTop, curTop, curOffset, curCSSLeft, calculatePosition,
			position = jQuery.css( elem, "position" ),
			curElem = jQuery( elem ),
			props = {};

		// Set position first, in-case top/left are set even on static elem
		if ( position === "static" ) {
			elem.style.position = "relative";
		}

		curOffset = curElem.offset();
		curCSSTop = jQuery.css( elem, "top" );
		curCSSLeft = jQuery.css( elem, "left" );
		calculatePosition = ( position === "absolute" || position === "fixed" ) &&
			( curCSSTop + curCSSLeft ).indexOf( "auto" ) > -1;

		// Need to be able to calculate position if either
		// top or left is auto and position is either absolute or fixed
		if ( calculatePosition ) {
			curPosition = curElem.position();
			curTop = curPosition.top;
			curLeft = curPosition.left;

		} else {
			curTop = parseFloat( curCSSTop ) || 0;
			curLeft = parseFloat( curCSSLeft ) || 0;
		}

		if ( isFunction( options ) ) {

			// Use jQuery.extend here to allow modification of coordinates argument (gh-1848)
			options = options.call( elem, i, jQuery.extend( {}, curOffset ) );
		}

		if ( options.top != null ) {
			props.top = ( options.top - curOffset.top ) + curTop;
		}
		if ( options.left != null ) {
			props.left = ( options.left - curOffset.left ) + curLeft;
		}

		if ( "using" in options ) {
			options.using.call( elem, props );

		} else {
			curElem.css( props );
		}
	}
};

jQuery.fn.extend( {

	// offset() relates an element's border box to the document origin
	offset: function( options ) {

		// Preserve chaining for setter
		if ( arguments.length ) {
			return options === undefined ?
				this :
				this.each( function( i ) {
					jQuery.offset.setOffset( this, options, i );
				} );
		}

		var rect, win,
			elem = this[ 0 ];

		if ( !elem ) {
			return;
		}

		// Return zeros for disconnected and hidden (display: none) elements (gh-2310)
		// Support: IE <=11 only
		// Running getBoundingClientRect on a
		// disconnected node in IE throws an error
		if ( !elem.getClientRects().length ) {
			return { top: 0, left: 0 };
		}

		// Get document-relative position by adding viewport scroll to viewport-relative gBCR
		rect = elem.getBoundingClientRect();
		win = elem.ownerDocument.defaultView;
		return {
			top: rect.top + win.pageYOffset,
			left: rect.left + win.pageXOffset
		};
	},

	// position() relates an element's margin box to its offset parent's padding box
	// This corresponds to the behavior of CSS absolute positioning
	position: function() {
		if ( !this[ 0 ] ) {
			return;
		}

		var offsetParent, offset, doc,
			elem = this[ 0 ],
			parentOffset = { top: 0, left: 0 };

		// position:fixed elements are offset from the viewport, which itself always has zero offset
		if ( jQuery.css( elem, "position" ) === "fixed" ) {

			// Assume position:fixed implies availability of getBoundingClientRect
			offset = elem.getBoundingClientRect();

		} else {
			offset = this.offset();

			// Account for the *real* offset parent, which can be the document or its root element
			// when a statically positioned element is identified
			doc = elem.ownerDocument;
			offsetParent = elem.offsetParent || doc.documentElement;
			while ( offsetParent &&
				( offsetParent === doc.body || offsetParent === doc.documentElement ) &&
				jQuery.css( offsetParent, "position" ) === "static" ) {

				offsetParent = offsetParent.parentNode;
			}
			if ( offsetParent && offsetParent !== elem && offsetParent.nodeType === 1 ) {

				// Incorporate borders into its offset, since they are outside its content origin
				parentOffset = jQuery( offsetParent ).offset();
				parentOffset.top += jQuery.css( offsetParent, "borderTopWidth", true );
				parentOffset.left += jQuery.css( offsetParent, "borderLeftWidth", true );
			}
		}

		// Subtract parent offsets and element margins
		return {
			top: offset.top - parentOffset.top - jQuery.css( elem, "marginTop", true ),
			left: offset.left - parentOffset.left - jQuery.css( elem, "marginLeft", true )
		};
	},

	// This method will return documentElement in the following cases:
	// 1) For the element inside the iframe without offsetParent, this method will return
	//    documentElement of the parent window
	// 2) For the hidden or detached element
	// 3) For body or html element, i.e. in case of the html node - it will return itself
	//
	// but those exceptions were never presented as a real life use-cases
	// and might be considered as more preferable results.
	//
	// This logic, however, is not guaranteed and can change at any point in the future
	offsetParent: function() {
		return this.map( function() {
			var offsetParent = this.offsetParent;

			while ( offsetParent && jQuery.css( offsetParent, "position" ) === "static" ) {
				offsetParent = offsetParent.offsetParent;
			}

			return offsetParent || documentElement;
		} );
	}
} );

// Create scrollLeft and scrollTop methods
jQuery.each( { scrollLeft: "pageXOffset", scrollTop: "pageYOffset" }, function( method, prop ) {
	var top = "pageYOffset" === prop;

	jQuery.fn[ method ] = function( val ) {
		return access( this, function( elem, method, val ) {

			// Coalesce documents and windows
			var win;
			if ( isWindow( elem ) ) {
				win = elem;
			} else if ( elem.nodeType === 9 ) {
				win = elem.defaultView;
			}

			if ( val === undefined ) {
				return win ? win[ prop ] : elem[ method ];
			}

			if ( win ) {
				win.scrollTo(
					!top ? val : win.pageXOffset,
					top ? val : win.pageYOffset
				);

			} else {
				elem[ method ] = val;
			}
		}, method, val, arguments.length );
	};
} );

// Support: Safari <=7 - 9.1, Chrome <=37 - 49
// Add the top/left cssHooks using jQuery.fn.position
// Webkit bug: https://bugs.webkit.org/show_bug.cgi?id=29084
// Blink bug: https://bugs.chromium.org/p/chromium/issues/detail?id=589347
// getComputedStyle returns percent when specified for top/left/bottom/right;
// rather than make the css module depend on the offset module, just check for it here
jQuery.each( [ "top", "left" ], function( i, prop ) {
	jQuery.cssHooks[ prop ] = addGetHookIf( support.pixelPosition,
		function( elem, computed ) {
			if ( computed ) {
				computed = curCSS( elem, prop );

				// If curCSS returns percentage, fallback to offset
				return rnumnonpx.test( computed ) ?
					jQuery( elem ).position()[ prop ] + "px" :
					computed;
			}
		}
	);
} );


// Create innerHeight, innerWidth, height, width, outerHeight and outerWidth methods
jQuery.each( { Height: "height", Width: "width" }, function( name, type ) {
	jQuery.each( { padding: "inner" + name, content: type, "": "outer" + name },
		function( defaultExtra, funcName ) {

		// Margin is only for outerHeight, outerWidth
		jQuery.fn[ funcName ] = function( margin, value ) {
			var chainable = arguments.length && ( defaultExtra || typeof margin !== "boolean" ),
				extra = defaultExtra || ( margin === true || value === true ? "margin" : "border" );

			return access( this, function( elem, type, value ) {
				var doc;

				if ( isWindow( elem ) ) {

					// $( window ).outerWidth/Height return w/h including scrollbars (gh-1729)
					return funcName.indexOf( "outer" ) === 0 ?
						elem[ "inner" + name ] :
						elem.document.documentElement[ "client" + name ];
				}

				// Get document width or height
				if ( elem.nodeType === 9 ) {
					doc = elem.documentElement;

					// Either scroll[Width/Height] or offset[Width/Height] or client[Width/Height],
					// whichever is greatest
					return Math.max(
						elem.body[ "scroll" + name ], doc[ "scroll" + name ],
						elem.body[ "offset" + name ], doc[ "offset" + name ],
						doc[ "client" + name ]
					);
				}

				return value === undefined ?

					// Get width or height on the element, requesting but not forcing parseFloat
					jQuery.css( elem, type, extra ) :

					// Set width or height on the element
					jQuery.style( elem, type, value, extra );
			}, type, chainable ? margin : undefined, chainable );
		};
	} );
} );


jQuery.each( ( "blur focus focusin focusout resize scroll click dblclick " +
	"mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave " +
	"change select submit keydown keypress keyup contextmenu" ).split( " " ),
	function( i, name ) {

	// Handle event binding
	jQuery.fn[ name ] = function( data, fn ) {
		return arguments.length > 0 ?
			this.on( name, null, data, fn ) :
			this.trigger( name );
	};
} );

jQuery.fn.extend( {
	hover: function( fnOver, fnOut ) {
		return this.mouseenter( fnOver ).mouseleave( fnOut || fnOver );
	}
} );




jQuery.fn.extend( {

	bind: function( types, data, fn ) {
		return this.on( types, null, data, fn );
	},
	unbind: function( types, fn ) {
		return this.off( types, null, fn );
	},

	delegate: function( selector, types, data, fn ) {
		return this.on( types, selector, data, fn );
	},
	undelegate: function( selector, types, fn ) {

		// ( namespace ) or ( selector, types [, fn] )
		return arguments.length === 1 ?
			this.off( selector, "**" ) :
			this.off( types, selector || "**", fn );
	}
} );

// Bind a function to a context, optionally partially applying any
// arguments.
// jQuery.proxy is deprecated to promote standards (specifically Function#bind)
// However, it is not slated for removal any time soon
jQuery.proxy = function( fn, context ) {
	var tmp, args, proxy;

	if ( typeof context === "string" ) {
		tmp = fn[ context ];
		context = fn;
		fn = tmp;
	}

	// Quick check to determine if target is callable, in the spec
	// this throws a TypeError, but we will just return undefined.
	if ( !isFunction( fn ) ) {
		return undefined;
	}

	// Simulated bind
	args = slice.call( arguments, 2 );
	proxy = function() {
		return fn.apply( context || this, args.concat( slice.call( arguments ) ) );
	};

	// Set the guid of unique handler to the same of original handler, so it can be removed
	proxy.guid = fn.guid = fn.guid || jQuery.guid++;

	return proxy;
};

jQuery.holdReady = function( hold ) {
	if ( hold ) {
		jQuery.readyWait++;
	} else {
		jQuery.ready( true );
	}
};
jQuery.isArray = Array.isArray;
jQuery.parseJSON = JSON.parse;
jQuery.nodeName = nodeName;
jQuery.isFunction = isFunction;
jQuery.isWindow = isWindow;
jQuery.camelCase = camelCase;
jQuery.type = toType;

jQuery.now = Date.now;

jQuery.isNumeric = function( obj ) {

	// As of jQuery 3.0, isNumeric is limited to
	// strings and numbers (primitives or objects)
	// that can be coerced to finite numbers (gh-2662)
	var type = jQuery.type( obj );
	return ( type === "number" || type === "string" ) &&

		// parseFloat NaNs numeric-cast false positives ("")
		// ...but misinterprets leading-number strings, particularly hex literals ("0x...")
		// subtraction forces infinities to NaN
		!isNaN( obj - parseFloat( obj ) );
};




// Register as a named AMD module, since jQuery can be concatenated with other
// files that may use define, but not via a proper concatenation script that
// understands anonymous AMD modules. A named AMD is safest and most robust
// way to register. Lowercase jquery is used because AMD module names are
// derived from file names, and jQuery is normally delivered in a lowercase
// file name. Do this after creating the global so that if an AMD module wants
// to call noConflict to hide this version of jQuery, it will work.

// Note that for maximum portability, libraries that are not jQuery should
// declare themselves as anonymous modules, and avoid setting a global if an
// AMD loader is present. jQuery is a special case. For more information, see
// https://github.com/jrburke/requirejs/wiki/Updating-existing-libraries#wiki-anon

if ( typeof define === "function" && define.amd ) {
	define( "jquery", [], function() {
		return jQuery;
	} );
}




var

	// Map over jQuery in case of overwrite
	_jQuery = window.jQuery,

	// Map over the $ in case of overwrite
	_$ = window.$;

jQuery.noConflict = function( deep ) {
	if ( window.$ === jQuery ) {
		window.$ = _$;
	}

	if ( deep && window.jQuery === jQuery ) {
		window.jQuery = _jQuery;
	}

	return jQuery;
};

// Expose jQuery and $ identifiers, even in AMD
// (#7102#comment:10, https://github.com/jquery/jquery/pull/557)
// and CommonJS for browser emulators (#13566)
if ( !noGlobal ) {
	window.jQuery = window.$ = jQuery;
}




return jQuery;
} );


/*! DataTables 1.10.18
 * ©2008-2018 SpryMedia Ltd - datatables.net/license
 */

/**
 * @summary     DataTables
 * @description Paginate, search and order HTML tables
 * @version     1.10.18
 * @file        jquery.dataTables.js
 * @author      SpryMedia Ltd
 * @contact     www.datatables.net
 * @copyright   Copyright 2008-2018 SpryMedia Ltd.
 *
 * This source file is free software, available under the following license:
 *   MIT license - http://datatables.net/license
 *
 * This source file is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
 * or FITNESS FOR A PARTICULAR PURPOSE. See the license files for details.
 *
 * For details please refer to: http://www.datatables.net
 */

/*jslint evil: true, undef: true, browser: true */
/*globals $,require,jQuery,define,_selector_run,_selector_opts,_selector_first,_selector_row_indexes,_ext,_Api,_api_register,_api_registerPlural,_re_new_lines,_re_html,_re_formatted_numeric,_re_escape_regex,_empty,_intVal,_numToDecimal,_isNumber,_isHtml,_htmlNumeric,_pluck,_pluck_order,_range,_stripHtml,_unique,_fnBuildAjax,_fnAjaxUpdate,_fnAjaxParameters,_fnAjaxUpdateDraw,_fnAjaxDataSrc,_fnAddColumn,_fnColumnOptions,_fnAdjustColumnSizing,_fnVisibleToColumnIndex,_fnColumnIndexToVisible,_fnVisbleColumns,_fnGetColumns,_fnColumnTypes,_fnApplyColumnDefs,_fnHungarianMap,_fnCamelToHungarian,_fnLanguageCompat,_fnBrowserDetect,_fnAddData,_fnAddTr,_fnNodeToDataIndex,_fnNodeToColumnIndex,_fnGetCellData,_fnSetCellData,_fnSplitObjNotation,_fnGetObjectDataFn,_fnSetObjectDataFn,_fnGetDataMaster,_fnClearTable,_fnDeleteIndex,_fnInvalidate,_fnGetRowElements,_fnCreateTr,_fnBuildHead,_fnDrawHead,_fnDraw,_fnReDraw,_fnAddOptionsHtml,_fnDetectHeader,_fnGetUniqueThs,_fnFeatureHtmlFilter,_fnFilterComplete,_fnFilterCustom,_fnFilterColumn,_fnFilter,_fnFilterCreateSearch,_fnEscapeRegex,_fnFilterData,_fnFeatureHtmlInfo,_fnUpdateInfo,_fnInfoMacros,_fnInitialise,_fnInitComplete,_fnLengthChange,_fnFeatureHtmlLength,_fnFeatureHtmlPaginate,_fnPageChange,_fnFeatureHtmlProcessing,_fnProcessingDisplay,_fnFeatureHtmlTable,_fnScrollDraw,_fnApplyToChildren,_fnCalculateColumnWidths,_fnThrottle,_fnConvertToWidth,_fnGetWidestNode,_fnGetMaxLenString,_fnStringToCss,_fnSortFlatten,_fnSort,_fnSortAria,_fnSortListener,_fnSortAttachListener,_fnSortingClasses,_fnSortData,_fnSaveState,_fnLoadState,_fnSettingsFromNode,_fnLog,_fnMap,_fnBindAction,_fnCallbackReg,_fnCallbackFire,_fnLengthOverflow,_fnRenderer,_fnDataSource,_fnRowAttributes*/

(function( factory ) {
	"use strict";

	if ( typeof define === 'function' && define.amd ) {
		// AMD
		define( ['jquery'], function ( $ ) {
			return factory( $, window, document );
		} );
	}
	else if ( typeof exports === 'object' ) {
		// CommonJS
		module.exports = function (root, $) {
			if ( ! root ) {
				// CommonJS environments without a window global must pass a
				// root. This will give an error otherwise
				root = window;
			}

			if ( ! $ ) {
				$ = typeof window !== 'undefined' ? // jQuery's factory checks for a global window
					require('jquery') :
					require('jquery')( root );
			}

			return factory( $, root, root.document );
		};
	}
	else {
		// Browser
		factory( jQuery, window, document );
	}
}
(function( $, window, document, undefined ) {
	"use strict";

	/**
	 * DataTables is a plug-in for the jQuery Javascript library. It is a highly
	 * flexible tool, based upon the foundations of progressive enhancement,
	 * which will add advanced interaction controls to any HTML table. For a
	 * full list of features please refer to
	 * [DataTables.net](href="http://datatables.net).
	 *
	 * Note that the `DataTable` object is not a global variable but is aliased
	 * to `jQuery.fn.DataTable` and `jQuery.fn.dataTable` through which it may
	 * be  accessed.
	 *
	 *  @class
	 *  @param {object} [init={}] Configuration object for DataTables. Options
	 *    are defined by {@link DataTable.defaults}
	 *  @requires jQuery 1.7+
	 *
	 *  @example
	 *    // Basic initialisation
	 *    $(document).ready( function {
	 *      $('#example').dataTable();
	 *    } );
	 *
	 *  @example
	 *    // Initialisation with configuration options - in this case, disable
	 *    // pagination and sorting.
	 *    $(document).ready( function {
	 *      $('#example').dataTable( {
	 *        "paginate": false,
	 *        "sort": false
	 *      } );
	 *    } );
	 */
	var DataTable = function ( options )
	{
		/**
		 * Perform a jQuery selector action on the table's TR elements (from the tbody) and
		 * return the resulting jQuery object.
		 *  @param {string|node|jQuery} sSelector jQuery selector or node collection to act on
		 *  @param {object} [oOpts] Optional parameters for modifying the rows to be included
		 *  @param {string} [oOpts.filter=none] Select TR elements that meet the current filter
		 *    criterion ("applied") or all TR elements (i.e. no filter).
		 *  @param {string} [oOpts.order=current] Order of the TR elements in the processed array.
		 *    Can be either 'current', whereby the current sorting of the table is used, or
		 *    'original' whereby the original order the data was read into the table is used.
		 *  @param {string} [oOpts.page=all] Limit the selection to the currently displayed page
		 *    ("current") or not ("all"). If 'current' is given, then order is assumed to be
		 *    'current' and filter is 'applied', regardless of what they might be given as.
		 *  @returns {object} jQuery object, filtered by the given selector.
		 *  @dtopt API
		 *  @deprecated Since v1.10
		 *
		 *  @example
		 *    $(document).ready(function() {
		 *      var oTable = $('#example').dataTable();
		 *
		 *      // Highlight every second row
		 *      oTable.$('tr:odd').css('backgroundColor', 'blue');
		 *    } );
		 *
		 *  @example
		 *    $(document).ready(function() {
		 *      var oTable = $('#example').dataTable();
		 *
		 *      // Filter to rows with 'Webkit' in them, add a background colour and then
		 *      // remove the filter, thus highlighting the 'Webkit' rows only.
		 *      oTable.fnFilter('Webkit');
		 *      oTable.$('tr', {"search": "applied"}).css('backgroundColor', 'blue');
		 *      oTable.fnFilter('');
		 *    } );
		 */
		this.$ = function ( sSelector, oOpts )
		{
			return this.api(true).$( sSelector, oOpts );
		};
		
		
		/**
		 * Almost identical to $ in operation, but in this case returns the data for the matched
		 * rows - as such, the jQuery selector used should match TR row nodes or TD/TH cell nodes
		 * rather than any descendants, so the data can be obtained for the row/cell. If matching
		 * rows are found, the data returned is the original data array/object that was used to
		 * create the row (or a generated array if from a DOM source).
		 *
		 * This method is often useful in-combination with $ where both functions are given the
		 * same parameters and the array indexes will match identically.
		 *  @param {string|node|jQuery} sSelector jQuery selector or node collection to act on
		 *  @param {object} [oOpts] Optional parameters for modifying the rows to be included
		 *  @param {string} [oOpts.filter=none] Select elements that meet the current filter
		 *    criterion ("applied") or all elements (i.e. no filter).
		 *  @param {string} [oOpts.order=current] Order of the data in the processed array.
		 *    Can be either 'current', whereby the current sorting of the table is used, or
		 *    'original' whereby the original order the data was read into the table is used.
		 *  @param {string} [oOpts.page=all] Limit the selection to the currently displayed page
		 *    ("current") or not ("all"). If 'current' is given, then order is assumed to be
		 *    'current' and filter is 'applied', regardless of what they might be given as.
		 *  @returns {array} Data for the matched elements. If any elements, as a result of the
		 *    selector, were not TR, TD or TH elements in the DataTable, they will have a null
		 *    entry in the array.
		 *  @dtopt API
		 *  @deprecated Since v1.10
		 *
		 *  @example
		 *    $(document).ready(function() {
		 *      var oTable = $('#example').dataTable();
		 *
		 *      // Get the data from the first row in the table
		 *      var data = oTable._('tr:first');
		 *
		 *      // Do something useful with the data
		 *      alert( "First cell is: "+data[0] );
		 *    } );
		 *
		 *  @example
		 *    $(document).ready(function() {
		 *      var oTable = $('#example').dataTable();
		 *
		 *      // Filter to 'Webkit' and get all data for
		 *      oTable.fnFilter('Webkit');
		 *      var data = oTable._('tr', {"search": "applied"});
		 *
		 *      // Do something with the data
		 *      alert( data.length+" rows matched the search" );
		 *    } );
		 */
		this._ = function ( sSelector, oOpts )
		{
			return this.api(true).rows( sSelector, oOpts ).data();
		};
		
		
		/**
		 * Create a DataTables Api instance, with the currently selected tables for
		 * the Api's context.
		 * @param {boolean} [traditional=false] Set the API instance's context to be
		 *   only the table referred to by the `DataTable.ext.iApiIndex` option, as was
		 *   used in the API presented by DataTables 1.9- (i.e. the traditional mode),
		 *   or if all tables captured in the jQuery object should be used.
		 * @return {DataTables.Api}
		 */
		this.api = function ( traditional )
		{
			return traditional ?
				new _Api(
					_fnSettingsFromNode( this[ _ext.iApiIndex ] )
				) :
				new _Api( this );
		};
		
		
		/**
		 * Add a single new row or multiple rows of data to the table. Please note
		 * that this is suitable for client-side processing only - if you are using
		 * server-side processing (i.e. "bServerSide": true), then to add data, you
		 * must add it to the data source, i.e. the server-side, through an Ajax call.
		 *  @param {array|object} data The data to be added to the table. This can be:
		 *    <ul>
		 *      <li>1D array of data - add a single row with the data provided</li>
		 *      <li>2D array of arrays - add multiple rows in a single call</li>
		 *      <li>object - data object when using <i>mData</i></li>
		 *      <li>array of objects - multiple data objects when using <i>mData</i></li>
		 *    </ul>
		 *  @param {bool} [redraw=true] redraw the table or not
		 *  @returns {array} An array of integers, representing the list of indexes in
		 *    <i>aoData</i> ({@link DataTable.models.oSettings}) that have been added to
		 *    the table.
		 *  @dtopt API
		 *  @deprecated Since v1.10
		 *
		 *  @example
		 *    // Global var for counter
		 *    var giCount = 2;
		 *
		 *    $(document).ready(function() {
		 *      $('#example').dataTable();
		 *    } );
		 *
		 *    function fnClickAddRow() {
		 *      $('#example').dataTable().fnAddData( [
		 *        giCount+".1",
		 *        giCount+".2",
		 *        giCount+".3",
		 *        giCount+".4" ]
		 *      );
		 *
		 *      giCount++;
		 *    }
		 */
		this.fnAddData = function( data, redraw )
		{
			var api = this.api( true );
		
			/* Check if we want to add multiple rows or not */
			var rows = $.isArray(data) && ( $.isArray(data[0]) || $.isPlainObject(data[0]) ) ?
				api.rows.add( data ) :
				api.row.add( data );
		
			if ( redraw === undefined || redraw ) {
				api.draw();
			}
		
			return rows.flatten().toArray();
		};
		
		
		/**
		 * This function will make DataTables recalculate the column sizes, based on the data
		 * contained in the table and the sizes applied to the columns (in the DOM, CSS or
		 * through the sWidth parameter). This can be useful when the width of the table's
		 * parent element changes (for example a window resize).
		 *  @param {boolean} [bRedraw=true] Redraw the table or not, you will typically want to
		 *  @dtopt API
		 *  @deprecated Since v1.10
		 *
		 *  @example
		 *    $(document).ready(function() {
		 *      var oTable = $('#example').dataTable( {
		 *        "sScrollY": "200px",
		 *        "bPaginate": false
		 *      } );
		 *
		 *      $(window).on('resize', function () {
		 *        oTable.fnAdjustColumnSizing();
		 *      } );
		 *    } );
		 */
		this.fnAdjustColumnSizing = function ( bRedraw )
		{
			var api = this.api( true ).columns.adjust();
			var settings = api.settings()[0];
			var scroll = settings.oScroll;
		
			if ( bRedraw === undefined || bRedraw ) {
				api.draw( false );
			}
			else if ( scroll.sX !== "" || scroll.sY !== "" ) {
				/* If not redrawing, but scrolling, we want to apply the new column sizes anyway */
				_fnScrollDraw( settings );
			}
		};
		
		
		/**
		 * Quickly and simply clear a table
		 *  @param {bool} [bRedraw=true] redraw the table or not
		 *  @dtopt API
		 *  @deprecated Since v1.10
		 *
		 *  @example
		 *    $(document).ready(function() {
		 *      var oTable = $('#example').dataTable();
		 *
		 *      // Immediately 'nuke' the current rows (perhaps waiting for an Ajax callback...)
		 *      oTable.fnClearTable();
		 *    } );
		 */
		this.fnClearTable = function( bRedraw )
		{
			var api = this.api( true ).clear();
		
			if ( bRedraw === undefined || bRedraw ) {
				api.draw();
			}
		};
		
		
		/**
		 * The exact opposite of 'opening' a row, this function will close any rows which
		 * are currently 'open'.
		 *  @param {node} nTr the table row to 'close'
		 *  @returns {int} 0 on success, or 1 if failed (can't find the row)
		 *  @dtopt API
		 *  @deprecated Since v1.10
		 *
		 *  @example
		 *    $(document).ready(function() {
		 *      var oTable;
		 *
		 *      // 'open' an information row when a row is clicked on
		 *      $('#example tbody tr').click( function () {
		 *        if ( oTable.fnIsOpen(this) ) {
		 *          oTable.fnClose( this );
		 *        } else {
		 *          oTable.fnOpen( this, "Temporary row opened", "info_row" );
		 *        }
		 *      } );
		 *
		 *      oTable = $('#example').dataTable();
		 *    } );
		 */
		this.fnClose = function( nTr )
		{
			this.api( true ).row( nTr ).child.hide();
		};
		
		
		/**
		 * Remove a row for the table
		 *  @param {mixed} target The index of the row from aoData to be deleted, or
		 *    the TR element you want to delete
		 *  @param {function|null} [callBack] Callback function
		 *  @param {bool} [redraw=true] Redraw the table or not
		 *  @returns {array} The row that was deleted
		 *  @dtopt API
		 *  @deprecated Since v1.10
		 *
		 *  @example
		 *    $(document).ready(function() {
		 *      var oTable = $('#example').dataTable();
		 *
		 *      // Immediately remove the first row
		 *      oTable.fnDeleteRow( 0 );
		 *    } );
		 */
		this.fnDeleteRow = function( target, callback, redraw )
		{
			var api = this.api( true );
			var rows = api.rows( target );
			var settings = rows.settings()[0];
			var data = settings.aoData[ rows[0][0] ];
		
			rows.remove();
		
			if ( callback ) {
				callback.call( this, settings, data );
			}
		
			if ( redraw === undefined || redraw ) {
				api.draw();
			}
		
			return data;
		};
		
		
		/**
		 * Restore the table to it's original state in the DOM by removing all of DataTables
		 * enhancements, alterations to the DOM structure of the table and event listeners.
		 *  @param {boolean} [remove=false] Completely remove the table from the DOM
		 *  @dtopt API
		 *  @deprecated Since v1.10
		 *
		 *  @example
		 *    $(document).ready(function() {
		 *      // This example is fairly pointless in reality, but shows how fnDestroy can be used
		 *      var oTable = $('#example').dataTable();
		 *      oTable.fnDestroy();
		 *    } );
		 */
		this.fnDestroy = function ( remove )
		{
			this.api( true ).destroy( remove );
		};
		
		
		/**
		 * Redraw the table
		 *  @param {bool} [complete=true] Re-filter and resort (if enabled) the table before the draw.
		 *  @dtopt API
		 *  @deprecated Since v1.10
		 *
		 *  @example
		 *    $(document).ready(function() {
		 *      var oTable = $('#example').dataTable();
		 *
		 *      // Re-draw the table - you wouldn't want to do it here, but it's an example :-)
		 *      oTable.fnDraw();
		 *    } );
		 */
		this.fnDraw = function( complete )
		{
			// Note that this isn't an exact match to the old call to _fnDraw - it takes
			// into account the new data, but can hold position.
			this.api( true ).draw( complete );
		};
		
		
		/**
		 * Filter the input based on data
		 *  @param {string} sInput String to filter the table on
		 *  @param {int|null} [iColumn] Column to limit filtering to
		 *  @param {bool} [bRegex=false] Treat as regular expression or not
		 *  @param {bool} [bSmart=true] Perform smart filtering or not
		 *  @param {bool} [bShowGlobal=true] Show the input global filter in it's input box(es)
		 *  @param {bool} [bCaseInsensitive=true] Do case-insensitive matching (true) or not (false)
		 *  @dtopt API
		 *  @deprecated Since v1.10
		 *
		 *  @example
		 *    $(document).ready(function() {
		 *      var oTable = $('#example').dataTable();
		 *
		 *      // Sometime later - filter...
		 *      oTable.fnFilter( 'test string' );
		 *    } );
		 */
		this.fnFilter = function( sInput, iColumn, bRegex, bSmart, bShowGlobal, bCaseInsensitive )
		{
			var api = this.api( true );
		
			if ( iColumn === null || iColumn === undefined ) {
				api.search( sInput, bRegex, bSmart, bCaseInsensitive );
			}
			else {
				api.column( iColumn ).search( sInput, bRegex, bSmart, bCaseInsensitive );
			}
		
			api.draw();
		};
		
		
		/**
		 * Get the data for the whole table, an individual row or an individual cell based on the
		 * provided parameters.
		 *  @param {int|node} [src] A TR row node, TD/TH cell node or an integer. If given as
		 *    a TR node then the data source for the whole row will be returned. If given as a
		 *    TD/TH cell node then iCol will be automatically calculated and the data for the
		 *    cell returned. If given as an integer, then this is treated as the aoData internal
		 *    data index for the row (see fnGetPosition) and the data for that row used.
		 *  @param {int} [col] Optional column index that you want the data of.
		 *  @returns {array|object|string} If mRow is undefined, then the data for all rows is
		 *    returned. If mRow is defined, just data for that row, and is iCol is
		 *    defined, only data for the designated cell is returned.
		 *  @dtopt API
		 *  @deprecated Since v1.10
		 *
		 *  @example
		 *    // Row data
		 *    $(document).ready(function() {
		 *      oTable = $('#example').dataTable();
		 *
		 *      oTable.$('tr').click( function () {
		 *        var data = oTable.fnGetData( this );
		 *        // ... do something with the array / object of data for the row
		 *      } );
		 *    } );
		 *
		 *  @example
		 *    // Individual cell data
		 *    $(document).ready(function() {
		 *      oTable = $('#example').dataTable();
		 *
		 *      oTable.$('td').click( function () {
		 *        var sData = oTable.fnGetData( this );
		 *        alert( 'The cell clicked on had the value of '+sData );
		 *      } );
		 *    } );
		 */
		this.fnGetData = function( src, col )
		{
			var api = this.api( true );
		
			if ( src !== undefined ) {
				var type = src.nodeName ? src.nodeName.toLowerCase() : '';
		
				return col !== undefined || type == 'td' || type == 'th' ?
					api.cell( src, col ).data() :
					api.row( src ).data() || null;
			}
		
			return api.data().toArray();
		};
		
		
		/**
		 * Get an array of the TR nodes that are used in the table's body. Note that you will
		 * typically want to use the '$' API method in preference to this as it is more
		 * flexible.
		 *  @param {int} [iRow] Optional row index for the TR element you want
		 *  @returns {array|node} If iRow is undefined, returns an array of all TR elements
		 *    in the table's body, or iRow is defined, just the TR element requested.
		 *  @dtopt API
		 *  @deprecated Since v1.10
		 *
		 *  @example
		 *    $(document).ready(function() {
		 *      var oTable = $('#example').dataTable();
		 *
		 *      // Get the nodes from the table
		 *      var nNodes = oTable.fnGetNodes( );
		 *    } );
		 */
		this.fnGetNodes = function( iRow )
		{
			var api = this.api( true );
		
			return iRow !== undefined ?
				api.row( iRow ).node() :
				api.rows().nodes().flatten().toArray();
		};
		
		
		/**
		 * Get the array indexes of a particular cell from it's DOM element
		 * and column index including hidden columns
		 *  @param {node} node this can either be a TR, TD or TH in the table's body
		 *  @returns {int} If nNode is given as a TR, then a single index is returned, or
		 *    if given as a cell, an array of [row index, column index (visible),
		 *    column index (all)] is given.
		 *  @dtopt API
		 *  @deprecated Since v1.10
		 *
		 *  @example
		 *    $(document).ready(function() {
		 *      $('#example tbody td').click( function () {
		 *        // Get the position of the current data from the node
		 *        var aPos = oTable.fnGetPosition( this );
		 *
		 *        // Get the data array for this row
		 *        var aData = oTable.fnGetData( aPos[0] );
		 *
		 *        // Update the data array and return the value
		 *        aData[ aPos[1] ] = 'clicked';
		 *        this.innerHTML = 'clicked';
		 *      } );
		 *
		 *      // Init DataTables
		 *      oTable = $('#example').dataTable();
		 *    } );
		 */
		this.fnGetPosition = function( node )
		{
			var api = this.api( true );
			var nodeName = node.nodeName.toUpperCase();
		
			if ( nodeName == 'TR' ) {
				return api.row( node ).index();
			}
			else if ( nodeName == 'TD' || nodeName == 'TH' ) {
				var cell = api.cell( node ).index();
		
				return [
					cell.row,
					cell.columnVisible,
					cell.column
				];
			}
			return null;
		};
		
		
		/**
		 * Check to see if a row is 'open' or not.
		 *  @param {node} nTr the table row to check
		 *  @returns {boolean} true if the row is currently open, false otherwise
		 *  @dtopt API
		 *  @deprecated Since v1.10
		 *
		 *  @example
		 *    $(document).ready(function() {
		 *      var oTable;
		 *
		 *      // 'open' an information row when a row is clicked on
		 *      $('#example tbody tr').click( function () {
		 *        if ( oTable.fnIsOpen(this) ) {
		 *          oTable.fnClose( this );
		 *        } else {
		 *          oTable.fnOpen( this, "Temporary row opened", "info_row" );
		 *        }
		 *      } );
		 *
		 *      oTable = $('#example').dataTable();
		 *    } );
		 */
		this.fnIsOpen = function( nTr )
		{
			return this.api( true ).row( nTr ).child.isShown();
		};
		
		
		/**
		 * This function will place a new row directly after a row which is currently
		 * on display on the page, with the HTML contents that is passed into the
		 * function. This can be used, for example, to ask for confirmation that a
		 * particular record should be deleted.
		 *  @param {node} nTr The table row to 'open'
		 *  @param {string|node|jQuery} mHtml The HTML to put into the row
		 *  @param {string} sClass Class to give the new TD cell
		 *  @returns {node} The row opened. Note that if the table row passed in as the
		 *    first parameter, is not found in the table, this method will silently
		 *    return.
		 *  @dtopt API
		 *  @deprecated Since v1.10
		 *
		 *  @example
		 *    $(document).ready(function() {
		 *      var oTable;
		 *
		 *      // 'open' an information row when a row is clicked on
		 *      $('#example tbody tr').click( function () {
		 *        if ( oTable.fnIsOpen(this) ) {
		 *          oTable.fnClose( this );
		 *        } else {
		 *          oTable.fnOpen( this, "Temporary row opened", "info_row" );
		 *        }
		 *      } );
		 *
		 *      oTable = $('#example').dataTable();
		 *    } );
		 */
		this.fnOpen = function( nTr, mHtml, sClass )
		{
			return this.api( true )
				.row( nTr )
				.child( mHtml, sClass )
				.show()
				.child()[0];
		};
		
		
		/**
		 * Change the pagination - provides the internal logic for pagination in a simple API
		 * function. With this function you can have a DataTables table go to the next,
		 * previous, first or last pages.
		 *  @param {string|int} mAction Paging action to take: "first", "previous", "next" or "last"
		 *    or page number to jump to (integer), note that page 0 is the first page.
		 *  @param {bool} [bRedraw=true] Redraw the table or not
		 *  @dtopt API
		 *  @deprecated Since v1.10
		 *
		 *  @example
		 *    $(document).ready(function() {
		 *      var oTable = $('#example').dataTable();
		 *      oTable.fnPageChange( 'next' );
		 *    } );
		 */
		this.fnPageChange = function ( mAction, bRedraw )
		{
			var api = this.api( true ).page( mAction );
		
			if ( bRedraw === undefined || bRedraw ) {
				api.draw(false);
			}
		};
		
		
		/**
		 * Show a particular column
		 *  @param {int} iCol The column whose display should be changed
		 *  @param {bool} bShow Show (true) or hide (false) the column
		 *  @param {bool} [bRedraw=true] Redraw the table or not
		 *  @dtopt API
		 *  @deprecated Since v1.10
		 *
		 *  @example
		 *    $(document).ready(function() {
		 *      var oTable = $('#example').dataTable();
		 *
		 *      // Hide the second column after initialisation
		 *      oTable.fnSetColumnVis( 1, false );
		 *    } );
		 */
		this.fnSetColumnVis = function ( iCol, bShow, bRedraw )
		{
			var api = this.api( true ).column( iCol ).visible( bShow );
		
			if ( bRedraw === undefined || bRedraw ) {
				api.columns.adjust().draw();
			}
		};
		
		
		/**
		 * Get the settings for a particular table for external manipulation
		 *  @returns {object} DataTables settings object. See
		 *    {@link DataTable.models.oSettings}
		 *  @dtopt API
		 *  @deprecated Since v1.10
		 *
		 *  @example
		 *    $(document).ready(function() {
		 *      var oTable = $('#example').dataTable();
		 *      var oSettings = oTable.fnSettings();
		 *
		 *      // Show an example parameter from the settings
		 *      alert( oSettings._iDisplayStart );
		 *    } );
		 */
		this.fnSettings = function()
		{
			return _fnSettingsFromNode( this[_ext.iApiIndex] );
		};
		
		
		/**
		 * Sort the table by a particular column
		 *  @param {int} iCol the data index to sort on. Note that this will not match the
		 *    'display index' if you have hidden data entries
		 *  @dtopt API
		 *  @deprecated Since v1.10
		 *
		 *  @example
		 *    $(document).ready(function() {
		 *      var oTable = $('#example').dataTable();
		 *
		 *      // Sort immediately with columns 0 and 1
		 *      oTable.fnSort( [ [0,'asc'], [1,'asc'] ] );
		 *    } );
		 */
		this.fnSort = function( aaSort )
		{
			this.api( true ).order( aaSort ).draw();
		};
		
		
		/**
		 * Attach a sort listener to an element for a given column
		 *  @param {node} nNode the element to attach the sort listener to
		 *  @param {int} iColumn the column that a click on this node will sort on
		 *  @param {function} [fnCallback] callback function when sort is run
		 *  @dtopt API
		 *  @deprecated Since v1.10
		 *
		 *  @example
		 *    $(document).ready(function() {
		 *      var oTable = $('#example').dataTable();
		 *
		 *      // Sort on column 1, when 'sorter' is clicked on
		 *      oTable.fnSortListener( document.getElementById('sorter'), 1 );
		 *    } );
		 */
		this.fnSortListener = function( nNode, iColumn, fnCallback )
		{
			this.api( true ).order.listener( nNode, iColumn, fnCallback );
		};
		
		
		/**
		 * Update a table cell or row - this method will accept either a single value to
		 * update the cell with, an array of values with one element for each column or
		 * an object in the same format as the original data source. The function is
		 * self-referencing in order to make the multi column updates easier.
		 *  @param {object|array|string} mData Data to update the cell/row with
		 *  @param {node|int} mRow TR element you want to update or the aoData index
		 *  @param {int} [iColumn] The column to update, give as null or undefined to
		 *    update a whole row.
		 *  @param {bool} [bRedraw=true] Redraw the table or not
		 *  @param {bool} [bAction=true] Perform pre-draw actions or not
		 *  @returns {int} 0 on success, 1 on error
		 *  @dtopt API
		 *  @deprecated Since v1.10
		 *
		 *  @example
		 *    $(document).ready(function() {
		 *      var oTable = $('#example').dataTable();
		 *      oTable.fnUpdate( 'Example update', 0, 0 ); // Single cell
		 *      oTable.fnUpdate( ['a', 'b', 'c', 'd', 'e'], $('tbody tr')[0] ); // Row
		 *    } );
		 */
		this.fnUpdate = function( mData, mRow, iColumn, bRedraw, bAction )
		{
			var api = this.api( true );
		
			if ( iColumn === undefined || iColumn === null ) {
				api.row( mRow ).data( mData );
			}
			else {
				api.cell( mRow, iColumn ).data( mData );
			}
		
			if ( bAction === undefined || bAction ) {
				api.columns.adjust();
			}
		
			if ( bRedraw === undefined || bRedraw ) {
				api.draw();
			}
			return 0;
		};
		
		
		/**
		 * Provide a common method for plug-ins to check the version of DataTables being used, in order
		 * to ensure compatibility.
		 *  @param {string} sVersion Version string to check for, in the format "X.Y.Z". Note that the
		 *    formats "X" and "X.Y" are also acceptable.
		 *  @returns {boolean} true if this version of DataTables is greater or equal to the required
		 *    version, or false if this version of DataTales is not suitable
		 *  @method
		 *  @dtopt API
		 *  @deprecated Since v1.10
		 *
		 *  @example
		 *    $(document).ready(function() {
		 *      var oTable = $('#example').dataTable();
		 *      alert( oTable.fnVersionCheck( '1.9.0' ) );
		 *    } );
		 */
		this.fnVersionCheck = _ext.fnVersionCheck;
		

		var _that = this;
		var emptyInit = options === undefined;
		var len = this.length;

		if ( emptyInit ) {
			options = {};
		}

		this.oApi = this.internal = _ext.internal;

		// Extend with old style plug-in API methods
		for ( var fn in DataTable.ext.internal ) {
			if ( fn ) {
				this[fn] = _fnExternApiFunc(fn);
			}
		}

		this.each(function() {
			// For each initialisation we want to give it a clean initialisation
			// object that can be bashed around
			var o = {};
			var oInit = len > 1 ? // optimisation for single table case
				_fnExtend( o, options, true ) :
				options;

			/*global oInit,_that,emptyInit*/
			var i=0, iLen, j, jLen, k, kLen;
			var sId = this.getAttribute( 'id' );
			var bInitHandedOff = false;
			var defaults = DataTable.defaults;
			var $this = $(this);
			
			
			/* Sanity check */
			if ( this.nodeName.toLowerCase() != 'table' )
			{
				_fnLog( null, 0, 'Non-table node initialisation ('+this.nodeName+')', 2 );
				return;
			}
			
			/* Backwards compatibility for the defaults */
			_fnCompatOpts( defaults );
			_fnCompatCols( defaults.column );
			
			/* Convert the camel-case defaults to Hungarian */
			_fnCamelToHungarian( defaults, defaults, true );
			_fnCamelToHungarian( defaults.column, defaults.column, true );
			
			/* Setting up the initialisation object */
			_fnCamelToHungarian( defaults, $.extend( oInit, $this.data() ) );
			
			
			
			/* Check to see if we are re-initialising a table */
			var allSettings = DataTable.settings;
			for ( i=0, iLen=allSettings.length ; i<iLen ; i++ )
			{
				var s = allSettings[i];
			
				/* Base check on table node */
				if (
					s.nTable == this ||
					(s.nTHead && s.nTHead.parentNode == this) ||
					(s.nTFoot && s.nTFoot.parentNode == this)
				) {
					var bRetrieve = oInit.bRetrieve !== undefined ? oInit.bRetrieve : defaults.bRetrieve;
					var bDestroy = oInit.bDestroy !== undefined ? oInit.bDestroy : defaults.bDestroy;
			
					if ( emptyInit || bRetrieve )
					{
						return s.oInstance;
					}
					else if ( bDestroy )
					{
						s.oInstance.fnDestroy();
						break;
					}
					else
					{
						_fnLog( s, 0, 'Cannot reinitialise DataTable', 3 );
						return;
					}
				}
			
				/* If the element we are initialising has the same ID as a table which was previously
				 * initialised, but the table nodes don't match (from before) then we destroy the old
				 * instance by simply deleting it. This is under the assumption that the table has been
				 * destroyed by other methods. Anyone using non-id selectors will need to do this manually
				 */
				if ( s.sTableId == this.id )
				{
					allSettings.splice( i, 1 );
					break;
				}
			}
			
			/* Ensure the table has an ID - required for accessibility */
			if ( sId === null || sId === "" )
			{
				sId = "DataTables_Table_"+(DataTable.ext._unique++);
				this.id = sId;
			}
			
			/* Create the settings object for this table and set some of the default parameters */
			var oSettings = $.extend( true, {}, DataTable.models.oSettings, {
				"sDestroyWidth": $this[0].style.width,
				"sInstance":     sId,
				"sTableId":      sId
			} );
			oSettings.nTable = this;
			oSettings.oApi   = _that.internal;
			oSettings.oInit  = oInit;
			
			allSettings.push( oSettings );
			
			// Need to add the instance after the instance after the settings object has been added
			// to the settings array, so we can self reference the table instance if more than one
			oSettings.oInstance = (_that.length===1) ? _that : $this.dataTable();
			
			// Backwards compatibility, before we apply all the defaults
			_fnCompatOpts( oInit );
			_fnLanguageCompat( oInit.oLanguage );
			
			// If the length menu is given, but the init display length is not, use the length menu
			if ( oInit.aLengthMenu && ! oInit.iDisplayLength )
			{
				oInit.iDisplayLength = $.isArray( oInit.aLengthMenu[0] ) ?
					oInit.aLengthMenu[0][0] : oInit.aLengthMenu[0];
			}
			
			// Apply the defaults and init options to make a single init object will all
			// options defined from defaults and instance options.
			oInit = _fnExtend( $.extend( true, {}, defaults ), oInit );
			
			
			// Map the initialisation options onto the settings object
			_fnMap( oSettings.oFeatures, oInit, [
				"bPaginate",
				"bLengthChange",
				"bFilter",
				"bSort",
				"bSortMulti",
				"bInfo",
				"bProcessing",
				"bAutoWidth",
				"bSortClasses",
				"bServerSide",
				"bDeferRender"
			] );
			_fnMap( oSettings, oInit, [
				"asStripeClasses",
				"ajax",
				"fnServerData",
				"fnFormatNumber",
				"sServerMethod",
				"aaSorting",
				"aaSortingFixed",
				"aLengthMenu",
				"sPaginationType",
				"sAjaxSource",
				"sAjaxDataProp",
				"iStateDuration",
				"sDom",
				"bSortCellsTop",
				"iTabIndex",
				"fnStateLoadCallback",
				"fnStateSaveCallback",
				"renderer",
				"searchDelay",
				"rowId",
				[ "iCookieDuration", "iStateDuration" ], // backwards compat
				[ "oSearch", "oPreviousSearch" ],
				[ "aoSearchCols", "aoPreSearchCols" ],
				[ "iDisplayLength", "_iDisplayLength" ]
			] );
			_fnMap( oSettings.oScroll, oInit, [
				[ "sScrollX", "sX" ],
				[ "sScrollXInner", "sXInner" ],
				[ "sScrollY", "sY" ],
				[ "bScrollCollapse", "bCollapse" ]
			] );
			_fnMap( oSettings.oLanguage, oInit, "fnInfoCallback" );
			
			/* Callback functions which are array driven */
			_fnCallbackReg( oSettings, 'aoDrawCallback',       oInit.fnDrawCallback,      'user' );
			_fnCallbackReg( oSettings, 'aoServerParams',       oInit.fnServerParams,      'user' );
			_fnCallbackReg( oSettings, 'aoStateSaveParams',    oInit.fnStateSaveParams,   'user' );
			_fnCallbackReg( oSettings, 'aoStateLoadParams',    oInit.fnStateLoadParams,   'user' );
			_fnCallbackReg( oSettings, 'aoStateLoaded',        oInit.fnStateLoaded,       'user' );
			_fnCallbackReg( oSettings, 'aoRowCallback',        oInit.fnRowCallback,       'user' );
			_fnCallbackReg( oSettings, 'aoRowCreatedCallback', oInit.fnCreatedRow,        'user' );
			_fnCallbackReg( oSettings, 'aoHeaderCallback',     oInit.fnHeaderCallback,    'user' );
			_fnCallbackReg( oSettings, 'aoFooterCallback',     oInit.fnFooterCallback,    'user' );
			_fnCallbackReg( oSettings, 'aoInitComplete',       oInit.fnInitComplete,      'user' );
			_fnCallbackReg( oSettings, 'aoPreDrawCallback',    oInit.fnPreDrawCallback,   'user' );
			
			oSettings.rowIdFn = _fnGetObjectDataFn( oInit.rowId );
			
			/* Browser support detection */
			_fnBrowserDetect( oSettings );
			
			var oClasses = oSettings.oClasses;
			
			$.extend( oClasses, DataTable.ext.classes, oInit.oClasses );
			$this.addClass( oClasses.sTable );
			
			
			if ( oSettings.iInitDisplayStart === undefined )
			{
				/* Display start point, taking into account the save saving */
				oSettings.iInitDisplayStart = oInit.iDisplayStart;
				oSettings._iDisplayStart = oInit.iDisplayStart;
			}
			
			if ( oInit.iDeferLoading !== null )
			{
				oSettings.bDeferLoading = true;
				var tmp = $.isArray( oInit.iDeferLoading );
				oSettings._iRecordsDisplay = tmp ? oInit.iDeferLoading[0] : oInit.iDeferLoading;
				oSettings._iRecordsTotal = tmp ? oInit.iDeferLoading[1] : oInit.iDeferLoading;
			}
			
			/* Language definitions */
			var oLanguage = oSettings.oLanguage;
			$.extend( true, oLanguage, oInit.oLanguage );
			
			if ( oLanguage.sUrl )
			{
				/* Get the language definitions from a file - because this Ajax call makes the language
				 * get async to the remainder of this function we use bInitHandedOff to indicate that
				 * _fnInitialise will be fired by the returned Ajax handler, rather than the constructor
				 */
				$.ajax( {
					dataType: 'json',
					url: oLanguage.sUrl,
					success: function ( json ) {
						_fnLanguageCompat( json );
						_fnCamelToHungarian( defaults.oLanguage, json );
						$.extend( true, oLanguage, json );
						_fnInitialise( oSettings );
					},
					error: function () {
						// Error occurred loading language file, continue on as best we can
						_fnInitialise( oSettings );
					}
				} );
				bInitHandedOff = true;
			}
			
			/*
			 * Stripes
			 */
			if ( oInit.asStripeClasses === null )
			{
				oSettings.asStripeClasses =[
					oClasses.sStripeOdd,
					oClasses.sStripeEven
				];
			}
			
			/* Remove row stripe classes if they are already on the table row */
			var stripeClasses = oSettings.asStripeClasses;
			var rowOne = $this.children('tbody').find('tr').eq(0);
			if ( $.inArray( true, $.map( stripeClasses, function(el, i) {
				return rowOne.hasClass(el);
			} ) ) !== -1 ) {
				$('tbody tr', this).removeClass( stripeClasses.join(' ') );
				oSettings.asDestroyStripes = stripeClasses.slice();
			}
			
			/*
			 * Columns
			 * See if we should load columns automatically or use defined ones
			 */
			var anThs = [];
			var aoColumnsInit;
			var nThead = this.getElementsByTagName('thead');
			if ( nThead.length !== 0 )
			{
				_fnDetectHeader( oSettings.aoHeader, nThead[0] );
				anThs = _fnGetUniqueThs( oSettings );
			}
			
			/* If not given a column array, generate one with nulls */
			if ( oInit.aoColumns === null )
			{
				aoColumnsInit = [];
				for ( i=0, iLen=anThs.length ; i<iLen ; i++ )
				{
					aoColumnsInit.push( null );
				}
			}
			else
			{
				aoColumnsInit = oInit.aoColumns;
			}
			
			/* Add the columns */
			for ( i=0, iLen=aoColumnsInit.length ; i<iLen ; i++ )
			{
				_fnAddColumn( oSettings, anThs ? anThs[i] : null );
			}
			
			/* Apply the column definitions */
			_fnApplyColumnDefs( oSettings, oInit.aoColumnDefs, aoColumnsInit, function (iCol, oDef) {
				_fnColumnOptions( oSettings, iCol, oDef );
			} );
			
			/* HTML5 attribute detection - build an mData object automatically if the
			 * attributes are found
			 */
			if ( rowOne.length ) {
				var a = function ( cell, name ) {
					return cell.getAttribute( 'data-'+name ) !== null ? name : null;
				};
			
				$( rowOne[0] ).children('th, td').each( function (i, cell) {
					var col = oSettings.aoColumns[i];
			
					if ( col.mData === i ) {
						var sort = a( cell, 'sort' ) || a( cell, 'order' );
						var filter = a( cell, 'filter' ) || a( cell, 'search' );
			
						if ( sort !== null || filter !== null ) {
							col.mData = {
								_:      i+'.display',
								sort:   sort !== null   ? i+'.@data-'+sort   : undefined,
								type:   sort !== null   ? i+'.@data-'+sort   : undefined,
								filter: filter !== null ? i+'.@data-'+filter : undefined
							};
			
							_fnColumnOptions( oSettings, i );
						}
					}
				} );
			}
			
			var features = oSettings.oFeatures;
			var loadedInit = function () {
				/*
				 * Sorting
				 * @todo For modularisation (1.11) this needs to do into a sort start up handler
				 */
			
				// If aaSorting is not defined, then we use the first indicator in asSorting
				// in case that has been altered, so the default sort reflects that option
				if ( oInit.aaSorting === undefined ) {
					var sorting = oSettings.aaSorting;
					for ( i=0, iLen=sorting.length ; i<iLen ; i++ ) {
						sorting[i][1] = oSettings.aoColumns[ i ].asSorting[0];
					}
				}
			
				/* Do a first pass on the sorting classes (allows any size changes to be taken into
				 * account, and also will apply sorting disabled classes if disabled
				 */
				_fnSortingClasses( oSettings );
			
				if ( features.bSort ) {
					_fnCallbackReg( oSettings, 'aoDrawCallback', function () {
						if ( oSettings.bSorted ) {
							var aSort = _fnSortFlatten( oSettings );
							var sortedColumns = {};
			
							$.each( aSort, function (i, val) {
								sortedColumns[ val.src ] = val.dir;
							} );
			
							_fnCallbackFire( oSettings, null, 'order', [oSettings, aSort, sortedColumns] );
							_fnSortAria( oSettings );
						}
					} );
				}
			
				_fnCallbackReg( oSettings, 'aoDrawCallback', function () {
					if ( oSettings.bSorted || _fnDataSource( oSettings ) === 'ssp' || features.bDeferRender ) {
						_fnSortingClasses( oSettings );
					}
				}, 'sc' );
			
			
				/*
				 * Final init
				 * Cache the header, body and footer as required, creating them if needed
				 */
			
				// Work around for Webkit bug 83867 - store the caption-side before removing from doc
				var captions = $this.children('caption').each( function () {
					this._captionSide = $(this).css('caption-side');
				} );
			
				var thead = $this.children('thead');
				if ( thead.length === 0 ) {
					thead = $('<thead/>').appendTo($this);
				}
				oSettings.nTHead = thead[0];
			
				var tbody = $this.children('tbody');
				if ( tbody.length === 0 ) {
					tbody = $('<tbody/>').appendTo($this);
				}
				oSettings.nTBody = tbody[0];
			
				var tfoot = $this.children('tfoot');
				if ( tfoot.length === 0 && captions.length > 0 && (oSettings.oScroll.sX !== "" || oSettings.oScroll.sY !== "") ) {
					// If we are a scrolling table, and no footer has been given, then we need to create
					// a tfoot element for the caption element to be appended to
					tfoot = $('<tfoot/>').appendTo($this);
				}
			
				if ( tfoot.length === 0 || tfoot.children().length === 0 ) {
					$this.addClass( oClasses.sNoFooter );
				}
				else if ( tfoot.length > 0 ) {
					oSettings.nTFoot = tfoot[0];
					_fnDetectHeader( oSettings.aoFooter, oSettings.nTFoot );
				}
			
				/* Check if there is data passing into the constructor */
				if ( oInit.aaData ) {
					for ( i=0 ; i<oInit.aaData.length ; i++ ) {
						_fnAddData( oSettings, oInit.aaData[ i ] );
					}
				}
				else if ( oSettings.bDeferLoading || _fnDataSource( oSettings ) == 'dom' ) {
					/* Grab the data from the page - only do this when deferred loading or no Ajax
					 * source since there is no point in reading the DOM data if we are then going
					 * to replace it with Ajax data
					 */
					_fnAddTr( oSettings, $(oSettings.nTBody).children('tr') );
				}
			
				/* Copy the data index array */
				oSettings.aiDisplay = oSettings.aiDisplayMaster.slice();
			
				/* Initialisation complete - table can be drawn */
				oSettings.bInitialised = true;
			
				/* Check if we need to initialise the table (it might not have been handed off to the
				 * language processor)
				 */
				if ( bInitHandedOff === false ) {
					_fnInitialise( oSettings );
				}
			};
			
			/* Must be done after everything which can be overridden by the state saving! */
			if ( oInit.bStateSave )
			{
				features.bStateSave = true;
				_fnCallbackReg( oSettings, 'aoDrawCallback', _fnSaveState, 'state_save' );
				_fnLoadState( oSettings, oInit, loadedInit );
			}
			else {
				loadedInit();
			}
			
		} );
		_that = null;
		return this;
	};

	
	/*
	 * It is useful to have variables which are scoped locally so only the
	 * DataTables functions can access them and they don't leak into global space.
	 * At the same time these functions are often useful over multiple files in the
	 * core and API, so we list, or at least document, all variables which are used
	 * by DataTables as private variables here. This also ensures that there is no
	 * clashing of variable names and that they can easily referenced for reuse.
	 */
	
	
	// Defined else where
	//  _selector_run
	//  _selector_opts
	//  _selector_first
	//  _selector_row_indexes
	
	var _ext; // DataTable.ext
	var _Api; // DataTable.Api
	var _api_register; // DataTable.Api.register
	var _api_registerPlural; // DataTable.Api.registerPlural
	
	var _re_dic = {};
	var _re_new_lines = /[\r\n]/g;
	var _re_html = /<.*?>/g;
	
	// This is not strict ISO8601 - Date.parse() is quite lax, although
	// implementations differ between browsers.
	var _re_date = /^\d{2,4}[\.\/\-]\d{1,2}[\.\/\-]\d{1,2}([T ]{1}\d{1,2}[:\.]\d{2}([\.:]\d{2})?)?$/;
	
	// Escape regular expression special characters
	var _re_escape_regex = new RegExp( '(\\' + [ '/', '.', '*', '+', '?', '|', '(', ')', '[', ']', '{', '}', '\\', '$', '^', '-' ].join('|\\') + ')', 'g' );
	
	// http://en.wikipedia.org/wiki/Foreign_exchange_market
	// - \u20BD - Russian ruble.
	// - \u20a9 - South Korean Won
	// - \u20BA - Turkish Lira
	// - \u20B9 - Indian Rupee
	// - R - Brazil (R$) and South Africa
	// - fr - Swiss Franc
	// - kr - Swedish krona, Norwegian krone and Danish krone
	// - \u2009 is thin space and \u202F is narrow no-break space, both used in many
	// - Ƀ - Bitcoin
	// - Ξ - Ethereum
	//   standards as thousands separators.
	var _re_formatted_numeric = /[',$£€¥%\u2009\u202F\u20BD\u20a9\u20BArfkɃΞ]/gi;
	
	
	var _empty = function ( d ) {
		return !d || d === true || d === '-' ? true : false;
	};
	
	
	var _intVal = function ( s ) {
		var integer = parseInt( s, 10 );
		return !isNaN(integer) && isFinite(s) ? integer : null;
	};
	
	// Convert from a formatted number with characters other than `.` as the
	// decimal place, to a Javascript number
	var _numToDecimal = function ( num, decimalPoint ) {
		// Cache created regular expressions for speed as this function is called often
		if ( ! _re_dic[ decimalPoint ] ) {
			_re_dic[ decimalPoint ] = new RegExp( _fnEscapeRegex( decimalPoint ), 'g' );
		}
		return typeof num === 'string' && decimalPoint !== '.' ?
			num.replace( /\./g, '' ).replace( _re_dic[ decimalPoint ], '.' ) :
			num;
	};
	
	
	var _isNumber = function ( d, decimalPoint, formatted ) {
		var strType = typeof d === 'string';
	
		// If empty return immediately so there must be a number if it is a
		// formatted string (this stops the string "k", or "kr", etc being detected
		// as a formatted number for currency
		if ( _empty( d ) ) {
			return true;
		}
	
		if ( decimalPoint && strType ) {
			d = _numToDecimal( d, decimalPoint );
		}
	
		if ( formatted && strType ) {
			d = d.replace( _re_formatted_numeric, '' );
		}
	
		return !isNaN( parseFloat(d) ) && isFinite( d );
	};
	
	
	// A string without HTML in it can be considered to be HTML still
	var _isHtml = function ( d ) {
		return _empty( d ) || typeof d === 'string';
	};
	
	
	var _htmlNumeric = function ( d, decimalPoint, formatted ) {
		if ( _empty( d ) ) {
			return true;
		}
	
		var html = _isHtml( d );
		return ! html ?
			null :
			_isNumber( _stripHtml( d ), decimalPoint, formatted ) ?
				true :
				null;
	};
	
	
	var _pluck = function ( a, prop, prop2 ) {
		var out = [];
		var i=0, ien=a.length;
	
		// Could have the test in the loop for slightly smaller code, but speed
		// is essential here
		if ( prop2 !== undefined ) {
			for ( ; i<ien ; i++ ) {
				if ( a[i] && a[i][ prop ] ) {
					out.push( a[i][ prop ][ prop2 ] );
				}
			}
		}
		else {
			for ( ; i<ien ; i++ ) {
				if ( a[i] ) {
					out.push( a[i][ prop ] );
				}
			}
		}
	
		return out;
	};
	
	
	// Basically the same as _pluck, but rather than looping over `a` we use `order`
	// as the indexes to pick from `a`
	var _pluck_order = function ( a, order, prop, prop2 )
	{
		var out = [];
		var i=0, ien=order.length;
	
		// Could have the test in the loop for slightly smaller code, but speed
		// is essential here
		if ( prop2 !== undefined ) {
			for ( ; i<ien ; i++ ) {
				if ( a[ order[i] ][ prop ] ) {
					out.push( a[ order[i] ][ prop ][ prop2 ] );
				}
			}
		}
		else {
			for ( ; i<ien ; i++ ) {
				out.push( a[ order[i] ][ prop ] );
			}
		}
	
		return out;
	};
	
	
	var _range = function ( len, start )
	{
		var out = [];
		var end;
	
		if ( start === undefined ) {
			start = 0;
			end = len;
		}
		else {
			end = start;
			start = len;
		}
	
		for ( var i=start ; i<end ; i++ ) {
			out.push( i );
		}
	
		return out;
	};
	
	
	var _removeEmpty = function ( a )
	{
		var out = [];
	
		for ( var i=0, ien=a.length ; i<ien ; i++ ) {
			if ( a[i] ) { // careful - will remove all falsy values!
				out.push( a[i] );
			}
		}
	
		return out;
	};
	
	
	var _stripHtml = function ( d ) {
		return d.replace( _re_html, '' );
	};
	
	
	/**
	 * Determine if all values in the array are unique. This means we can short
	 * cut the _unique method at the cost of a single loop. A sorted array is used
	 * to easily check the values.
	 *
	 * @param  {array} src Source array
	 * @return {boolean} true if all unique, false otherwise
	 * @ignore
	 */
	var _areAllUnique = function ( src ) {
		if ( src.length < 2 ) {
			return true;
		}
	
		var sorted = src.slice().sort();
		var last = sorted[0];
	
		for ( var i=1, ien=sorted.length ; i<ien ; i++ ) {
			if ( sorted[i] === last ) {
				return false;
			}
	
			last = sorted[i];
		}
	
		return true;
	};
	
	
	/**
	 * Find the unique elements in a source array.
	 *
	 * @param  {array} src Source array
	 * @return {array} Array of unique items
	 * @ignore
	 */
	var _unique = function ( src )
	{
		if ( _areAllUnique( src ) ) {
			return src.slice();
		}
	
		// A faster unique method is to use object keys to identify used values,
		// but this doesn't work with arrays or objects, which we must also
		// consider. See jsperf.com/compare-array-unique-versions/4 for more
		// information.
		var
			out = [],
			val,
			i, ien=src.length,
			j, k=0;
	
		again: for ( i=0 ; i<ien ; i++ ) {
			val = src[i];
	
			for ( j=0 ; j<k ; j++ ) {
				if ( out[j] === val ) {
					continue again;
				}
			}
	
			out.push( val );
			k++;
		}
	
		return out;
	};
	
	
	/**
	 * DataTables utility methods
	 * 
	 * This namespace provides helper methods that DataTables uses internally to
	 * create a DataTable, but which are not exclusively used only for DataTables.
	 * These methods can be used by extension authors to save the duplication of
	 * code.
	 *
	 *  @namespace
	 */
	DataTable.util = {
		/**
		 * Throttle the calls to a function. Arguments and context are maintained
		 * for the throttled function.
		 *
		 * @param {function} fn Function to be called
		 * @param {integer} freq Call frequency in mS
		 * @return {function} Wrapped function
		 */
		throttle: function ( fn, freq ) {
			var
				frequency = freq !== undefined ? freq : 200,
				last,
				timer;
	
			return function () {
				var
					that = this,
					now  = +new Date(),
					args = arguments;
	
				if ( last && now < last + frequency ) {
					clearTimeout( timer );
	
					timer = setTimeout( function () {
						last = undefined;
						fn.apply( that, args );
					}, frequency );
				}
				else {
					last = now;
					fn.apply( that, args );
				}
			};
		},
	
	
		/**
		 * Escape a string such that it can be used in a regular expression
		 *
		 *  @param {string} val string to escape
		 *  @returns {string} escaped string
		 */
		escapeRegex: function ( val ) {
			return val.replace( _re_escape_regex, '\\$1' );
		}
	};
	
	
	
	/**
	 * Create a mapping object that allows camel case parameters to be looked up
	 * for their Hungarian counterparts. The mapping is stored in a private
	 * parameter called `_hungarianMap` which can be accessed on the source object.
	 *  @param {object} o
	 *  @memberof DataTable#oApi
	 */
	function _fnHungarianMap ( o )
	{
		var
			hungarian = 'a aa ai ao as b fn i m o s ',
			match,
			newKey,
			map = {};
	
		$.each( o, function (key, val) {
			match = key.match(/^([^A-Z]+?)([A-Z])/);
	
			if ( match && hungarian.indexOf(match[1]+' ') !== -1 )
			{
				newKey = key.replace( match[0], match[2].toLowerCase() );
				map[ newKey ] = key;
	
				if ( match[1] === 'o' )
				{
					_fnHungarianMap( o[key] );
				}
			}
		} );
	
		o._hungarianMap = map;
	}
	
	
	/**
	 * Convert from camel case parameters to Hungarian, based on a Hungarian map
	 * created by _fnHungarianMap.
	 *  @param {object} src The model object which holds all parameters that can be
	 *    mapped.
	 *  @param {object} user The object to convert from camel case to Hungarian.
	 *  @param {boolean} force When set to `true`, properties which already have a
	 *    Hungarian value in the `user` object will be overwritten. Otherwise they
	 *    won't be.
	 *  @memberof DataTable#oApi
	 */
	function _fnCamelToHungarian ( src, user, force )
	{
		if ( ! src._hungarianMap ) {
			_fnHungarianMap( src );
		}
	
		var hungarianKey;
	
		$.each( user, function (key, val) {
			hungarianKey = src._hungarianMap[ key ];
	
			if ( hungarianKey !== undefined && (force || user[hungarianKey] === undefined) )
			{
				// For objects, we need to buzz down into the object to copy parameters
				if ( hungarianKey.charAt(0) === 'o' )
				{
					// Copy the camelCase options over to the hungarian
					if ( ! user[ hungarianKey ] ) {
						user[ hungarianKey ] = {};
					}
					$.extend( true, user[hungarianKey], user[key] );
	
					_fnCamelToHungarian( src[hungarianKey], user[hungarianKey], force );
				}
				else {
					user[hungarianKey] = user[ key ];
				}
			}
		} );
	}
	
	
	/**
	 * Language compatibility - when certain options are given, and others aren't, we
	 * need to duplicate the values over, in order to provide backwards compatibility
	 * with older language files.
	 *  @param {object} oSettings dataTables settings object
	 *  @memberof DataTable#oApi
	 */
	function _fnLanguageCompat( lang )
	{
		// Note the use of the Hungarian notation for the parameters in this method as
		// this is called after the mapping of camelCase to Hungarian
		var defaults = DataTable.defaults.oLanguage;
	
		// Default mapping
		var defaultDecimal = defaults.sDecimal;
		if ( defaultDecimal ) {
			_addNumericSort( defaultDecimal );
		}
	
		if ( lang ) {
			var zeroRecords = lang.sZeroRecords;
	
			// Backwards compatibility - if there is no sEmptyTable given, then use the same as
			// sZeroRecords - assuming that is given.
			if ( ! lang.sEmptyTable && zeroRecords &&
				defaults.sEmptyTable === "No data available in table" )
			{
				_fnMap( lang, lang, 'sZeroRecords', 'sEmptyTable' );
			}
	
			// Likewise with loading records
			if ( ! lang.sLoadingRecords && zeroRecords &&
				defaults.sLoadingRecords === "Loading..." )
			{
				_fnMap( lang, lang, 'sZeroRecords', 'sLoadingRecords' );
			}
	
			// Old parameter name of the thousands separator mapped onto the new
			if ( lang.sInfoThousands ) {
				lang.sThousands = lang.sInfoThousands;
			}
	
			var decimal = lang.sDecimal;
			if ( decimal && defaultDecimal !== decimal ) {
				_addNumericSort( decimal );
			}
		}
	}
	
	
	/**
	 * Map one parameter onto another
	 *  @param {object} o Object to map
	 *  @param {*} knew The new parameter name
	 *  @param {*} old The old parameter name
	 */
	var _fnCompatMap = function ( o, knew, old ) {
		if ( o[ knew ] !== undefined ) {
			o[ old ] = o[ knew ];
		}
	};
	
	
	/**
	 * Provide backwards compatibility for the main DT options. Note that the new
	 * options are mapped onto the old parameters, so this is an external interface
	 * change only.
	 *  @param {object} init Object to map
	 */
	function _fnCompatOpts ( init )
	{
		_fnCompatMap( init, 'ordering',      'bSort' );
		_fnCompatMap( init, 'orderMulti',    'bSortMulti' );
		_fnCompatMap( init, 'orderClasses',  'bSortClasses' );
		_fnCompatMap( init, 'orderCellsTop', 'bSortCellsTop' );
		_fnCompatMap( init, 'order',         'aaSorting' );
		_fnCompatMap( init, 'orderFixed',    'aaSortingFixed' );
		_fnCompatMap( init, 'paging',        'bPaginate' );
		_fnCompatMap( init, 'pagingType',    'sPaginationType' );
		_fnCompatMap( init, 'pageLength',    'iDisplayLength' );
		_fnCompatMap( init, 'searching',     'bFilter' );
	
		// Boolean initialisation of x-scrolling
		if ( typeof init.sScrollX === 'boolean' ) {
			init.sScrollX = init.sScrollX ? '100%' : '';
		}
		if ( typeof init.scrollX === 'boolean' ) {
			init.scrollX = init.scrollX ? '100%' : '';
		}
	
		// Column search objects are in an array, so it needs to be converted
		// element by element
		var searchCols = init.aoSearchCols;
	
		if ( searchCols ) {
			for ( var i=0, ien=searchCols.length ; i<ien ; i++ ) {
				if ( searchCols[i] ) {
					_fnCamelToHungarian( DataTable.models.oSearch, searchCols[i] );
				}
			}
		}
	}
	
	
	/**
	 * Provide backwards compatibility for column options. Note that the new options
	 * are mapped onto the old parameters, so this is an external interface change
	 * only.
	 *  @param {object} init Object to map
	 */
	function _fnCompatCols ( init )
	{
		_fnCompatMap( init, 'orderable',     'bSortable' );
		_fnCompatMap( init, 'orderData',     'aDataSort' );
		_fnCompatMap( init, 'orderSequence', 'asSorting' );
		_fnCompatMap( init, 'orderDataType', 'sortDataType' );
	
		// orderData can be given as an integer
		var dataSort = init.aDataSort;
		if ( typeof dataSort === 'number' && ! $.isArray( dataSort ) ) {
			init.aDataSort = [ dataSort ];
		}
	}
	
	
	/**
	 * Browser feature detection for capabilities, quirks
	 *  @param {object} settings dataTables settings object
	 *  @memberof DataTable#oApi
	 */
	function _fnBrowserDetect( settings )
	{
		// We don't need to do this every time DataTables is constructed, the values
		// calculated are specific to the browser and OS configuration which we
		// don't expect to change between initialisations
		if ( ! DataTable.__browser ) {
			var browser = {};
			DataTable.__browser = browser;
	
			// Scrolling feature / quirks detection
			var n = $('<div/>')
				.css( {
					position: 'fixed',
					top: 0,
					left: $(window).scrollLeft()*-1, // allow for scrolling
					height: 1,
					width: 1,
					overflow: 'hidden'
				} )
				.append(
					$('<div/>')
						.css( {
							position: 'absolute',
							top: 1,
							left: 1,
							width: 100,
							overflow: 'scroll'
						} )
						.append(
							$('<div/>')
								.css( {
									width: '100%',
									height: 10
								} )
						)
				)
				.appendTo( 'body' );
	
			var outer = n.children();
			var inner = outer.children();
	
			// Numbers below, in order, are:
			// inner.offsetWidth, inner.clientWidth, outer.offsetWidth, outer.clientWidth
			//
			// IE6 XP:                           100 100 100  83
			// IE7 Vista:                        100 100 100  83
			// IE 8+ Windows:                     83  83 100  83
			// Evergreen Windows:                 83  83 100  83
			// Evergreen Mac with scrollbars:     85  85 100  85
			// Evergreen Mac without scrollbars: 100 100 100 100
	
			// Get scrollbar width
			browser.barWidth = outer[0].offsetWidth - outer[0].clientWidth;
	
			// IE6/7 will oversize a width 100% element inside a scrolling element, to
			// include the width of the scrollbar, while other browsers ensure the inner
			// element is contained without forcing scrolling
			browser.bScrollOversize = inner[0].offsetWidth === 100 && outer[0].clientWidth !== 100;
	
			// In rtl text layout, some browsers (most, but not all) will place the
			// scrollbar on the left, rather than the right.
			browser.bScrollbarLeft = Math.round( inner.offset().left ) !== 1;
	
			// IE8- don't provide height and width for getBoundingClientRect
			browser.bBounding = n[0].getBoundingClientRect().width ? true : false;
	
			n.remove();
		}
	
		$.extend( settings.oBrowser, DataTable.__browser );
		settings.oScroll.iBarWidth = DataTable.__browser.barWidth;
	}
	
	
	/**
	 * Array.prototype reduce[Right] method, used for browsers which don't support
	 * JS 1.6. Done this way to reduce code size, since we iterate either way
	 *  @param {object} settings dataTables settings object
	 *  @memberof DataTable#oApi
	 */
	function _fnReduce ( that, fn, init, start, end, inc )
	{
		var
			i = start,
			value,
			isSet = false;
	
		if ( init !== undefined ) {
			value = init;
			isSet = true;
		}
	
		while ( i !== end ) {
			if ( ! that.hasOwnProperty(i) ) {
				continue;
			}
	
			value = isSet ?
				fn( value, that[i], i, that ) :
				that[i];
	
			isSet = true;
			i += inc;
		}
	
		return value;
	}
	
	/**
	 * Add a column to the list used for the table with default values
	 *  @param {object} oSettings dataTables settings object
	 *  @param {node} nTh The th element for this column
	 *  @memberof DataTable#oApi
	 */
	function _fnAddColumn( oSettings, nTh )
	{
		// Add column to aoColumns array
		var oDefaults = DataTable.defaults.column;
		var iCol = oSettings.aoColumns.length;
		var oCol = $.extend( {}, DataTable.models.oColumn, oDefaults, {
			"nTh": nTh ? nTh : document.createElement('th'),
			"sTitle":    oDefaults.sTitle    ? oDefaults.sTitle    : nTh ? nTh.innerHTML : '',
			"aDataSort": oDefaults.aDataSort ? oDefaults.aDataSort : [iCol],
			"mData": oDefaults.mData ? oDefaults.mData : iCol,
			idx: iCol
		} );
		oSettings.aoColumns.push( oCol );
	
		// Add search object for column specific search. Note that the `searchCols[ iCol ]`
		// passed into extend can be undefined. This allows the user to give a default
		// with only some of the parameters defined, and also not give a default
		var searchCols = oSettings.aoPreSearchCols;
		searchCols[ iCol ] = $.extend( {}, DataTable.models.oSearch, searchCols[ iCol ] );
	
		// Use the default column options function to initialise classes etc
		_fnColumnOptions( oSettings, iCol, $(nTh).data() );
	}
	
	
	/**
	 * Apply options for a column
	 *  @param {object} oSettings dataTables settings object
	 *  @param {int} iCol column index to consider
	 *  @param {object} oOptions object with sType, bVisible and bSearchable etc
	 *  @memberof DataTable#oApi
	 */
	function _fnColumnOptions( oSettings, iCol, oOptions )
	{
		var oCol = oSettings.aoColumns[ iCol ];
		var oClasses = oSettings.oClasses;
		var th = $(oCol.nTh);
	
		// Try to get width information from the DOM. We can't get it from CSS
		// as we'd need to parse the CSS stylesheet. `width` option can override
		if ( ! oCol.sWidthOrig ) {
			// Width attribute
			oCol.sWidthOrig = th.attr('width') || null;
	
			// Style attribute
			var t = (th.attr('style') || '').match(/width:\s*(\d+[pxem%]+)/);
			if ( t ) {
				oCol.sWidthOrig = t[1];
			}
		}
	
		/* User specified column options */
		if ( oOptions !== undefined && oOptions !== null )
		{
			// Backwards compatibility
			_fnCompatCols( oOptions );
	
			// Map camel case parameters to their Hungarian counterparts
			_fnCamelToHungarian( DataTable.defaults.column, oOptions );
	
			/* Backwards compatibility for mDataProp */
			if ( oOptions.mDataProp !== undefined && !oOptions.mData )
			{
				oOptions.mData = oOptions.mDataProp;
			}
	
			if ( oOptions.sType )
			{
				oCol._sManualType = oOptions.sType;
			}
	
			// `class` is a reserved word in Javascript, so we need to provide
			// the ability to use a valid name for the camel case input
			if ( oOptions.className && ! oOptions.sClass )
			{
				oOptions.sClass = oOptions.className;
			}
			if ( oOptions.sClass ) {
				th.addClass( oOptions.sClass );
			}
	
			$.extend( oCol, oOptions );
			_fnMap( oCol, oOptions, "sWidth", "sWidthOrig" );
	
			/* iDataSort to be applied (backwards compatibility), but aDataSort will take
			 * priority if defined
			 */
			if ( oOptions.iDataSort !== undefined )
			{
				oCol.aDataSort = [ oOptions.iDataSort ];
			}
			_fnMap( oCol, oOptions, "aDataSort" );
		}
	
		/* Cache the data get and set functions for speed */
		var mDataSrc = oCol.mData;
		var mData = _fnGetObjectDataFn( mDataSrc );
		var mRender = oCol.mRender ? _fnGetObjectDataFn( oCol.mRender ) : null;
	
		var attrTest = function( src ) {
			return typeof src === 'string' && src.indexOf('@') !== -1;
		};
		oCol._bAttrSrc = $.isPlainObject( mDataSrc ) && (
			attrTest(mDataSrc.sort) || attrTest(mDataSrc.type) || attrTest(mDataSrc.filter)
		);
		oCol._setter = null;
	
		oCol.fnGetData = function (rowData, type, meta) {
			var innerData = mData( rowData, type, undefined, meta );
	
			return mRender && type ?
				mRender( innerData, type, rowData, meta ) :
				innerData;
		};
		oCol.fnSetData = function ( rowData, val, meta ) {
			return _fnSetObjectDataFn( mDataSrc )( rowData, val, meta );
		};
	
		// Indicate if DataTables should read DOM data as an object or array
		// Used in _fnGetRowElements
		if ( typeof mDataSrc !== 'number' ) {
			oSettings._rowReadObject = true;
		}
	
		/* Feature sorting overrides column specific when off */
		if ( !oSettings.oFeatures.bSort )
		{
			oCol.bSortable = false;
			th.addClass( oClasses.sSortableNone ); // Have to add class here as order event isn't called
		}
	
		/* Check that the class assignment is correct for sorting */
		var bAsc = $.inArray('asc', oCol.asSorting) !== -1;
		var bDesc = $.inArray('desc', oCol.asSorting) !== -1;
		if ( !oCol.bSortable || (!bAsc && !bDesc) )
		{
			oCol.sSortingClass = oClasses.sSortableNone;
			oCol.sSortingClassJUI = "";
		}
		else if ( bAsc && !bDesc )
		{
			oCol.sSortingClass = oClasses.sSortableAsc;
			oCol.sSortingClassJUI = oClasses.sSortJUIAscAllowed;
		}
		else if ( !bAsc && bDesc )
		{
			oCol.sSortingClass = oClasses.sSortableDesc;
			oCol.sSortingClassJUI = oClasses.sSortJUIDescAllowed;
		}
		else
		{
			oCol.sSortingClass = oClasses.sSortable;
			oCol.sSortingClassJUI = oClasses.sSortJUI;
		}
	}
	
	
	/**
	 * Adjust the table column widths for new data. Note: you would probably want to
	 * do a redraw after calling this function!
	 *  @param {object} settings dataTables settings object
	 *  @memberof DataTable#oApi
	 */
	function _fnAdjustColumnSizing ( settings )
	{
		/* Not interested in doing column width calculation if auto-width is disabled */
		if ( settings.oFeatures.bAutoWidth !== false )
		{
			var columns = settings.aoColumns;
	
			_fnCalculateColumnWidths( settings );
			for ( var i=0 , iLen=columns.length ; i<iLen ; i++ )
			{
				columns[i].nTh.style.width = columns[i].sWidth;
			}
		}
	
		var scroll = settings.oScroll;
		if ( scroll.sY !== '' || scroll.sX !== '')
		{
			_fnScrollDraw( settings );
		}
	
		_fnCallbackFire( settings, null, 'column-sizing', [settings] );
	}
	
	
	/**
	 * Covert the index of a visible column to the index in the data array (take account
	 * of hidden columns)
	 *  @param {object} oSettings dataTables settings object
	 *  @param {int} iMatch Visible column index to lookup
	 *  @returns {int} i the data index
	 *  @memberof DataTable#oApi
	 */
	function _fnVisibleToColumnIndex( oSettings, iMatch )
	{
		var aiVis = _fnGetColumns( oSettings, 'bVisible' );
	
		return typeof aiVis[iMatch] === 'number' ?
			aiVis[iMatch] :
			null;
	}
	
	
	/**
	 * Covert the index of an index in the data array and convert it to the visible
	 *   column index (take account of hidden columns)
	 *  @param {int} iMatch Column index to lookup
	 *  @param {object} oSettings dataTables settings object
	 *  @returns {int} i the data index
	 *  @memberof DataTable#oApi
	 */
	function _fnColumnIndexToVisible( oSettings, iMatch )
	{
		var aiVis = _fnGetColumns( oSettings, 'bVisible' );
		var iPos = $.inArray( iMatch, aiVis );
	
		return iPos !== -1 ? iPos : null;
	}
	
	
	/**
	 * Get the number of visible columns
	 *  @param {object} oSettings dataTables settings object
	 *  @returns {int} i the number of visible columns
	 *  @memberof DataTable#oApi
	 */
	function _fnVisbleColumns( oSettings )
	{
		var vis = 0;
	
		// No reduce in IE8, use a loop for now
		$.each( oSettings.aoColumns, function ( i, col ) {
			if ( col.bVisible && $(col.nTh).css('display') !== 'none' ) {
				vis++;
			}
		} );
	
		return vis;
	}
	
	
	/**
	 * Get an array of column indexes that match a given property
	 *  @param {object} oSettings dataTables settings object
	 *  @param {string} sParam Parameter in aoColumns to look for - typically
	 *    bVisible or bSearchable
	 *  @returns {array} Array of indexes with matched properties
	 *  @memberof DataTable#oApi
	 */
	function _fnGetColumns( oSettings, sParam )
	{
		var a = [];
	
		$.map( oSettings.aoColumns, function(val, i) {
			if ( val[sParam] ) {
				a.push( i );
			}
		} );
	
		return a;
	}
	
	
	/**
	 * Calculate the 'type' of a column
	 *  @param {object} settings dataTables settings object
	 *  @memberof DataTable#oApi
	 */
	function _fnColumnTypes ( settings )
	{
		var columns = settings.aoColumns;
		var data = settings.aoData;
		var types = DataTable.ext.type.detect;
		var i, ien, j, jen, k, ken;
		var col, cell, detectedType, cache;
	
		// For each column, spin over the 
		for ( i=0, ien=columns.length ; i<ien ; i++ ) {
			col = columns[i];
			cache = [];
	
			if ( ! col.sType && col._sManualType ) {
				col.sType = col._sManualType;
			}
			else if ( ! col.sType ) {
				for ( j=0, jen=types.length ; j<jen ; j++ ) {
					for ( k=0, ken=data.length ; k<ken ; k++ ) {
						// Use a cache array so we only need to get the type data
						// from the formatter once (when using multiple detectors)
						if ( cache[k] === undefined ) {
							cache[k] = _fnGetCellData( settings, k, i, 'type' );
						}
	
						detectedType = types[j]( cache[k], settings );
	
						// If null, then this type can't apply to this column, so
						// rather than testing all cells, break out. There is an
						// exception for the last type which is `html`. We need to
						// scan all rows since it is possible to mix string and HTML
						// types
						if ( ! detectedType && j !== types.length-1 ) {
							break;
						}
	
						// Only a single match is needed for html type since it is
						// bottom of the pile and very similar to string
						if ( detectedType === 'html' ) {
							break;
						}
					}
	
					// Type is valid for all data points in the column - use this
					// type
					if ( detectedType ) {
						col.sType = detectedType;
						break;
					}
				}
	
				// Fall back - if no type was detected, always use string
				if ( ! col.sType ) {
					col.sType = 'string';
				}
			}
		}
	}
	
	
	/**
	 * Take the column definitions and static columns arrays and calculate how
	 * they relate to column indexes. The callback function will then apply the
	 * definition found for a column to a suitable configuration object.
	 *  @param {object} oSettings dataTables settings object
	 *  @param {array} aoColDefs The aoColumnDefs array that is to be applied
	 *  @param {array} aoCols The aoColumns array that defines columns individually
	 *  @param {function} fn Callback function - takes two parameters, the calculated
	 *    column index and the definition for that column.
	 *  @memberof DataTable#oApi
	 */
	function _fnApplyColumnDefs( oSettings, aoColDefs, aoCols, fn )
	{
		var i, iLen, j, jLen, k, kLen, def;
		var columns = oSettings.aoColumns;
	
		// Column definitions with aTargets
		if ( aoColDefs )
		{
			/* Loop over the definitions array - loop in reverse so first instance has priority */
			for ( i=aoColDefs.length-1 ; i>=0 ; i-- )
			{
				def = aoColDefs[i];
	
				/* Each definition can target multiple columns, as it is an array */
				var aTargets = def.targets !== undefined ?
					def.targets :
					def.aTargets;
	
				if ( ! $.isArray( aTargets ) )
				{
					aTargets = [ aTargets ];
				}
	
				for ( j=0, jLen=aTargets.length ; j<jLen ; j++ )
				{
					if ( typeof aTargets[j] === 'number' && aTargets[j] >= 0 )
					{
						/* Add columns that we don't yet know about */
						while( columns.length <= aTargets[j] )
						{
							_fnAddColumn( oSettings );
						}
	
						/* Integer, basic index */
						fn( aTargets[j], def );
					}
					else if ( typeof aTargets[j] === 'number' && aTargets[j] < 0 )
					{
						/* Negative integer, right to left column counting */
						fn( columns.length+aTargets[j], def );
					}
					else if ( typeof aTargets[j] === 'string' )
					{
						/* Class name matching on TH element */
						for ( k=0, kLen=columns.length ; k<kLen ; k++ )
						{
							if ( aTargets[j] == "_all" ||
							     $(columns[k].nTh).hasClass( aTargets[j] ) )
							{
								fn( k, def );
							}
						}
					}
				}
			}
		}
	
		// Statically defined columns array
		if ( aoCols )
		{
			for ( i=0, iLen=aoCols.length ; i<iLen ; i++ )
			{
				fn( i, aoCols[i] );
			}
		}
	}
	
	/**
	 * Add a data array to the table, creating DOM node etc. This is the parallel to
	 * _fnGatherData, but for adding rows from a Javascript source, rather than a
	 * DOM source.
	 *  @param {object} oSettings dataTables settings object
	 *  @param {array} aData data array to be added
	 *  @param {node} [nTr] TR element to add to the table - optional. If not given,
	 *    DataTables will create a row automatically
	 *  @param {array} [anTds] Array of TD|TH elements for the row - must be given
	 *    if nTr is.
	 *  @returns {int} >=0 if successful (index of new aoData entry), -1 if failed
	 *  @memberof DataTable#oApi
	 */
	function _fnAddData ( oSettings, aDataIn, nTr, anTds )
	{
		/* Create the object for storing information about this new row */
		var iRow = oSettings.aoData.length;
		var oData = $.extend( true, {}, DataTable.models.oRow, {
			src: nTr ? 'dom' : 'data',
			idx: iRow
		} );
	
		oData._aData = aDataIn;
		oSettings.aoData.push( oData );
	
		/* Create the cells */
		var nTd, sThisType;
		var columns = oSettings.aoColumns;
	
		// Invalidate the column types as the new data needs to be revalidated
		for ( var i=0, iLen=columns.length ; i<iLen ; i++ )
		{
			columns[i].sType = null;
		}
	
		/* Add to the display array */
		oSettings.aiDisplayMaster.push( iRow );
	
		var id = oSettings.rowIdFn( aDataIn );
		if ( id !== undefined ) {
			oSettings.aIds[ id ] = oData;
		}
	
		/* Create the DOM information, or register it if already present */
		if ( nTr || ! oSettings.oFeatures.bDeferRender )
		{
			_fnCreateTr( oSettings, iRow, nTr, anTds );
		}
	
		return iRow;
	}
	
	
	/**
	 * Add one or more TR elements to the table. Generally we'd expect to
	 * use this for reading data from a DOM sourced table, but it could be
	 * used for an TR element. Note that if a TR is given, it is used (i.e.
	 * it is not cloned).
	 *  @param {object} settings dataTables settings object
	 *  @param {array|node|jQuery} trs The TR element(s) to add to the table
	 *  @returns {array} Array of indexes for the added rows
	 *  @memberof DataTable#oApi
	 */
	function _fnAddTr( settings, trs )
	{
		var row;
	
		// Allow an individual node to be passed in
		if ( ! (trs instanceof $) ) {
			trs = $(trs);
		}
	
		return trs.map( function (i, el) {
			row = _fnGetRowElements( settings, el );
			return _fnAddData( settings, row.data, el, row.cells );
		} );
	}
	
	
	/**
	 * Take a TR element and convert it to an index in aoData
	 *  @param {object} oSettings dataTables settings object
	 *  @param {node} n the TR element to find
	 *  @returns {int} index if the node is found, null if not
	 *  @memberof DataTable#oApi
	 */
	function _fnNodeToDataIndex( oSettings, n )
	{
		return (n._DT_RowIndex!==undefined) ? n._DT_RowIndex : null;
	}
	
	
	/**
	 * Take a TD element and convert it into a column data index (not the visible index)
	 *  @param {object} oSettings dataTables settings object
	 *  @param {int} iRow The row number the TD/TH can be found in
	 *  @param {node} n The TD/TH element to find
	 *  @returns {int} index if the node is found, -1 if not
	 *  @memberof DataTable#oApi
	 */
	function _fnNodeToColumnIndex( oSettings, iRow, n )
	{
		return $.inArray( n, oSettings.aoData[ iRow ].anCells );
	}
	
	
	/**
	 * Get the data for a given cell from the internal cache, taking into account data mapping
	 *  @param {object} settings dataTables settings object
	 *  @param {int} rowIdx aoData row id
	 *  @param {int} colIdx Column index
	 *  @param {string} type data get type ('display', 'type' 'filter' 'sort')
	 *  @returns {*} Cell data
	 *  @memberof DataTable#oApi
	 */
	function _fnGetCellData( settings, rowIdx, colIdx, type )
	{
		var draw           = settings.iDraw;
		var col            = settings.aoColumns[colIdx];
		var rowData        = settings.aoData[rowIdx]._aData;
		var defaultContent = col.sDefaultContent;
		var cellData       = col.fnGetData( rowData, type, {
			settings: settings,
			row:      rowIdx,
			col:      colIdx
		} );
	
		if ( cellData === undefined ) {
			if ( settings.iDrawError != draw && defaultContent === null ) {
				_fnLog( settings, 0, "Requested unknown parameter "+
					(typeof col.mData=='function' ? '{function}' : "'"+col.mData+"'")+
					" for row "+rowIdx+", column "+colIdx, 4 );
				settings.iDrawError = draw;
			}
			return defaultContent;
		}
	
		// When the data source is null and a specific data type is requested (i.e.
		// not the original data), we can use default column data
		if ( (cellData === rowData || cellData === null) && defaultContent !== null && type !== undefined ) {
			cellData = defaultContent;
		}
		else if ( typeof cellData === 'function' ) {
			// If the data source is a function, then we run it and use the return,
			// executing in the scope of the data object (for instances)
			return cellData.call( rowData );
		}
	
		if ( cellData === null && type == 'display' ) {
			return '';
		}
		return cellData;
	}
	
	
	/**
	 * Set the value for a specific cell, into the internal data cache
	 *  @param {object} settings dataTables settings object
	 *  @param {int} rowIdx aoData row id
	 *  @param {int} colIdx Column index
	 *  @param {*} val Value to set
	 *  @memberof DataTable#oApi
	 */
	function _fnSetCellData( settings, rowIdx, colIdx, val )
	{
		var col     = settings.aoColumns[colIdx];
		var rowData = settings.aoData[rowIdx]._aData;
	
		col.fnSetData( rowData, val, {
			settings: settings,
			row:      rowIdx,
			col:      colIdx
		}  );
	}
	
	
	// Private variable that is used to match action syntax in the data property object
	var __reArray = /\[.*?\]$/;
	var __reFn = /\(\)$/;
	
	/**
	 * Split string on periods, taking into account escaped periods
	 * @param  {string} str String to split
	 * @return {array} Split string
	 */
	function _fnSplitObjNotation( str )
	{
		return $.map( str.match(/(\\.|[^\.])+/g) || [''], function ( s ) {
			return s.replace(/\\\./g, '.');
		} );
	}
	
	
	/**
	 * Return a function that can be used to get data from a source object, taking
	 * into account the ability to use nested objects as a source
	 *  @param {string|int|function} mSource The data source for the object
	 *  @returns {function} Data get function
	 *  @memberof DataTable#oApi
	 */
	function _fnGetObjectDataFn( mSource )
	{
		if ( $.isPlainObject( mSource ) )
		{
			/* Build an object of get functions, and wrap them in a single call */
			var o = {};
			$.each( mSource, function (key, val) {
				if ( val ) {
					o[key] = _fnGetObjectDataFn( val );
				}
			} );
	
			return function (data, type, row, meta) {
				var t = o[type] || o._;
				return t !== undefined ?
					t(data, type, row, meta) :
					data;
			};
		}
		else if ( mSource === null )
		{
			/* Give an empty string for rendering / sorting etc */
			return function (data) { // type, row and meta also passed, but not used
				return data;
			};
		}
		else if ( typeof mSource === 'function' )
		{
			return function (data, type, row, meta) {
				return mSource( data, type, row, meta );
			};
		}
		else if ( typeof mSource === 'string' && (mSource.indexOf('.') !== -1 ||
			      mSource.indexOf('[') !== -1 || mSource.indexOf('(') !== -1) )
		{
			/* If there is a . in the source string then the data source is in a
			 * nested object so we loop over the data for each level to get the next
			 * level down. On each loop we test for undefined, and if found immediately
			 * return. This allows entire objects to be missing and sDefaultContent to
			 * be used if defined, rather than throwing an error
			 */
			var fetchData = function (data, type, src) {
				var arrayNotation, funcNotation, out, innerSrc;
	
				if ( src !== "" )
				{
					var a = _fnSplitObjNotation( src );
	
					for ( var i=0, iLen=a.length ; i<iLen ; i++ )
					{
						// Check if we are dealing with special notation
						arrayNotation = a[i].match(__reArray);
						funcNotation = a[i].match(__reFn);
	
						if ( arrayNotation )
						{
							// Array notation
							a[i] = a[i].replace(__reArray, '');
	
							// Condition allows simply [] to be passed in
							if ( a[i] !== "" ) {
								data = data[ a[i] ];
							}
							out = [];
	
							// Get the remainder of the nested object to get
							a.splice( 0, i+1 );
							innerSrc = a.join('.');
	
							// Traverse each entry in the array getting the properties requested
							if ( $.isArray( data ) ) {
								for ( var j=0, jLen=data.length ; j<jLen ; j++ ) {
									out.push( fetchData( data[j], type, innerSrc ) );
								}
							}
	
							// If a string is given in between the array notation indicators, that
							// is used to join the strings together, otherwise an array is returned
							var join = arrayNotation[0].substring(1, arrayNotation[0].length-1);
							data = (join==="") ? out : out.join(join);
	
							// The inner call to fetchData has already traversed through the remainder
							// of the source requested, so we exit from the loop
							break;
						}
						else if ( funcNotation )
						{
							// Function call
							a[i] = a[i].replace(__reFn, '');
							data = data[ a[i] ]();
							continue;
						}
	
						if ( data === null || data[ a[i] ] === undefined )
						{
							return undefined;
						}
						data = data[ a[i] ];
					}
				}
	
				return data;
			};
	
			return function (data, type) { // row and meta also passed, but not used
				return fetchData( data, type, mSource );
			};
		}
		else
		{
			/* Array or flat object mapping */
			return function (data, type) { // row and meta also passed, but not used
				return data[mSource];
			};
		}
	}
	
	
	/**
	 * Return a function that can be used to set data from a source object, taking
	 * into account the ability to use nested objects as a source
	 *  @param {string|int|function} mSource The data source for the object
	 *  @returns {function} Data set function
	 *  @memberof DataTable#oApi
	 */
	function _fnSetObjectDataFn( mSource )
	{
		if ( $.isPlainObject( mSource ) )
		{
			/* Unlike get, only the underscore (global) option is used for for
			 * setting data since we don't know the type here. This is why an object
			 * option is not documented for `mData` (which is read/write), but it is
			 * for `mRender` which is read only.
			 */
			return _fnSetObjectDataFn( mSource._ );
		}
		else if ( mSource === null )
		{
			/* Nothing to do when the data source is null */
			return function () {};
		}
		else if ( typeof mSource === 'function' )
		{
			return function (data, val, meta) {
				mSource( data, 'set', val, meta );
			};
		}
		else if ( typeof mSource === 'string' && (mSource.indexOf('.') !== -1 ||
			      mSource.indexOf('[') !== -1 || mSource.indexOf('(') !== -1) )
		{
			/* Like the get, we need to get data from a nested object */
			var setData = function (data, val, src) {
				var a = _fnSplitObjNotation( src ), b;
				var aLast = a[a.length-1];
				var arrayNotation, funcNotation, o, innerSrc;
	
				for ( var i=0, iLen=a.length-1 ; i<iLen ; i++ )
				{
					// Check if we are dealing with an array notation request
					arrayNotation = a[i].match(__reArray);
					funcNotation = a[i].match(__reFn);
	
					if ( arrayNotation )
					{
						a[i] = a[i].replace(__reArray, '');
						data[ a[i] ] = [];
	
						// Get the remainder of the nested object to set so we can recurse
						b = a.slice();
						b.splice( 0, i+1 );
						innerSrc = b.join('.');
	
						// Traverse each entry in the array setting the properties requested
						if ( $.isArray( val ) )
						{
							for ( var j=0, jLen=val.length ; j<jLen ; j++ )
							{
								o = {};
								setData( o, val[j], innerSrc );
								data[ a[i] ].push( o );
							}
						}
						else
						{
							// We've been asked to save data to an array, but it
							// isn't array data to be saved. Best that can be done
							// is to just save the value.
							data[ a[i] ] = val;
						}
	
						// The inner call to setData has already traversed through the remainder
						// of the source and has set the data, thus we can exit here
						return;
					}
					else if ( funcNotation )
					{
						// Function call
						a[i] = a[i].replace(__reFn, '');
						data = data[ a[i] ]( val );
					}
	
					// If the nested object doesn't currently exist - since we are
					// trying to set the value - create it
					if ( data[ a[i] ] === null || data[ a[i] ] === undefined )
					{
						data[ a[i] ] = {};
					}
					data = data[ a[i] ];
				}
	
				// Last item in the input - i.e, the actual set
				if ( aLast.match(__reFn ) )
				{
					// Function call
					data = data[ aLast.replace(__reFn, '') ]( val );
				}
				else
				{
					// If array notation is used, we just want to strip it and use the property name
					// and assign the value. If it isn't used, then we get the result we want anyway
					data[ aLast.replace(__reArray, '') ] = val;
				}
			};
	
			return function (data, val) { // meta is also passed in, but not used
				return setData( data, val, mSource );
			};
		}
		else
		{
			/* Array or flat object mapping */
			return function (data, val) { // meta is also passed in, but not used
				data[mSource] = val;
			};
		}
	}
	
	
	/**
	 * Return an array with the full table data
	 *  @param {object} oSettings dataTables settings object
	 *  @returns array {array} aData Master data array
	 *  @memberof DataTable#oApi
	 */
	function _fnGetDataMaster ( settings )
	{
		return _pluck( settings.aoData, '_aData' );
	}
	
	
	/**
	 * Nuke the table
	 *  @param {object} oSettings dataTables settings object
	 *  @memberof DataTable#oApi
	 */
	function _fnClearTable( settings )
	{
		settings.aoData.length = 0;
		settings.aiDisplayMaster.length = 0;
		settings.aiDisplay.length = 0;
		settings.aIds = {};
	}
	
	
	 /**
	 * Take an array of integers (index array) and remove a target integer (value - not
	 * the key!)
	 *  @param {array} a Index array to target
	 *  @param {int} iTarget value to find
	 *  @memberof DataTable#oApi
	 */
	function _fnDeleteIndex( a, iTarget, splice )
	{
		var iTargetIndex = -1;
	
		for ( var i=0, iLen=a.length ; i<iLen ; i++ )
		{
			if ( a[i] == iTarget )
			{
				iTargetIndex = i;
			}
			else if ( a[i] > iTarget )
			{
				a[i]--;
			}
		}
	
		if ( iTargetIndex != -1 && splice === undefined )
		{
			a.splice( iTargetIndex, 1 );
		}
	}
	
	
	/**
	 * Mark cached data as invalid such that a re-read of the data will occur when
	 * the cached data is next requested. Also update from the data source object.
	 *
	 * @param {object} settings DataTables settings object
	 * @param {int}    rowIdx   Row index to invalidate
	 * @param {string} [src]    Source to invalidate from: undefined, 'auto', 'dom'
	 *     or 'data'
	 * @param {int}    [colIdx] Column index to invalidate. If undefined the whole
	 *     row will be invalidated
	 * @memberof DataTable#oApi
	 *
	 * @todo For the modularisation of v1.11 this will need to become a callback, so
	 *   the sort and filter methods can subscribe to it. That will required
	 *   initialisation options for sorting, which is why it is not already baked in
	 */
	function _fnInvalidate( settings, rowIdx, src, colIdx )
	{
		var row = settings.aoData[ rowIdx ];
		var i, ien;
		var cellWrite = function ( cell, col ) {
			// This is very frustrating, but in IE if you just write directly
			// to innerHTML, and elements that are overwritten are GC'ed,
			// even if there is a reference to them elsewhere
			while ( cell.childNodes.length ) {
				cell.removeChild( cell.firstChild );
			}
	
			cell.innerHTML = _fnGetCellData( settings, rowIdx, col, 'display' );
		};
	
		// Are we reading last data from DOM or the data object?
		if ( src === 'dom' || ((! src || src === 'auto') && row.src === 'dom') ) {
			// Read the data from the DOM
			row._aData = _fnGetRowElements(
					settings, row, colIdx, colIdx === undefined ? undefined : row._aData
				)
				.data;
		}
		else {
			// Reading from data object, update the DOM
			var cells = row.anCells;
	
			if ( cells ) {
				if ( colIdx !== undefined ) {
					cellWrite( cells[colIdx], colIdx );
				}
				else {
					for ( i=0, ien=cells.length ; i<ien ; i++ ) {
						cellWrite( cells[i], i );
					}
				}
			}
		}
	
		// For both row and cell invalidation, the cached data for sorting and
		// filtering is nulled out
		row._aSortData = null;
		row._aFilterData = null;
	
		// Invalidate the type for a specific column (if given) or all columns since
		// the data might have changed
		var cols = settings.aoColumns;
		if ( colIdx !== undefined ) {
			cols[ colIdx ].sType = null;
		}
		else {
			for ( i=0, ien=cols.length ; i<ien ; i++ ) {
				cols[i].sType = null;
			}
	
			// Update DataTables special `DT_*` attributes for the row
			_fnRowAttributes( settings, row );
		}
	}
	
	
	/**
	 * Build a data source object from an HTML row, reading the contents of the
	 * cells that are in the row.
	 *
	 * @param {object} settings DataTables settings object
	 * @param {node|object} TR element from which to read data or existing row
	 *   object from which to re-read the data from the cells
	 * @param {int} [colIdx] Optional column index
	 * @param {array|object} [d] Data source object. If `colIdx` is given then this
	 *   parameter should also be given and will be used to write the data into.
	 *   Only the column in question will be written
	 * @returns {object} Object with two parameters: `data` the data read, in
	 *   document order, and `cells` and array of nodes (they can be useful to the
	 *   caller, so rather than needing a second traversal to get them, just return
	 *   them from here).
	 * @memberof DataTable#oApi
	 */
	function _fnGetRowElements( settings, row, colIdx, d )
	{
		var
			tds = [],
			td = row.firstChild,
			name, col, o, i=0, contents,
			columns = settings.aoColumns,
			objectRead = settings._rowReadObject;
	
		// Allow the data object to be passed in, or construct
		d = d !== undefined ?
			d :
			objectRead ?
				{} :
				[];
	
		var attr = function ( str, td  ) {
			if ( typeof str === 'string' ) {
				var idx = str.indexOf('@');
	
				if ( idx !== -1 ) {
					var attr = str.substring( idx+1 );
					var setter = _fnSetObjectDataFn( str );
					setter( d, td.getAttribute( attr ) );
				}
			}
		};
	
		// Read data from a cell and store into the data object
		var cellProcess = function ( cell ) {
			if ( colIdx === undefined || colIdx === i ) {
				col = columns[i];
				contents = $.trim(cell.innerHTML);
	
				if ( col && col._bAttrSrc ) {
					var setter = _fnSetObjectDataFn( col.mData._ );
					setter( d, contents );
	
					attr( col.mData.sort, cell );
					attr( col.mData.type, cell );
					attr( col.mData.filter, cell );
				}
				else {
					// Depending on the `data` option for the columns the data can
					// be read to either an object or an array.
					if ( objectRead ) {
						if ( ! col._setter ) {
							// Cache the setter function
							col._setter = _fnSetObjectDataFn( col.mData );
						}
						col._setter( d, contents );
					}
					else {
						d[i] = contents;
					}
				}
			}
	
			i++;
		};
	
		if ( td ) {
			// `tr` element was passed in
			while ( td ) {
				name = td.nodeName.toUpperCase();
	
				if ( name == "TD" || name == "TH" ) {
					cellProcess( td );
					tds.push( td );
				}
	
				td = td.nextSibling;
			}
		}
		else {
			// Existing row object passed in
			tds = row.anCells;
	
			for ( var j=0, jen=tds.length ; j<jen ; j++ ) {
				cellProcess( tds[j] );
			}
		}
	
		// Read the ID from the DOM if present
		var rowNode = row.firstChild ? row : row.nTr;
	
		if ( rowNode ) {
			var id = rowNode.getAttribute( 'id' );
	
			if ( id ) {
				_fnSetObjectDataFn( settings.rowId )( d, id );
			}
		}
	
		return {
			data: d,
			cells: tds
		};
	}
	/**
	 * Create a new TR element (and it's TD children) for a row
	 *  @param {object} oSettings dataTables settings object
	 *  @param {int} iRow Row to consider
	 *  @param {node} [nTrIn] TR element to add to the table - optional. If not given,
	 *    DataTables will create a row automatically
	 *  @param {array} [anTds] Array of TD|TH elements for the row - must be given
	 *    if nTr is.
	 *  @memberof DataTable#oApi
	 */
	function _fnCreateTr ( oSettings, iRow, nTrIn, anTds )
	{
		var
			row = oSettings.aoData[iRow],
			rowData = row._aData,
			cells = [],
			nTr, nTd, oCol,
			i, iLen;
	
		if ( row.nTr === null )
		{
			nTr = nTrIn || document.createElement('tr');
	
			row.nTr = nTr;
			row.anCells = cells;
	
			/* Use a private property on the node to allow reserve mapping from the node
			 * to the aoData array for fast look up
			 */
			nTr._DT_RowIndex = iRow;
	
			/* Special parameters can be given by the data source to be used on the row */
			_fnRowAttributes( oSettings, row );
	
			/* Process each column */
			for ( i=0, iLen=oSettings.aoColumns.length ; i<iLen ; i++ )
			{
				oCol = oSettings.aoColumns[i];
	
				nTd = nTrIn ? anTds[i] : document.createElement( oCol.sCellType );
				nTd._DT_CellIndex = {
					row: iRow,
					column: i
				};
				
				cells.push( nTd );
	
				// Need to create the HTML if new, or if a rendering function is defined
				if ( (!nTrIn || oCol.mRender || oCol.mData !== i) &&
					 (!$.isPlainObject(oCol.mData) || oCol.mData._ !== i+'.display')
				) {
					nTd.innerHTML = _fnGetCellData( oSettings, iRow, i, 'display' );
				}
	
				/* Add user defined class */
				if ( oCol.sClass )
				{
					nTd.className += ' '+oCol.sClass;
				}
	
				// Visibility - add or remove as required
				if ( oCol.bVisible && ! nTrIn )
				{
					nTr.appendChild( nTd );
				}
				else if ( ! oCol.bVisible && nTrIn )
				{
					nTd.parentNode.removeChild( nTd );
				}
	
				if ( oCol.fnCreatedCell )
				{
					oCol.fnCreatedCell.call( oSettings.oInstance,
						nTd, _fnGetCellData( oSettings, iRow, i ), rowData, iRow, i
					);
				}
			}
	
			_fnCallbackFire( oSettings, 'aoRowCreatedCallback', null, [nTr, rowData, iRow, cells] );
		}
	
		// Remove once webkit bug 131819 and Chromium bug 365619 have been resolved
		// and deployed
		row.nTr.setAttribute( 'role', 'row' );
	}
	
	
	/**
	 * Add attributes to a row based on the special `DT_*` parameters in a data
	 * source object.
	 *  @param {object} settings DataTables settings object
	 *  @param {object} DataTables row object for the row to be modified
	 *  @memberof DataTable#oApi
	 */
	function _fnRowAttributes( settings, row )
	{
		var tr = row.nTr;
		var data = row._aData;
	
		if ( tr ) {
			var id = settings.rowIdFn( data );
	
			if ( id ) {
				tr.id = id;
			}
	
			if ( data.DT_RowClass ) {
				// Remove any classes added by DT_RowClass before
				var a = data.DT_RowClass.split(' ');
				row.__rowc = row.__rowc ?
					_unique( row.__rowc.concat( a ) ) :
					a;
	
				$(tr)
					.removeClass( row.__rowc.join(' ') )
					.addClass( data.DT_RowClass );
			}
	
			if ( data.DT_RowAttr ) {
				$(tr).attr( data.DT_RowAttr );
			}
	
			if ( data.DT_RowData ) {
				$(tr).data( data.DT_RowData );
			}
		}
	}
	
	
	/**
	 * Create the HTML header for the table
	 *  @param {object} oSettings dataTables settings object
	 *  @memberof DataTable#oApi
	 */
	function _fnBuildHead( oSettings )
	{
		var i, ien, cell, row, column;
		var thead = oSettings.nTHead;
		var tfoot = oSettings.nTFoot;
		var createHeader = $('th, td', thead).length === 0;
		var classes = oSettings.oClasses;
		var columns = oSettings.aoColumns;
	
		if ( createHeader ) {
			row = $('<tr/>').appendTo( thead );
		}
	
		for ( i=0, ien=columns.length ; i<ien ; i++ ) {
			column = columns[i];
			cell = $( column.nTh ).addClass( column.sClass );
	
			if ( createHeader ) {
				cell.appendTo( row );
			}
	
			// 1.11 move into sorting
			if ( oSettings.oFeatures.bSort ) {
				cell.addClass( column.sSortingClass );
	
				if ( column.bSortable !== false ) {
					cell
						.attr( 'tabindex', oSettings.iTabIndex )
						.attr( 'aria-controls', oSettings.sTableId );
	
					_fnSortAttachListener( oSettings, column.nTh, i );
				}
			}
	
			if ( column.sTitle != cell[0].innerHTML ) {
				cell.html( column.sTitle );
			}
	
			_fnRenderer( oSettings, 'header' )(
				oSettings, cell, column, classes
			);
		}
	
		if ( createHeader ) {
			_fnDetectHeader( oSettings.aoHeader, thead );
		}
		
		/* ARIA role for the rows */
	 	$(thead).find('>tr').attr('role', 'row');
	
		/* Deal with the footer - add classes if required */
		$(thead).find('>tr>th, >tr>td').addClass( classes.sHeaderTH );
		$(tfoot).find('>tr>th, >tr>td').addClass( classes.sFooterTH );
	
		// Cache the footer cells. Note that we only take the cells from the first
		// row in the footer. If there is more than one row the user wants to
		// interact with, they need to use the table().foot() method. Note also this
		// allows cells to be used for multiple columns using colspan
		if ( tfoot !== null ) {
			var cells = oSettings.aoFooter[0];
	
			for ( i=0, ien=cells.length ; i<ien ; i++ ) {
				column = columns[i];
				column.nTf = cells[i].cell;
	
				if ( column.sClass ) {
					$(column.nTf).addClass( column.sClass );
				}
			}
		}
	}
	
	
	/**
	 * Draw the header (or footer) element based on the column visibility states. The
	 * methodology here is to use the layout array from _fnDetectHeader, modified for
	 * the instantaneous column visibility, to construct the new layout. The grid is
	 * traversed over cell at a time in a rows x columns grid fashion, although each
	 * cell insert can cover multiple elements in the grid - which is tracks using the
	 * aApplied array. Cell inserts in the grid will only occur where there isn't
	 * already a cell in that position.
	 *  @param {object} oSettings dataTables settings object
	 *  @param array {objects} aoSource Layout array from _fnDetectHeader
	 *  @param {boolean} [bIncludeHidden=false] If true then include the hidden columns in the calc,
	 *  @memberof DataTable#oApi
	 */
	function _fnDrawHead( oSettings, aoSource, bIncludeHidden )
	{
		var i, iLen, j, jLen, k, kLen, n, nLocalTr;
		var aoLocal = [];
		var aApplied = [];
		var iColumns = oSettings.aoColumns.length;
		var iRowspan, iColspan;
	
		if ( ! aoSource )
		{
			return;
		}
	
		if (  bIncludeHidden === undefined )
		{
			bIncludeHidden = false;
		}
	
		/* Make a copy of the master layout array, but without the visible columns in it */
		for ( i=0, iLen=aoSource.length ; i<iLen ; i++ )
		{
			aoLocal[i] = aoSource[i].slice();
			aoLocal[i].nTr = aoSource[i].nTr;
	
			/* Remove any columns which are currently hidden */
			for ( j=iColumns-1 ; j>=0 ; j-- )
			{
				if ( !oSettings.aoColumns[j].bVisible && !bIncludeHidden )
				{
					aoLocal[i].splice( j, 1 );
				}
			}
	
			/* Prep the applied array - it needs an element for each row */
			aApplied.push( [] );
		}
	
		for ( i=0, iLen=aoLocal.length ; i<iLen ; i++ )
		{
			nLocalTr = aoLocal[i].nTr;
	
			/* All cells are going to be replaced, so empty out the row */
			if ( nLocalTr )
			{
				while( (n = nLocalTr.firstChild) )
				{
					nLocalTr.removeChild( n );
				}
			}
	
			for ( j=0, jLen=aoLocal[i].length ; j<jLen ; j++ )
			{
				iRowspan = 1;
				iColspan = 1;
	
				/* Check to see if there is already a cell (row/colspan) covering our target
				 * insert point. If there is, then there is nothing to do.
				 */
				if ( aApplied[i][j] === undefined )
				{
					nLocalTr.appendChild( aoLocal[i][j].cell );
					aApplied[i][j] = 1;
	
					/* Expand the cell to cover as many rows as needed */
					while ( aoLocal[i+iRowspan] !== undefined &&
					        aoLocal[i][j].cell == aoLocal[i+iRowspan][j].cell )
					{
						aApplied[i+iRowspan][j] = 1;
						iRowspan++;
					}
	
					/* Expand the cell to cover as many columns as needed */
					while ( aoLocal[i][j+iColspan] !== undefined &&
					        aoLocal[i][j].cell == aoLocal[i][j+iColspan].cell )
					{
						/* Must update the applied array over the rows for the columns */
						for ( k=0 ; k<iRowspan ; k++ )
						{
							aApplied[i+k][j+iColspan] = 1;
						}
						iColspan++;
					}
	
					/* Do the actual expansion in the DOM */
					$(aoLocal[i][j].cell)
						.attr('rowspan', iRowspan)
						.attr('colspan', iColspan);
				}
			}
		}
	}
	
	
	/**
	 * Insert the required TR nodes into the table for display
	 *  @param {object} oSettings dataTables settings object
	 *  @memberof DataTable#oApi
	 */
	function _fnDraw( oSettings )
	{
		/* Provide a pre-callback function which can be used to cancel the draw is false is returned */
		var aPreDraw = _fnCallbackFire( oSettings, 'aoPreDrawCallback', 'preDraw', [oSettings] );
		if ( $.inArray( false, aPreDraw ) !== -1 )
		{
			_fnProcessingDisplay( oSettings, false );
			return;
		}
	
		var i, iLen, n;
		var anRows = [];
		var iRowCount = 0;
		var asStripeClasses = oSettings.asStripeClasses;
		var iStripes = asStripeClasses.length;
		var iOpenRows = oSettings.aoOpenRows.length;
		var oLang = oSettings.oLanguage;
		var iInitDisplayStart = oSettings.iInitDisplayStart;
		var bServerSide = _fnDataSource( oSettings ) == 'ssp';
		var aiDisplay = oSettings.aiDisplay;
	
		oSettings.bDrawing = true;
	
		/* Check and see if we have an initial draw position from state saving */
		if ( iInitDisplayStart !== undefined && iInitDisplayStart !== -1 )
		{
			oSettings._iDisplayStart = bServerSide ?
				iInitDisplayStart :
				iInitDisplayStart >= oSettings.fnRecordsDisplay() ?
					0 :
					iInitDisplayStart;
	
			oSettings.iInitDisplayStart = -1;
		}
	
		var iDisplayStart = oSettings._iDisplayStart;
		var iDisplayEnd = oSettings.fnDisplayEnd();
	
		/* Server-side processing draw intercept */
		if ( oSettings.bDeferLoading )
		{
			oSettings.bDeferLoading = false;
			oSettings.iDraw++;
			_fnProcessingDisplay( oSettings, false );
		}
		else if ( !bServerSide )
		{
			oSettings.iDraw++;
		}
		else if ( !oSettings.bDestroying && !_fnAjaxUpdate( oSettings ) )
		{
			return;
		}
	
		if ( aiDisplay.length !== 0 )
		{
			var iStart = bServerSide ? 0 : iDisplayStart;
			var iEnd = bServerSide ? oSettings.aoData.length : iDisplayEnd;
	
			for ( var j=iStart ; j<iEnd ; j++ )
			{
				var iDataIndex = aiDisplay[j];
				var aoData = oSettings.aoData[ iDataIndex ];
				if ( aoData.nTr === null )
				{
					_fnCreateTr( oSettings, iDataIndex );
				}
	
				var nRow = aoData.nTr;
	
				/* Remove the old striping classes and then add the new one */
				if ( iStripes !== 0 )
				{
					var sStripe = asStripeClasses[ iRowCount % iStripes ];
					if ( aoData._sRowStripe != sStripe )
					{
						$(nRow).removeClass( aoData._sRowStripe ).addClass( sStripe );
						aoData._sRowStripe = sStripe;
					}
				}
	
				// Row callback functions - might want to manipulate the row
				// iRowCount and j are not currently documented. Are they at all
				// useful?
				_fnCallbackFire( oSettings, 'aoRowCallback', null,
					[nRow, aoData._aData, iRowCount, j, iDataIndex] );
	
				anRows.push( nRow );
				iRowCount++;
			}
		}
		else
		{
			/* Table is empty - create a row with an empty message in it */
			var sZero = oLang.sZeroRecords;
			if ( oSettings.iDraw == 1 &&  _fnDataSource( oSettings ) == 'ajax' )
			{
				sZero = oLang.sLoadingRecords;
			}
			else if ( oLang.sEmptyTable && oSettings.fnRecordsTotal() === 0 )
			{
				sZero = oLang.sEmptyTable;
			}
	
			anRows[ 0 ] = $( '<tr/>', { 'class': iStripes ? asStripeClasses[0] : '' } )
				.append( $('<td />', {
					'valign':  'top',
					'colSpan': _fnVisbleColumns( oSettings ),
					'class':   oSettings.oClasses.sRowEmpty
				} ).html( sZero ) )[0];
		}
	
		/* Header and footer callbacks */
		_fnCallbackFire( oSettings, 'aoHeaderCallback', 'header', [ $(oSettings.nTHead).children('tr')[0],
			_fnGetDataMaster( oSettings ), iDisplayStart, iDisplayEnd, aiDisplay ] );
	
		_fnCallbackFire( oSettings, 'aoFooterCallback', 'footer', [ $(oSettings.nTFoot).children('tr')[0],
			_fnGetDataMaster( oSettings ), iDisplayStart, iDisplayEnd, aiDisplay ] );
	
		var body = $(oSettings.nTBody);
	
		body.children().detach();
		body.append( $(anRows) );
	
		/* Call all required callback functions for the end of a draw */
		_fnCallbackFire( oSettings, 'aoDrawCallback', 'draw', [oSettings] );
	
		/* Draw is complete, sorting and filtering must be as well */
		oSettings.bSorted = false;
		oSettings.bFiltered = false;
		oSettings.bDrawing = false;
	}
	
	
	/**
	 * Redraw the table - taking account of the various features which are enabled
	 *  @param {object} oSettings dataTables settings object
	 *  @param {boolean} [holdPosition] Keep the current paging position. By default
	 *    the paging is reset to the first page
	 *  @memberof DataTable#oApi
	 */
	function _fnReDraw( settings, holdPosition )
	{
		var
			features = settings.oFeatures,
			sort     = features.bSort,
			filter   = features.bFilter;
	
		if ( sort ) {
			_fnSort( settings );
		}
	
		if ( filter ) {
			_fnFilterComplete( settings, settings.oPreviousSearch );
		}
		else {
			// No filtering, so we want to just use the display master
			settings.aiDisplay = settings.aiDisplayMaster.slice();
		}
	
		if ( holdPosition !== true ) {
			settings._iDisplayStart = 0;
		}
	
		// Let any modules know about the draw hold position state (used by
		// scrolling internally)
		settings._drawHold = holdPosition;
	
		_fnDraw( settings );
	
		settings._drawHold = false;
	}
	
	
	/**
	 * Add the options to the page HTML for the table
	 *  @param {object} oSettings dataTables settings object
	 *  @memberof DataTable#oApi
	 */
	function _fnAddOptionsHtml ( oSettings )
	{
		var classes = oSettings.oClasses;
		var table = $(oSettings.nTable);
		var holding = $('<div/>').insertBefore( table ); // Holding element for speed
		var features = oSettings.oFeatures;
	
		// All DataTables are wrapped in a div
		var insert = $('<div/>', {
			id:      oSettings.sTableId+'_wrapper',
			'class': classes.sWrapper + (oSettings.nTFoot ? '' : ' '+classes.sNoFooter)
		} );
	
		oSettings.nHolding = holding[0];
		oSettings.nTableWrapper = insert[0];
		oSettings.nTableReinsertBefore = oSettings.nTable.nextSibling;
	
		/* Loop over the user set positioning and place the elements as needed */
		var aDom = oSettings.sDom.split('');
		var featureNode, cOption, nNewNode, cNext, sAttr, j;
		for ( var i=0 ; i<aDom.length ; i++ )
		{
			featureNode = null;
			cOption = aDom[i];
	
			if ( cOption == '<' )
			{
				/* New container div */
				nNewNode = $('<div/>')[0];
	
				/* Check to see if we should append an id and/or a class name to the container */
				cNext = aDom[i+1];
				if ( cNext == "'" || cNext == '"' )
				{
					sAttr = "";
					j = 2;
					while ( aDom[i+j] != cNext )
					{
						sAttr += aDom[i+j];
						j++;
					}
	
					/* Replace jQuery UI constants @todo depreciated */
					if ( sAttr == "H" )
					{
						sAttr = classes.sJUIHeader;
					}
					else if ( sAttr == "F" )
					{
						sAttr = classes.sJUIFooter;
					}
	
					/* The attribute can be in the format of "#id.class", "#id" or "class" This logic
					 * breaks the string into parts and applies them as needed
					 */
					if ( sAttr.indexOf('.') != -1 )
					{
						var aSplit = sAttr.split('.');
						nNewNode.id = aSplit[0].substr(1, aSplit[0].length-1);
						nNewNode.className = aSplit[1];
					}
					else if ( sAttr.charAt(0) == "#" )
					{
						nNewNode.id = sAttr.substr(1, sAttr.length-1);
					}
					else
					{
						nNewNode.className = sAttr;
					}
	
					i += j; /* Move along the position array */
				}
	
				insert.append( nNewNode );
				insert = $(nNewNode);
			}
			else if ( cOption == '>' )
			{
				/* End container div */
				insert = insert.parent();
			}
			// @todo Move options into their own plugins?
			else if ( cOption == 'l' && features.bPaginate && features.bLengthChange )
			{
				/* Length */
				featureNode = _fnFeatureHtmlLength( oSettings );
			}
			else if ( cOption == 'f' && features.bFilter )
			{
				/* Filter */
				featureNode = _fnFeatureHtmlFilter( oSettings );
			}
			else if ( cOption == 'r' && features.bProcessing )
			{
				/* pRocessing */
				featureNode = _fnFeatureHtmlProcessing( oSettings );
			}
			else if ( cOption == 't' )
			{
				/* Table */
				featureNode = _fnFeatureHtmlTable( oSettings );
			}
			else if ( cOption ==  'i' && features.bInfo )
			{
				/* Info */
				featureNode = _fnFeatureHtmlInfo( oSettings );
			}
			else if ( cOption == 'p' && features.bPaginate )
			{
				/* Pagination */
				featureNode = _fnFeatureHtmlPaginate( oSettings );
			}
			else if ( DataTable.ext.feature.length !== 0 )
			{
				/* Plug-in features */
				var aoFeatures = DataTable.ext.feature;
				for ( var k=0, kLen=aoFeatures.length ; k<kLen ; k++ )
				{
					if ( cOption == aoFeatures[k].cFeature )
					{
						featureNode = aoFeatures[k].fnInit( oSettings );
						break;
					}
				}
			}
	
			/* Add to the 2D features array */
			if ( featureNode )
			{
				var aanFeatures = oSettings.aanFeatures;
	
				if ( ! aanFeatures[cOption] )
				{
					aanFeatures[cOption] = [];
				}
	
				aanFeatures[cOption].push( featureNode );
				insert.append( featureNode );
			}
		}
	
		/* Built our DOM structure - replace the holding div with what we want */
		holding.replaceWith( insert );
		oSettings.nHolding = null;
	}
	
	
	/**
	 * Use the DOM source to create up an array of header cells. The idea here is to
	 * create a layout grid (array) of rows x columns, which contains a reference
	 * to the cell that that point in the grid (regardless of col/rowspan), such that
	 * any column / row could be removed and the new grid constructed
	 *  @param array {object} aLayout Array to store the calculated layout in
	 *  @param {node} nThead The header/footer element for the table
	 *  @memberof DataTable#oApi
	 */
	function _fnDetectHeader ( aLayout, nThead )
	{
		var nTrs = $(nThead).children('tr');
		var nTr, nCell;
		var i, k, l, iLen, jLen, iColShifted, iColumn, iColspan, iRowspan;
		var bUnique;
		var fnShiftCol = function ( a, i, j ) {
			var k = a[i];
	                while ( k[j] ) {
				j++;
			}
			return j;
		};
	
		aLayout.splice( 0, aLayout.length );
	
		/* We know how many rows there are in the layout - so prep it */
		for ( i=0, iLen=nTrs.length ; i<iLen ; i++ )
		{
			aLayout.push( [] );
		}
	
		/* Calculate a layout array */
		for ( i=0, iLen=nTrs.length ; i<iLen ; i++ )
		{
			nTr = nTrs[i];
			iColumn = 0;
	
			/* For every cell in the row... */
			nCell = nTr.firstChild;
			while ( nCell ) {
				if ( nCell.nodeName.toUpperCase() == "TD" ||
				     nCell.nodeName.toUpperCase() == "TH" )
				{
					/* Get the col and rowspan attributes from the DOM and sanitise them */
					iColspan = nCell.getAttribute('colspan') * 1;
					iRowspan = nCell.getAttribute('rowspan') * 1;
					iColspan = (!iColspan || iColspan===0 || iColspan===1) ? 1 : iColspan;
					iRowspan = (!iRowspan || iRowspan===0 || iRowspan===1) ? 1 : iRowspan;
	
					/* There might be colspan cells already in this row, so shift our target
					 * accordingly
					 */
					iColShifted = fnShiftCol( aLayout, i, iColumn );
	
					/* Cache calculation for unique columns */
					bUnique = iColspan === 1 ? true : false;
	
					/* If there is col / rowspan, copy the information into the layout grid */
					for ( l=0 ; l<iColspan ; l++ )
					{
						for ( k=0 ; k<iRowspan ; k++ )
						{
							aLayout[i+k][iColShifted+l] = {
								"cell": nCell,
								"unique": bUnique
							};
							aLayout[i+k].nTr = nTr;
						}
					}
				}
				nCell = nCell.nextSibling;
			}
		}
	}
	
	
	/**
	 * Get an array of unique th elements, one for each column
	 *  @param {object} oSettings dataTables settings object
	 *  @param {node} nHeader automatically detect the layout from this node - optional
	 *  @param {array} aLayout thead/tfoot layout from _fnDetectHeader - optional
	 *  @returns array {node} aReturn list of unique th's
	 *  @memberof DataTable#oApi
	 */
	function _fnGetUniqueThs ( oSettings, nHeader, aLayout )
	{
		var aReturn = [];
		if ( !aLayout )
		{
			aLayout = oSettings.aoHeader;
			if ( nHeader )
			{
				aLayout = [];
				_fnDetectHeader( aLayout, nHeader );
			}
		}
	
		for ( var i=0, iLen=aLayout.length ; i<iLen ; i++ )
		{
			for ( var j=0, jLen=aLayout[i].length ; j<jLen ; j++ )
			{
				if ( aLayout[i][j].unique &&
					 (!aReturn[j] || !oSettings.bSortCellsTop) )
				{
					aReturn[j] = aLayout[i][j].cell;
				}
			}
		}
	
		return aReturn;
	}
	
	/**
	 * Create an Ajax call based on the table's settings, taking into account that
	 * parameters can have multiple forms, and backwards compatibility.
	 *
	 * @param {object} oSettings dataTables settings object
	 * @param {array} data Data to send to the server, required by
	 *     DataTables - may be augmented by developer callbacks
	 * @param {function} fn Callback function to run when data is obtained
	 */
	function _fnBuildAjax( oSettings, data, fn )
	{
		// Compatibility with 1.9-, allow fnServerData and event to manipulate
		_fnCallbackFire( oSettings, 'aoServerParams', 'serverParams', [data] );
	
		// Convert to object based for 1.10+ if using the old array scheme which can
		// come from server-side processing or serverParams
		if ( data && $.isArray(data) ) {
			var tmp = {};
			var rbracket = /(.*?)\[\]$/;
	
			$.each( data, function (key, val) {
				var match = val.name.match(rbracket);
	
				if ( match ) {
					// Support for arrays
					var name = match[0];
	
					if ( ! tmp[ name ] ) {
						tmp[ name ] = [];
					}
					tmp[ name ].push( val.value );
				}
				else {
					tmp[val.name] = val.value;
				}
			} );
			data = tmp;
		}
	
		var ajaxData;
		var ajax = oSettings.ajax;
		var instance = oSettings.oInstance;
		var callback = function ( json ) {
			_fnCallbackFire( oSettings, null, 'xhr', [oSettings, json, oSettings.jqXHR] );
			fn( json );
		};
	
		if ( $.isPlainObject( ajax ) && ajax.data )
		{
			ajaxData = ajax.data;
	
			var newData = typeof ajaxData === 'function' ?
				ajaxData( data, oSettings ) :  // fn can manipulate data or return
				ajaxData;                      // an object object or array to merge
	
			// If the function returned something, use that alone
			data = typeof ajaxData === 'function' && newData ?
				newData :
				$.extend( true, data, newData );
	
			// Remove the data property as we've resolved it already and don't want
			// jQuery to do it again (it is restored at the end of the function)
			delete ajax.data;
		}
	
		var baseAjax = {
			"data": data,
			"success": function (json) {
				var error = json.error || json.sError;
				if ( error ) {
					_fnLog( oSettings, 0, error );
				}
	
				oSettings.json = json;
				callback( json );
			},
			"dataType": "json",
			"cache": false,
			"type": oSettings.sServerMethod,
			"error": function (xhr, error, thrown) {
				var ret = _fnCallbackFire( oSettings, null, 'xhr', [oSettings, null, oSettings.jqXHR] );
	
				if ( $.inArray( true, ret ) === -1 ) {
					if ( error == "parsererror" ) {
						_fnLog( oSettings, 0, 'Invalid JSON response', 1 );
					}
					else if ( xhr.readyState === 4 ) {
						_fnLog( oSettings, 0, 'Ajax error', 7 );
					}
				}
	
				_fnProcessingDisplay( oSettings, false );
			}
		};
	
		// Store the data submitted for the API
		oSettings.oAjaxData = data;
	
		// Allow plug-ins and external processes to modify the data
		_fnCallbackFire( oSettings, null, 'preXhr', [oSettings, data] );
	
		if ( oSettings.fnServerData )
		{
			// DataTables 1.9- compatibility
			oSettings.fnServerData.call( instance,
				oSettings.sAjaxSource,
				$.map( data, function (val, key) { // Need to convert back to 1.9 trad format
					return { name: key, value: val };
				} ),
				callback,
				oSettings
			);
		}
		else if ( oSettings.sAjaxSource || typeof ajax === 'string' )
		{
			// DataTables 1.9- compatibility
			oSettings.jqXHR = $.ajax( $.extend( baseAjax, {
				url: ajax || oSettings.sAjaxSource
			} ) );
		}
		else if ( typeof ajax === 'function' )
		{
			// Is a function - let the caller define what needs to be done
			oSettings.jqXHR = ajax.call( instance, data, callback, oSettings );
		}
		else
		{
			// Object to extend the base settings
			oSettings.jqXHR = $.ajax( $.extend( baseAjax, ajax ) );
	
			// Restore for next time around
			ajax.data = ajaxData;
		}
	}
	
	
	/**
	 * Update the table using an Ajax call
	 *  @param {object} settings dataTables settings object
	 *  @returns {boolean} Block the table drawing or not
	 *  @memberof DataTable#oApi
	 */
	function _fnAjaxUpdate( settings )
	{
		if ( settings.bAjaxDataGet ) {
			settings.iDraw++;
			_fnProcessingDisplay( settings, true );
	
			_fnBuildAjax(
				settings,
				_fnAjaxParameters( settings ),
				function(json) {
					_fnAjaxUpdateDraw( settings, json );
				}
			);
	
			return false;
		}
		return true;
	}
	
	
	/**
	 * Build up the parameters in an object needed for a server-side processing
	 * request. Note that this is basically done twice, is different ways - a modern
	 * method which is used by default in DataTables 1.10 which uses objects and
	 * arrays, or the 1.9- method with is name / value pairs. 1.9 method is used if
	 * the sAjaxSource option is used in the initialisation, or the legacyAjax
	 * option is set.
	 *  @param {object} oSettings dataTables settings object
	 *  @returns {bool} block the table drawing or not
	 *  @memberof DataTable#oApi
	 */
	function _fnAjaxParameters( settings )
	{
		var
			columns = settings.aoColumns,
			columnCount = columns.length,
			features = settings.oFeatures,
			preSearch = settings.oPreviousSearch,
			preColSearch = settings.aoPreSearchCols,
			i, data = [], dataProp, column, columnSearch,
			sort = _fnSortFlatten( settings ),
			displayStart = settings._iDisplayStart,
			displayLength = features.bPaginate !== false ?
				settings._iDisplayLength :
				-1;
	
		var param = function ( name, value ) {
			data.push( { 'name': name, 'value': value } );
		};
	
		// DataTables 1.9- compatible method
		param( 'sEcho',          settings.iDraw );
		param( 'iColumns',       columnCount );
		param( 'sColumns',       _pluck( columns, 'sName' ).join(',') );
		param( 'iDisplayStart',  displayStart );
		param( 'iDisplayLength', displayLength );
	
		// DataTables 1.10+ method
		var d = {
			draw:    settings.iDraw,
			columns: [],
			order:   [],
			start:   displayStart,
			length:  displayLength,
			search:  {
				value: preSearch.sSearch,
				regex: preSearch.bRegex
			}
		};
	
		for ( i=0 ; i<columnCount ; i++ ) {
			column = columns[i];
			columnSearch = preColSearch[i];
			dataProp = typeof column.mData=="function" ? 'function' : column.mData ;
	
			d.columns.push( {
				data:       dataProp,
				name:       column.sName,
				searchable: column.bSearchable,
				orderable:  column.bSortable,
				search:     {
					value: columnSearch.sSearch,
					regex: columnSearch.bRegex
				}
			} );
	
			param( "mDataProp_"+i, dataProp );
	
			if ( features.bFilter ) {
				param( 'sSearch_'+i,     columnSearch.sSearch );
				param( 'bRegex_'+i,      columnSearch.bRegex );
				param( 'bSearchable_'+i, column.bSearchable );
			}
	
			if ( features.bSort ) {
				param( 'bSortable_'+i, column.bSortable );
			}
		}
	
		if ( features.bFilter ) {
			param( 'sSearch', preSearch.sSearch );
			param( 'bRegex', preSearch.bRegex );
		}
	
		if ( features.bSort ) {
			$.each( sort, function ( i, val ) {
				d.order.push( { column: val.col, dir: val.dir } );
	
				param( 'iSortCol_'+i, val.col );
				param( 'sSortDir_'+i, val.dir );
			} );
	
			param( 'iSortingCols', sort.length );
		}
	
		// If the legacy.ajax parameter is null, then we automatically decide which
		// form to use, based on sAjaxSource
		var legacy = DataTable.ext.legacy.ajax;
		if ( legacy === null ) {
			return settings.sAjaxSource ? data : d;
		}
	
		// Otherwise, if legacy has been specified then we use that to decide on the
		// form
		return legacy ? data : d;
	}
	
	
	/**
	 * Data the data from the server (nuking the old) and redraw the table
	 *  @param {object} oSettings dataTables settings object
	 *  @param {object} json json data return from the server.
	 *  @param {string} json.sEcho Tracking flag for DataTables to match requests
	 *  @param {int} json.iTotalRecords Number of records in the data set, not accounting for filtering
	 *  @param {int} json.iTotalDisplayRecords Number of records in the data set, accounting for filtering
	 *  @param {array} json.aaData The data to display on this page
	 *  @param {string} [json.sColumns] Column ordering (sName, comma separated)
	 *  @memberof DataTable#oApi
	 */
	function _fnAjaxUpdateDraw ( settings, json )
	{
		// v1.10 uses camelCase variables, while 1.9 uses Hungarian notation.
		// Support both
		var compat = function ( old, modern ) {
			return json[old] !== undefined ? json[old] : json[modern];
		};
	
		var data = _fnAjaxDataSrc( settings, json );
		var draw            = compat( 'sEcho',                'draw' );
		var recordsTotal    = compat( 'iTotalRecords',        'recordsTotal' );
		var recordsFiltered = compat( 'iTotalDisplayRecords', 'recordsFiltered' );
	
		if ( draw ) {
			// Protect against out of sequence returns
			if ( draw*1 < settings.iDraw ) {
				return;
			}
			settings.iDraw = draw * 1;
		}
	
		_fnClearTable( settings );
		settings._iRecordsTotal   = parseInt(recordsTotal, 10);
		settings._iRecordsDisplay = parseInt(recordsFiltered, 10);
	
		for ( var i=0, ien=data.length ; i<ien ; i++ ) {
			_fnAddData( settings, data[i] );
		}
		settings.aiDisplay = settings.aiDisplayMaster.slice();
	
		settings.bAjaxDataGet = false;
		_fnDraw( settings );
	
		if ( ! settings._bInitComplete ) {
			_fnInitComplete( settings, json );
		}
	
		settings.bAjaxDataGet = true;
		_fnProcessingDisplay( settings, false );
	}
	
	
	/**
	 * Get the data from the JSON data source to use for drawing a table. Using
	 * `_fnGetObjectDataFn` allows the data to be sourced from a property of the
	 * source object, or from a processing function.
	 *  @param {object} oSettings dataTables settings object
	 *  @param  {object} json Data source object / array from the server
	 *  @return {array} Array of data to use
	 */
	function _fnAjaxDataSrc ( oSettings, json )
	{
		var dataSrc = $.isPlainObject( oSettings.ajax ) && oSettings.ajax.dataSrc !== undefined ?
			oSettings.ajax.dataSrc :
			oSettings.sAjaxDataProp; // Compatibility with 1.9-.
	
		// Compatibility with 1.9-. In order to read from aaData, check if the
		// default has been changed, if not, check for aaData
		if ( dataSrc === 'data' ) {
			return json.aaData || json[dataSrc];
		}
	
		return dataSrc !== "" ?
			_fnGetObjectDataFn( dataSrc )( json ) :
			json;
	}
	
	/**
	 * Generate the node required for filtering text
	 *  @returns {node} Filter control element
	 *  @param {object} oSettings dataTables settings object
	 *  @memberof DataTable#oApi
	 */
	function _fnFeatureHtmlFilter ( settings )
	{
		var classes = settings.oClasses;
		var tableId = settings.sTableId;
		var language = settings.oLanguage;
		var previousSearch = settings.oPreviousSearch;
		var features = settings.aanFeatures;
		var input = '<input type="search" class="'+classes.sFilterInput+'"/>';
	
		var str = language.sSearch;
		str = str.match(/_INPUT_/) ?
			str.replace('_INPUT_', input) :
			str+input;
	
		var filter = $('<div/>', {
				'id': ! features.f ? tableId+'_filter' : null,
				'class': classes.sFilter
			} )
			.append( $('<label/>' ).append( str ) );
	
		var searchFn = function() {
			/* Update all other filter input elements for the new display */
			var n = features.f;
			var val = !this.value ? "" : this.value; // mental IE8 fix :-(
	
			/* Now do the filter */
			if ( val != previousSearch.sSearch ) {
				_fnFilterComplete( settings, {
					"sSearch": val,
					"bRegex": previousSearch.bRegex,
					"bSmart": previousSearch.bSmart ,
					"bCaseInsensitive": previousSearch.bCaseInsensitive
				} );
	
				// Need to redraw, without resorting
				settings._iDisplayStart = 0;
				_fnDraw( settings );
			}
		};
	
		var searchDelay = settings.searchDelay !== null ?
			settings.searchDelay :
			_fnDataSource( settings ) === 'ssp' ?
				400 :
				0;
	
		var jqFilter = $('input', filter)
			.val( previousSearch.sSearch )
			.attr( 'placeholder', language.sSearchPlaceholder )
			.on(
				'keyup.DT search.DT input.DT paste.DT cut.DT',
				searchDelay ?
					_fnThrottle( searchFn, searchDelay ) :
					searchFn
			)
			.on( 'keypress.DT', function(e) {
				/* Prevent form submission */
				if ( e.keyCode == 13 ) {
					return false;
				}
			} )
			.attr('aria-controls', tableId);
	
		// Update the input elements whenever the table is filtered
		$(settings.nTable).on( 'search.dt.DT', function ( ev, s ) {
			if ( settings === s ) {
				// IE9 throws an 'unknown error' if document.activeElement is used
				// inside an iframe or frame...
				try {
					if ( jqFilter[0] !== document.activeElement ) {
						jqFilter.val( previousSearch.sSearch );
					}
				}
				catch ( e ) {}
			}
		} );
	
		return filter[0];
	}
	
	
	/**
	 * Filter the table using both the global filter and column based filtering
	 *  @param {object} oSettings dataTables settings object
	 *  @param {object} oSearch search information
	 *  @param {int} [iForce] force a research of the master array (1) or not (undefined or 0)
	 *  @memberof DataTable#oApi
	 */
	function _fnFilterComplete ( oSettings, oInput, iForce )
	{
		var oPrevSearch = oSettings.oPreviousSearch;
		var aoPrevSearch = oSettings.aoPreSearchCols;
		var fnSaveFilter = function ( oFilter ) {
			/* Save the filtering values */
			oPrevSearch.sSearch = oFilter.sSearch;
			oPrevSearch.bRegex = oFilter.bRegex;
			oPrevSearch.bSmart = oFilter.bSmart;
			oPrevSearch.bCaseInsensitive = oFilter.bCaseInsensitive;
		};
		var fnRegex = function ( o ) {
			// Backwards compatibility with the bEscapeRegex option
			return o.bEscapeRegex !== undefined ? !o.bEscapeRegex : o.bRegex;
		};
	
		// Resolve any column types that are unknown due to addition or invalidation
		// @todo As per sort - can this be moved into an event handler?
		_fnColumnTypes( oSettings );
	
		/* In server-side processing all filtering is done by the server, so no point hanging around here */
		if ( _fnDataSource( oSettings ) != 'ssp' )
		{
			/* Global filter */
			_fnFilter( oSettings, oInput.sSearch, iForce, fnRegex(oInput), oInput.bSmart, oInput.bCaseInsensitive );
			fnSaveFilter( oInput );
	
			/* Now do the individual column filter */
			for ( var i=0 ; i<aoPrevSearch.length ; i++ )
			{
				_fnFilterColumn( oSettings, aoPrevSearch[i].sSearch, i, fnRegex(aoPrevSearch[i]),
					aoPrevSearch[i].bSmart, aoPrevSearch[i].bCaseInsensitive );
			}
	
			/* Custom filtering */
			_fnFilterCustom( oSettings );
		}
		else
		{
			fnSaveFilter( oInput );
		}
	
		/* Tell the draw function we have been filtering */
		oSettings.bFiltered = true;
		_fnCallbackFire( oSettings, null, 'search', [oSettings] );
	}
	
	
	/**
	 * Apply custom filtering functions
	 *  @param {object} oSettings dataTables settings object
	 *  @memberof DataTable#oApi
	 */
	function _fnFilterCustom( settings )
	{
		var filters = DataTable.ext.search;
		var displayRows = settings.aiDisplay;
		var row, rowIdx;
	
		for ( var i=0, ien=filters.length ; i<ien ; i++ ) {
			var rows = [];
	
			// Loop over each row and see if it should be included
			for ( var j=0, jen=displayRows.length ; j<jen ; j++ ) {
				rowIdx = displayRows[ j ];
				row = settings.aoData[ rowIdx ];
	
				if ( filters[i]( settings, row._aFilterData, rowIdx, row._aData, j ) ) {
					rows.push( rowIdx );
				}
			}
	
			// So the array reference doesn't break set the results into the
			// existing array
			displayRows.length = 0;
			$.merge( displayRows, rows );
		}
	}
	
	
	/**
	 * Filter the table on a per-column basis
	 *  @param {object} oSettings dataTables settings object
	 *  @param {string} sInput string to filter on
	 *  @param {int} iColumn column to filter
	 *  @param {bool} bRegex treat search string as a regular expression or not
	 *  @param {bool} bSmart use smart filtering or not
	 *  @param {bool} bCaseInsensitive Do case insenstive matching or not
	 *  @memberof DataTable#oApi
	 */
	function _fnFilterColumn ( settings, searchStr, colIdx, regex, smart, caseInsensitive )
	{
		if ( searchStr === '' ) {
			return;
		}
	
		var data;
		var out = [];
		var display = settings.aiDisplay;
		var rpSearch = _fnFilterCreateSearch( searchStr, regex, smart, caseInsensitive );
	
		for ( var i=0 ; i<display.length ; i++ ) {
			data = settings.aoData[ display[i] ]._aFilterData[ colIdx ];
	
			if ( rpSearch.test( data ) ) {
				out.push( display[i] );
			}
		}
	
		settings.aiDisplay = out;
	}
	
	
	/**
	 * Filter the data table based on user input and draw the table
	 *  @param {object} settings dataTables settings object
	 *  @param {string} input string to filter on
	 *  @param {int} force optional - force a research of the master array (1) or not (undefined or 0)
	 *  @param {bool} regex treat as a regular expression or not
	 *  @param {bool} smart perform smart filtering or not
	 *  @param {bool} caseInsensitive Do case insenstive matching or not
	 *  @memberof DataTable#oApi
	 */
	function _fnFilter( settings, input, force, regex, smart, caseInsensitive )
	{
		var rpSearch = _fnFilterCreateSearch( input, regex, smart, caseInsensitive );
		var prevSearch = settings.oPreviousSearch.sSearch;
		var displayMaster = settings.aiDisplayMaster;
		var display, invalidated, i;
		var filtered = [];
	
		// Need to take account of custom filtering functions - always filter
		if ( DataTable.ext.search.length !== 0 ) {
			force = true;
		}
	
		// Check if any of the rows were invalidated
		invalidated = _fnFilterData( settings );
	
		// If the input is blank - we just want the full data set
		if ( input.length <= 0 ) {
			settings.aiDisplay = displayMaster.slice();
		}
		else {
			// New search - start from the master array
			if ( invalidated ||
				 force ||
				 prevSearch.length > input.length ||
				 input.indexOf(prevSearch) !== 0 ||
				 settings.bSorted // On resort, the display master needs to be
				                  // re-filtered since indexes will have changed
			) {
				settings.aiDisplay = displayMaster.slice();
			}
	
			// Search the display array
			display = settings.aiDisplay;
	
			for ( i=0 ; i<display.length ; i++ ) {
				if ( rpSearch.test( settings.aoData[ display[i] ]._sFilterRow ) ) {
					filtered.push( display[i] );
				}
			}
	
			settings.aiDisplay = filtered;
		}
	}
	
	
	/**
	 * Build a regular expression object suitable for searching a table
	 *  @param {string} sSearch string to search for
	 *  @param {bool} bRegex treat as a regular expression or not
	 *  @param {bool} bSmart perform smart filtering or not
	 *  @param {bool} bCaseInsensitive Do case insensitive matching or not
	 *  @returns {RegExp} constructed object
	 *  @memberof DataTable#oApi
	 */
	function _fnFilterCreateSearch( search, regex, smart, caseInsensitive )
	{
		search = regex ?
			search :
			_fnEscapeRegex( search );
		
		if ( smart ) {
			/* For smart filtering we want to allow the search to work regardless of
			 * word order. We also want double quoted text to be preserved, so word
			 * order is important - a la google. So this is what we want to
			 * generate:
			 * 
			 * ^(?=.*?\bone\b)(?=.*?\btwo three\b)(?=.*?\bfour\b).*$
			 */
			var a = $.map( search.match( /"[^"]+"|[^ ]+/g ) || [''], function ( word ) {
				if ( word.charAt(0) === '"' ) {
					var m = word.match( /^"(.*)"$/ );
					word = m ? m[1] : word;
				}
	
				return word.replace('"', '');
			} );
	
			search = '^(?=.*?'+a.join( ')(?=.*?' )+').*$';
		}
	
		return new RegExp( search, caseInsensitive ? 'i' : '' );
	}
	
	
	/**
	 * Escape a string such that it can be used in a regular expression
	 *  @param {string} sVal string to escape
	 *  @returns {string} escaped string
	 *  @memberof DataTable#oApi
	 */
	var _fnEscapeRegex = DataTable.util.escapeRegex;
	
	var __filter_div = $('<div>')[0];
	var __filter_div_textContent = __filter_div.textContent !== undefined;
	
	// Update the filtering data for each row if needed (by invalidation or first run)
	function _fnFilterData ( settings )
	{
		var columns = settings.aoColumns;
		var column;
		var i, j, ien, jen, filterData, cellData, row;
		var fomatters = DataTable.ext.type.search;
		var wasInvalidated = false;
	
		for ( i=0, ien=settings.aoData.length ; i<ien ; i++ ) {
			row = settings.aoData[i];
	
			if ( ! row._aFilterData ) {
				filterData = [];
	
				for ( j=0, jen=columns.length ; j<jen ; j++ ) {
					column = columns[j];
	
					if ( column.bSearchable ) {
						cellData = _fnGetCellData( settings, i, j, 'filter' );
	
						if ( fomatters[ column.sType ] ) {
							cellData = fomatters[ column.sType ]( cellData );
						}
	
						// Search in DataTables 1.10 is string based. In 1.11 this
						// should be altered to also allow strict type checking.
						if ( cellData === null ) {
							cellData = '';
						}
	
						if ( typeof cellData !== 'string' && cellData.toString ) {
							cellData = cellData.toString();
						}
					}
					else {
						cellData = '';
					}
	
					// If it looks like there is an HTML entity in the string,
					// attempt to decode it so sorting works as expected. Note that
					// we could use a single line of jQuery to do this, but the DOM
					// method used here is much faster http://jsperf.com/html-decode
					if ( cellData.indexOf && cellData.indexOf('&') !== -1 ) {
						__filter_div.innerHTML = cellData;
						cellData = __filter_div_textContent ?
							__filter_div.textContent :
							__filter_div.innerText;
					}
	
					if ( cellData.replace ) {
						cellData = cellData.replace(/[\r\n]/g, '');
					}
	
					filterData.push( cellData );
				}
	
				row._aFilterData = filterData;
				row._sFilterRow = filterData.join('  ');
				wasInvalidated = true;
			}
		}
	
		return wasInvalidated;
	}
	
	
	/**
	 * Convert from the internal Hungarian notation to camelCase for external
	 * interaction
	 *  @param {object} obj Object to convert
	 *  @returns {object} Inverted object
	 *  @memberof DataTable#oApi
	 */
	function _fnSearchToCamel ( obj )
	{
		return {
			search:          obj.sSearch,
			smart:           obj.bSmart,
			regex:           obj.bRegex,
			caseInsensitive: obj.bCaseInsensitive
		};
	}
	
	
	
	/**
	 * Convert from camelCase notation to the internal Hungarian. We could use the
	 * Hungarian convert function here, but this is cleaner
	 *  @param {object} obj Object to convert
	 *  @returns {object} Inverted object
	 *  @memberof DataTable#oApi
	 */
	function _fnSearchToHung ( obj )
	{
		return {
			sSearch:          obj.search,
			bSmart:           obj.smart,
			bRegex:           obj.regex,
			bCaseInsensitive: obj.caseInsensitive
		};
	}
	
	/**
	 * Generate the node required for the info display
	 *  @param {object} oSettings dataTables settings object
	 *  @returns {node} Information element
	 *  @memberof DataTable#oApi
	 */
	function _fnFeatureHtmlInfo ( settings )
	{
		var
			tid = settings.sTableId,
			nodes = settings.aanFeatures.i,
			n = $('<div/>', {
				'class': settings.oClasses.sInfo,
				'id': ! nodes ? tid+'_info' : null
			} );
	
		if ( ! nodes ) {
			// Update display on each draw
			settings.aoDrawCallback.push( {
				"fn": _fnUpdateInfo,
				"sName": "information"
			} );
	
			n
				.attr( 'role', 'status' )
				.attr( 'aria-live', 'polite' );
	
			// Table is described by our info div
			$(settings.nTable).attr( 'aria-describedby', tid+'_info' );
		}
	
		return n[0];
	}
	
	
	/**
	 * Update the information elements in the display
	 *  @param {object} settings dataTables settings object
	 *  @memberof DataTable#oApi
	 */
	function _fnUpdateInfo ( settings )
	{
		/* Show information about the table */
		var nodes = settings.aanFeatures.i;
		if ( nodes.length === 0 ) {
			return;
		}
	
		var
			lang  = settings.oLanguage,
			start = settings._iDisplayStart+1,
			end   = settings.fnDisplayEnd(),
			max   = settings.fnRecordsTotal(),
			total = settings.fnRecordsDisplay(),
			out   = total ?
				lang.sInfo :
				lang.sInfoEmpty;
	
		if ( total !== max ) {
			/* Record set after filtering */
			out += ' ' + lang.sInfoFiltered;
		}
	
		// Convert the macros
		out += lang.sInfoPostFix;
		out = _fnInfoMacros( settings, out );
	
		var callback = lang.fnInfoCallback;
		if ( callback !== null ) {
			out = callback.call( settings.oInstance,
				settings, start, end, max, total, out
			);
		}
	
		$(nodes).html( out );
	}
	
	
	function _fnInfoMacros ( settings, str )
	{
		// When infinite scrolling, we are always starting at 1. _iDisplayStart is used only
		// internally
		var
			formatter  = settings.fnFormatNumber,
			start      = settings._iDisplayStart+1,
			len        = settings._iDisplayLength,
			vis        = settings.fnRecordsDisplay(),
			all        = len === -1;
	
		return str.
			replace(/_START_/g, formatter.call( settings, start ) ).
			replace(/_END_/g,   formatter.call( settings, settings.fnDisplayEnd() ) ).
			replace(/_MAX_/g,   formatter.call( settings, settings.fnRecordsTotal() ) ).
			replace(/_TOTAL_/g, formatter.call( settings, vis ) ).
			replace(/_PAGE_/g,  formatter.call( settings, all ? 1 : Math.ceil( start / len ) ) ).
			replace(/_PAGES_/g, formatter.call( settings, all ? 1 : Math.ceil( vis / len ) ) );
	}
	
	
	
	/**
	 * Draw the table for the first time, adding all required features
	 *  @param {object} settings dataTables settings object
	 *  @memberof DataTable#oApi
	 */
	function _fnInitialise ( settings )
	{
		var i, iLen, iAjaxStart=settings.iInitDisplayStart;
		var columns = settings.aoColumns, column;
		var features = settings.oFeatures;
		var deferLoading = settings.bDeferLoading; // value modified by the draw
	
		/* Ensure that the table data is fully initialised */
		if ( ! settings.bInitialised ) {
			setTimeout( function(){ _fnInitialise( settings ); }, 200 );
			return;
		}
	
		/* Show the display HTML options */
		_fnAddOptionsHtml( settings );
	
		/* Build and draw the header / footer for the table */
		_fnBuildHead( settings );
		_fnDrawHead( settings, settings.aoHeader );
		_fnDrawHead( settings, settings.aoFooter );
	
		/* Okay to show that something is going on now */
		_fnProcessingDisplay( settings, true );
	
		/* Calculate sizes for columns */
		if ( features.bAutoWidth ) {
			_fnCalculateColumnWidths( settings );
		}
	
		for ( i=0, iLen=columns.length ; i<iLen ; i++ ) {
			column = columns[i];
	
			if ( column.sWidth ) {
				column.nTh.style.width = _fnStringToCss( column.sWidth );
			}
		}
	
		_fnCallbackFire( settings, null, 'preInit', [settings] );
	
		// If there is default sorting required - let's do it. The sort function
		// will do the drawing for us. Otherwise we draw the table regardless of the
		// Ajax source - this allows the table to look initialised for Ajax sourcing
		// data (show 'loading' message possibly)
		_fnReDraw( settings );
	
		// Server-side processing init complete is done by _fnAjaxUpdateDraw
		var dataSrc = _fnDataSource( settings );
		if ( dataSrc != 'ssp' || deferLoading ) {
			// if there is an ajax source load the data
			if ( dataSrc == 'ajax' ) {
				_fnBuildAjax( settings, [], function(json) {
					var aData = _fnAjaxDataSrc( settings, json );
	
					// Got the data - add it to the table
					for ( i=0 ; i<aData.length ; i++ ) {
						_fnAddData( settings, aData[i] );
					}
	
					// Reset the init display for cookie saving. We've already done
					// a filter, and therefore cleared it before. So we need to make
					// it appear 'fresh'
					settings.iInitDisplayStart = iAjaxStart;
	
					_fnReDraw( settings );
	
					_fnProcessingDisplay( settings, false );
					_fnInitComplete( settings, json );
				}, settings );
			}
			else {
				_fnProcessingDisplay( settings, false );
				_fnInitComplete( settings );
			}
		}
	}
	
	
	/**
	 * Draw the table for the first time, adding all required features
	 *  @param {object} oSettings dataTables settings object
	 *  @param {object} [json] JSON from the server that completed the table, if using Ajax source
	 *    with client-side processing (optional)
	 *  @memberof DataTable#oApi
	 */
	function _fnInitComplete ( settings, json )
	{
		settings._bInitComplete = true;
	
		// When data was added after the initialisation (data or Ajax) we need to
		// calculate the column sizing
		if ( json || settings.oInit.aaData ) {
			_fnAdjustColumnSizing( settings );
		}
	
		_fnCallbackFire( settings, null, 'plugin-init', [settings, json] );
		_fnCallbackFire( settings, 'aoInitComplete', 'init', [settings, json] );
	}
	
	
	function _fnLengthChange ( settings, val )
	{
		var len = parseInt( val, 10 );
		settings._iDisplayLength = len;
	
		_fnLengthOverflow( settings );
	
		// Fire length change event
		_fnCallbackFire( settings, null, 'length', [settings, len] );
	}
	
	
	/**
	 * Generate the node required for user display length changing
	 *  @param {object} settings dataTables settings object
	 *  @returns {node} Display length feature node
	 *  @memberof DataTable#oApi
	 */
	function _fnFeatureHtmlLength ( settings )
	{
		var
			classes  = settings.oClasses,
			tableId  = settings.sTableId,
			menu     = settings.aLengthMenu,
			d2       = $.isArray( menu[0] ),
			lengths  = d2 ? menu[0] : menu,
			language = d2 ? menu[1] : menu;
	
		var select = $('<select/>', {
			'name':          tableId+'_length',
			'aria-controls': tableId,
			'class':         classes.sLengthSelect
		} );
	
		for ( var i=0, ien=lengths.length ; i<ien ; i++ ) {
			select[0][ i ] = new Option(
				typeof language[i] === 'number' ?
					settings.fnFormatNumber( language[i] ) :
					language[i],
				lengths[i]
			);
		}
	
		var div = $('<div><label/></div>').addClass( classes.sLength );
		if ( ! settings.aanFeatures.l ) {
			div[0].id = tableId+'_length';
		}
	
		div.children().append(
			settings.oLanguage.sLengthMenu.replace( '_MENU_', select[0].outerHTML )
		);
	
		// Can't use `select` variable as user might provide their own and the
		// reference is broken by the use of outerHTML
		$('select', div)
			.val( settings._iDisplayLength )
			.on( 'change.DT', function(e) {
				_fnLengthChange( settings, $(this).val() );
				_fnDraw( settings );
			} );
	
		// Update node value whenever anything changes the table's length
		$(settings.nTable).on( 'length.dt.DT', function (e, s, len) {
			if ( settings === s ) {
				$('select', div).val( len );
			}
		} );
	
		return div[0];
	}
	
	
	
	/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
	 * Note that most of the paging logic is done in
	 * DataTable.ext.pager
	 */
	
	/**
	 * Generate the node required for default pagination
	 *  @param {object} oSettings dataTables settings object
	 *  @returns {node} Pagination feature node
	 *  @memberof DataTable#oApi
	 */
	function _fnFeatureHtmlPaginate ( settings )
	{
		var
			type   = settings.sPaginationType,
			plugin = DataTable.ext.pager[ type ],
			modern = typeof plugin === 'function',
			redraw = function( settings ) {
				_fnDraw( settings );
			},
			node = $('<div/>').addClass( settings.oClasses.sPaging + type )[0],
			features = settings.aanFeatures;
	
		if ( ! modern ) {
			plugin.fnInit( settings, node, redraw );
		}
	
		/* Add a draw callback for the pagination on first instance, to update the paging display */
		if ( ! features.p )
		{
			node.id = settings.sTableId+'_paginate';
	
			settings.aoDrawCallback.push( {
				"fn": function( settings ) {
					if ( modern ) {
						var
							start      = settings._iDisplayStart,
							len        = settings._iDisplayLength,
							visRecords = settings.fnRecordsDisplay(),
							all        = len === -1,
							page = all ? 0 : Math.ceil( start / len ),
							pages = all ? 1 : Math.ceil( visRecords / len ),
							buttons = plugin(page, pages),
							i, ien;
	
						for ( i=0, ien=features.p.length ; i<ien ; i++ ) {
							_fnRenderer( settings, 'pageButton' )(
								settings, features.p[i], i, buttons, page, pages
							);
						}
					}
					else {
						plugin.fnUpdate( settings, redraw );
					}
				},
				"sName": "pagination"
			} );
		}
	
		return node;
	}
	
	
	/**
	 * Alter the display settings to change the page
	 *  @param {object} settings DataTables settings object
	 *  @param {string|int} action Paging action to take: "first", "previous",
	 *    "next" or "last" or page number to jump to (integer)
	 *  @param [bool] redraw Automatically draw the update or not
	 *  @returns {bool} true page has changed, false - no change
	 *  @memberof DataTable#oApi
	 */
	function _fnPageChange ( settings, action, redraw )
	{
		var
			start     = settings._iDisplayStart,
			len       = settings._iDisplayLength,
			records   = settings.fnRecordsDisplay();
	
		if ( records === 0 || len === -1 )
		{
			start = 0;
		}
		else if ( typeof action === "number" )
		{
			start = action * len;
	
			if ( start > records )
			{
				start = 0;
			}
		}
		else if ( action == "first" )
		{
			start = 0;
		}
		else if ( action == "previous" )
		{
			start = len >= 0 ?
				start - len :
				0;
	
			if ( start < 0 )
			{
			  start = 0;
			}
		}
		else if ( action == "next" )
		{
			if ( start + len < records )
			{
				start += len;
			}
		}
		else if ( action == "last" )
		{
			start = Math.floor( (records-1) / len) * len;
		}
		else
		{
			_fnLog( settings, 0, "Unknown paging action: "+action, 5 );
		}
	
		var changed = settings._iDisplayStart !== start;
		settings._iDisplayStart = start;
	
		if ( changed ) {
			_fnCallbackFire( settings, null, 'page', [settings] );
	
			if ( redraw ) {
				_fnDraw( settings );
			}
		}
	
		return changed;
	}
	
	
	
	/**
	 * Generate the node required for the processing node
	 *  @param {object} settings dataTables settings object
	 *  @returns {node} Processing element
	 *  @memberof DataTable#oApi
	 */
	function _fnFeatureHtmlProcessing ( settings )
	{
		return $('<div/>', {
				'id': ! settings.aanFeatures.r ? settings.sTableId+'_processing' : null,
				'class': settings.oClasses.sProcessing
			} )
			.html( settings.oLanguage.sProcessing )
			.insertBefore( settings.nTable )[0];
	}
	
	
	/**
	 * Display or hide the processing indicator
	 *  @param {object} settings dataTables settings object
	 *  @param {bool} show Show the processing indicator (true) or not (false)
	 *  @memberof DataTable#oApi
	 */
	function _fnProcessingDisplay ( settings, show )
	{
		if ( settings.oFeatures.bProcessing ) {
			$(settings.aanFeatures.r).css( 'display', show ? 'block' : 'none' );
		}
	
		_fnCallbackFire( settings, null, 'processing', [settings, show] );
	}
	
	/**
	 * Add any control elements for the table - specifically scrolling
	 *  @param {object} settings dataTables settings object
	 *  @returns {node} Node to add to the DOM
	 *  @memberof DataTable#oApi
	 */
	function _fnFeatureHtmlTable ( settings )
	{
		var table = $(settings.nTable);
	
		// Add the ARIA grid role to the table
		table.attr( 'role', 'grid' );
	
		// Scrolling from here on in
		var scroll = settings.oScroll;
	
		if ( scroll.sX === '' && scroll.sY === '' ) {
			return settings.nTable;
		}
	
		var scrollX = scroll.sX;
		var scrollY = scroll.sY;
		var classes = settings.oClasses;
		var caption = table.children('caption');
		var captionSide = caption.length ? caption[0]._captionSide : null;
		var headerClone = $( table[0].cloneNode(false) );
		var footerClone = $( table[0].cloneNode(false) );
		var footer = table.children('tfoot');
		var _div = '<div/>';
		var size = function ( s ) {
			return !s ? null : _fnStringToCss( s );
		};
	
		if ( ! footer.length ) {
			footer = null;
		}
	
		/*
		 * The HTML structure that we want to generate in this function is:
		 *  div - scroller
		 *    div - scroll head
		 *      div - scroll head inner
		 *        table - scroll head table
		 *          thead - thead
		 *    div - scroll body
		 *      table - table (master table)
		 *        thead - thead clone for sizing
		 *        tbody - tbody
		 *    div - scroll foot
		 *      div - scroll foot inner
		 *        table - scroll foot table
		 *          tfoot - tfoot
		 */
		var scroller = $( _div, { 'class': classes.sScrollWrapper } )
			.append(
				$(_div, { 'class': classes.sScrollHead } )
					.css( {
						overflow: 'hidden',
						position: 'relative',
						border: 0,
						width: scrollX ? size(scrollX) : '100%'
					} )
					.append(
						$(_div, { 'class': classes.sScrollHeadInner } )
							.css( {
								'box-sizing': 'content-box',
								width: scroll.sXInner || '100%'
							} )
							.append(
								headerClone
									.removeAttr('id')
									.css( 'margin-left', 0 )
									.append( captionSide === 'top' ? caption : null )
									.append(
										table.children('thead')
									)
							)
					)
			)
			.append(
				$(_div, { 'class': classes.sScrollBody } )
					.css( {
						position: 'relative',
						overflow: 'auto',
						width: size( scrollX )
					} )
					.append( table )
			);
	
		if ( footer ) {
			scroller.append(
				$(_div, { 'class': classes.sScrollFoot } )
					.css( {
						overflow: 'hidden',
						border: 0,
						width: scrollX ? size(scrollX) : '100%'
					} )
					.append(
						$(_div, { 'class': classes.sScrollFootInner } )
							.append(
								footerClone
									.removeAttr('id')
									.css( 'margin-left', 0 )
									.append( captionSide === 'bottom' ? caption : null )
									.append(
										table.children('tfoot')
									)
							)
					)
			);
		}
	
		var children = scroller.children();
		var scrollHead = children[0];
		var scrollBody = children[1];
		var scrollFoot = footer ? children[2] : null;
	
		// When the body is scrolled, then we also want to scroll the headers
		if ( scrollX ) {
			$(scrollBody).on( 'scroll.DT', function (e) {
				var scrollLeft = this.scrollLeft;
	
				scrollHead.scrollLeft = scrollLeft;
	
				if ( footer ) {
					scrollFoot.scrollLeft = scrollLeft;
				}
			} );
		}
	
		$(scrollBody).css(
			scrollY && scroll.bCollapse ? 'max-height' : 'height', 
			scrollY
		);
	
		settings.nScrollHead = scrollHead;
		settings.nScrollBody = scrollBody;
		settings.nScrollFoot = scrollFoot;
	
		// On redraw - align columns
		settings.aoDrawCallback.push( {
			"fn": _fnScrollDraw,
			"sName": "scrolling"
		} );
	
		return scroller[0];
	}
	
	
	
	/**
	 * Update the header, footer and body tables for resizing - i.e. column
	 * alignment.
	 *
	 * Welcome to the most horrible function DataTables. The process that this
	 * function follows is basically:
	 *   1. Re-create the table inside the scrolling div
	 *   2. Take live measurements from the DOM
	 *   3. Apply the measurements to align the columns
	 *   4. Clean up
	 *
	 *  @param {object} settings dataTables settings object
	 *  @memberof DataTable#oApi
	 */
	function _fnScrollDraw ( settings )
	{
		// Given that this is such a monster function, a lot of variables are use
		// to try and keep the minimised size as small as possible
		var
			scroll         = settings.oScroll,
			scrollX        = scroll.sX,
			scrollXInner   = scroll.sXInner,
			scrollY        = scroll.sY,
			barWidth       = scroll.iBarWidth,
			divHeader      = $(settings.nScrollHead),
			divHeaderStyle = divHeader[0].style,
			divHeaderInner = divHeader.children('div'),
			divHeaderInnerStyle = divHeaderInner[0].style,
			divHeaderTable = divHeaderInner.children('table'),
			divBodyEl      = settings.nScrollBody,
			divBody        = $(divBodyEl),
			divBodyStyle   = divBodyEl.style,
			divFooter      = $(settings.nScrollFoot),
			divFooterInner = divFooter.children('div'),
			divFooterTable = divFooterInner.children('table'),
			header         = $(settings.nTHead),
			table          = $(settings.nTable),
			tableEl        = table[0],
			tableStyle     = tableEl.style,
			footer         = settings.nTFoot ? $(settings.nTFoot) : null,
			browser        = settings.oBrowser,
			ie67           = browser.bScrollOversize,
			dtHeaderCells  = _pluck( settings.aoColumns, 'nTh' ),
			headerTrgEls, footerTrgEls,
			headerSrcEls, footerSrcEls,
			headerCopy, footerCopy,
			headerWidths=[], footerWidths=[],
			headerContent=[], footerContent=[],
			idx, correction, sanityWidth,
			zeroOut = function(nSizer) {
				var style = nSizer.style;
				style.paddingTop = "0";
				style.paddingBottom = "0";
				style.borderTopWidth = "0";
				style.borderBottomWidth = "0";
				style.height = 0;
			};
	
		// If the scrollbar visibility has changed from the last draw, we need to
		// adjust the column sizes as the table width will have changed to account
		// for the scrollbar
		var scrollBarVis = divBodyEl.scrollHeight > divBodyEl.clientHeight;
		
		if ( settings.scrollBarVis !== scrollBarVis && settings.scrollBarVis !== undefined ) {
			settings.scrollBarVis = scrollBarVis;
			_fnAdjustColumnSizing( settings );
			return; // adjust column sizing will call this function again
		}
		else {
			settings.scrollBarVis = scrollBarVis;
		}
	
		/*
		 * 1. Re-create the table inside the scrolling div
		 */
	
		// Remove the old minimised thead and tfoot elements in the inner table
		table.children('thead, tfoot').remove();
	
		if ( footer ) {
			footerCopy = footer.clone().prependTo( table );
			footerTrgEls = footer.find('tr'); // the original tfoot is in its own table and must be sized
			footerSrcEls = footerCopy.find('tr');
		}
	
		// Clone the current header and footer elements and then place it into the inner table
		headerCopy = header.clone().prependTo( table );
		headerTrgEls = header.find('tr'); // original header is in its own table
		headerSrcEls = headerCopy.find('tr');
		headerCopy.find('th, td').removeAttr('tabindex');
	
	
		/*
		 * 2. Take live measurements from the DOM - do not alter the DOM itself!
		 */
	
		// Remove old sizing and apply the calculated column widths
		// Get the unique column headers in the newly created (cloned) header. We want to apply the
		// calculated sizes to this header
		if ( ! scrollX )
		{
			divBodyStyle.width = '100%';
			divHeader[0].style.width = '100%';
		}
	
		$.each( _fnGetUniqueThs( settings, headerCopy ), function ( i, el ) {
			idx = _fnVisibleToColumnIndex( settings, i );
			el.style.width = settings.aoColumns[idx].sWidth;
		} );
	
		if ( footer ) {
			_fnApplyToChildren( function(n) {
				n.style.width = "";
			}, footerSrcEls );
		}
	
		// Size the table as a whole
		sanityWidth = table.outerWidth();
		if ( scrollX === "" ) {
			// No x scrolling
			tableStyle.width = "100%";
	
			// IE7 will make the width of the table when 100% include the scrollbar
			// - which is shouldn't. When there is a scrollbar we need to take this
			// into account.
			if ( ie67 && (table.find('tbody').height() > divBodyEl.offsetHeight ||
				divBody.css('overflow-y') == "scroll")
			) {
				tableStyle.width = _fnStringToCss( table.outerWidth() - barWidth);
			}
	
			// Recalculate the sanity width
			sanityWidth = table.outerWidth();
		}
		else if ( scrollXInner !== "" ) {
			// legacy x scroll inner has been given - use it
			tableStyle.width = _fnStringToCss(scrollXInner);
	
			// Recalculate the sanity width
			sanityWidth = table.outerWidth();
		}
	
		// Hidden header should have zero height, so remove padding and borders. Then
		// set the width based on the real headers
	
		// Apply all styles in one pass
		_fnApplyToChildren( zeroOut, headerSrcEls );
	
		// Read all widths in next pass
		_fnApplyToChildren( function(nSizer) {
			headerContent.push( nSizer.innerHTML );
			headerWidths.push( _fnStringToCss( $(nSizer).css('width') ) );
		}, headerSrcEls );
	
		// Apply all widths in final pass
		_fnApplyToChildren( function(nToSize, i) {
			// Only apply widths to the DataTables detected header cells - this
			// prevents complex headers from having contradictory sizes applied
			if ( $.inArray( nToSize, dtHeaderCells ) !== -1 ) {
				nToSize.style.width = headerWidths[i];
			}
		}, headerTrgEls );
	
		$(headerSrcEls).height(0);
	
		/* Same again with the footer if we have one */
		if ( footer )
		{
			_fnApplyToChildren( zeroOut, footerSrcEls );
	
			_fnApplyToChildren( function(nSizer) {
				footerContent.push( nSizer.innerHTML );
				footerWidths.push( _fnStringToCss( $(nSizer).css('width') ) );
			}, footerSrcEls );
	
			_fnApplyToChildren( function(nToSize, i) {
				nToSize.style.width = footerWidths[i];
			}, footerTrgEls );
	
			$(footerSrcEls).height(0);
		}
	
	
		/*
		 * 3. Apply the measurements
		 */
	
		// "Hide" the header and footer that we used for the sizing. We need to keep
		// the content of the cell so that the width applied to the header and body
		// both match, but we want to hide it completely. We want to also fix their
		// width to what they currently are
		_fnApplyToChildren( function(nSizer, i) {
			nSizer.innerHTML = '<div class="dataTables_sizing">'+headerContent[i]+'</div>';
			nSizer.childNodes[0].style.height = "0";
			nSizer.childNodes[0].style.overflow = "hidden";
			nSizer.style.width = headerWidths[i];
		}, headerSrcEls );
	
		if ( footer )
		{
			_fnApplyToChildren( function(nSizer, i) {
				nSizer.innerHTML = '<div class="dataTables_sizing">'+footerContent[i]+'</div>';
				nSizer.childNodes[0].style.height = "0";
				nSizer.childNodes[0].style.overflow = "hidden";
				nSizer.style.width = footerWidths[i];
			}, footerSrcEls );
		}
	
		// Sanity check that the table is of a sensible width. If not then we are going to get
		// misalignment - try to prevent this by not allowing the table to shrink below its min width
		if ( table.outerWidth() < sanityWidth )
		{
			// The min width depends upon if we have a vertical scrollbar visible or not */
			correction = ((divBodyEl.scrollHeight > divBodyEl.offsetHeight ||
				divBody.css('overflow-y') == "scroll")) ?
					sanityWidth+barWidth :
					sanityWidth;
	
			// IE6/7 are a law unto themselves...
			if ( ie67 && (divBodyEl.scrollHeight >
				divBodyEl.offsetHeight || divBody.css('overflow-y') == "scroll")
			) {
				tableStyle.width = _fnStringToCss( correction-barWidth );
			}
	
			// And give the user a warning that we've stopped the table getting too small
			if ( scrollX === "" || scrollXInner !== "" ) {
				_fnLog( settings, 1, 'Possible column misalignment', 6 );
			}
		}
		else
		{
			correction = '100%';
		}
	
		// Apply to the container elements
		divBodyStyle.width = _fnStringToCss( correction );
		divHeaderStyle.width = _fnStringToCss( correction );
	
		if ( footer ) {
			settings.nScrollFoot.style.width = _fnStringToCss( correction );
		}
	
	
		/*
		 * 4. Clean up
		 */
		if ( ! scrollY ) {
			/* IE7< puts a vertical scrollbar in place (when it shouldn't be) due to subtracting
			 * the scrollbar height from the visible display, rather than adding it on. We need to
			 * set the height in order to sort this. Don't want to do it in any other browsers.
			 */
			if ( ie67 ) {
				divBodyStyle.height = _fnStringToCss( tableEl.offsetHeight+barWidth );
			}
		}
	
		/* Finally set the width's of the header and footer tables */
		var iOuterWidth = table.outerWidth();
		divHeaderTable[0].style.width = _fnStringToCss( iOuterWidth );
		divHeaderInnerStyle.width = _fnStringToCss( iOuterWidth );
	
		// Figure out if there are scrollbar present - if so then we need a the header and footer to
		// provide a bit more space to allow "overflow" scrolling (i.e. past the scrollbar)
		var bScrolling = table.height() > divBodyEl.clientHeight || divBody.css('overflow-y') == "scroll";
		var padding = 'padding' + (browser.bScrollbarLeft ? 'Left' : 'Right' );
		divHeaderInnerStyle[ padding ] = bScrolling ? barWidth+"px" : "0px";
	
		if ( footer ) {
			divFooterTable[0].style.width = _fnStringToCss( iOuterWidth );
			divFooterInner[0].style.width = _fnStringToCss( iOuterWidth );
			divFooterInner[0].style[padding] = bScrolling ? barWidth+"px" : "0px";
		}
	
		// Correct DOM ordering for colgroup - comes before the thead
		table.children('colgroup').insertBefore( table.children('thead') );
	
		/* Adjust the position of the header in case we loose the y-scrollbar */
		divBody.scroll();
	
		// If sorting or filtering has occurred, jump the scrolling back to the top
		// only if we aren't holding the position
		if ( (settings.bSorted || settings.bFiltered) && ! settings._drawHold ) {
			divBodyEl.scrollTop = 0;
		}
	}
	
	
	
	/**
	 * Apply a given function to the display child nodes of an element array (typically
	 * TD children of TR rows
	 *  @param {function} fn Method to apply to the objects
	 *  @param array {nodes} an1 List of elements to look through for display children
	 *  @param array {nodes} an2 Another list (identical structure to the first) - optional
	 *  @memberof DataTable#oApi
	 */
	function _fnApplyToChildren( fn, an1, an2 )
	{
		var index=0, i=0, iLen=an1.length;
		var nNode1, nNode2;
	
		while ( i < iLen ) {
			nNode1 = an1[i].firstChild;
			nNode2 = an2 ? an2[i].firstChild : null;
	
			while ( nNode1 ) {
				if ( nNode1.nodeType === 1 ) {
					if ( an2 ) {
						fn( nNode1, nNode2, index );
					}
					else {
						fn( nNode1, index );
					}
	
					index++;
				}
	
				nNode1 = nNode1.nextSibling;
				nNode2 = an2 ? nNode2.nextSibling : null;
			}
	
			i++;
		}
	}
	
	
	
	var __re_html_remove = /<.*?>/g;
	
	
	/**
	 * Calculate the width of columns for the table
	 *  @param {object} oSettings dataTables settings object
	 *  @memberof DataTable#oApi
	 */
	function _fnCalculateColumnWidths ( oSettings )
	{
		var
			table = oSettings.nTable,
			columns = oSettings.aoColumns,
			scroll = oSettings.oScroll,
			scrollY = scroll.sY,
			scrollX = scroll.sX,
			scrollXInner = scroll.sXInner,
			columnCount = columns.length,
			visibleColumns = _fnGetColumns( oSettings, 'bVisible' ),
			headerCells = $('th', oSettings.nTHead),
			tableWidthAttr = table.getAttribute('width'), // from DOM element
			tableContainer = table.parentNode,
			userInputs = false,
			i, column, columnIdx, width, outerWidth,
			browser = oSettings.oBrowser,
			ie67 = browser.bScrollOversize;
	
		var styleWidth = table.style.width;
		if ( styleWidth && styleWidth.indexOf('%') !== -1 ) {
			tableWidthAttr = styleWidth;
		}
	
		/* Convert any user input sizes into pixel sizes */
		for ( i=0 ; i<visibleColumns.length ; i++ ) {
			column = columns[ visibleColumns[i] ];
	
			if ( column.sWidth !== null ) {
				column.sWidth = _fnConvertToWidth( column.sWidthOrig, tableContainer );
	
				userInputs = true;
			}
		}
	
		/* If the number of columns in the DOM equals the number that we have to
		 * process in DataTables, then we can use the offsets that are created by
		 * the web- browser. No custom sizes can be set in order for this to happen,
		 * nor scrolling used
		 */
		if ( ie67 || ! userInputs && ! scrollX && ! scrollY &&
		     columnCount == _fnVisbleColumns( oSettings ) &&
		     columnCount == headerCells.length
		) {
			for ( i=0 ; i<columnCount ; i++ ) {
				var colIdx = _fnVisibleToColumnIndex( oSettings, i );
	
				if ( colIdx !== null ) {
					columns[ colIdx ].sWidth = _fnStringToCss( headerCells.eq(i).width() );
				}
			}
		}
		else
		{
			// Otherwise construct a single row, worst case, table with the widest
			// node in the data, assign any user defined widths, then insert it into
			// the DOM and allow the browser to do all the hard work of calculating
			// table widths
			var tmpTable = $(table).clone() // don't use cloneNode - IE8 will remove events on the main table
				.css( 'visibility', 'hidden' )
				.removeAttr( 'id' );
	
			// Clean up the table body
			tmpTable.find('tbody tr').remove();
			var tr = $('<tr/>').appendTo( tmpTable.find('tbody') );
	
			// Clone the table header and footer - we can't use the header / footer
			// from the cloned table, since if scrolling is active, the table's
			// real header and footer are contained in different table tags
			tmpTable.find('thead, tfoot').remove();
			tmpTable
				.append( $(oSettings.nTHead).clone() )
				.append( $(oSettings.nTFoot).clone() );
	
			// Remove any assigned widths from the footer (from scrolling)
			tmpTable.find('tfoot th, tfoot td').css('width', '');
	
			// Apply custom sizing to the cloned header
			headerCells = _fnGetUniqueThs( oSettings, tmpTable.find('thead')[0] );
	
			for ( i=0 ; i<visibleColumns.length ; i++ ) {
				column = columns[ visibleColumns[i] ];
	
				headerCells[i].style.width = column.sWidthOrig !== null && column.sWidthOrig !== '' ?
					_fnStringToCss( column.sWidthOrig ) :
					'';
	
				// For scrollX we need to force the column width otherwise the
				// browser will collapse it. If this width is smaller than the
				// width the column requires, then it will have no effect
				if ( column.sWidthOrig && scrollX ) {
					$( headerCells[i] ).append( $('<div/>').css( {
						width: column.sWidthOrig,
						margin: 0,
						padding: 0,
						border: 0,
						height: 1
					} ) );
				}
			}
	
			// Find the widest cell for each column and put it into the table
			if ( oSettings.aoData.length ) {
				for ( i=0 ; i<visibleColumns.length ; i++ ) {
					columnIdx = visibleColumns[i];
					column = columns[ columnIdx ];
	
					$( _fnGetWidestNode( oSettings, columnIdx ) )
						.clone( false )
						.append( column.sContentPadding )
						.appendTo( tr );
				}
			}
	
			// Tidy the temporary table - remove name attributes so there aren't
			// duplicated in the dom (radio elements for example)
			$('[name]', tmpTable).removeAttr('name');
	
			// Table has been built, attach to the document so we can work with it.
			// A holding element is used, positioned at the top of the container
			// with minimal height, so it has no effect on if the container scrolls
			// or not. Otherwise it might trigger scrolling when it actually isn't
			// needed
			var holder = $('<div/>').css( scrollX || scrollY ?
					{
						position: 'absolute',
						top: 0,
						left: 0,
						height: 1,
						right: 0,
						overflow: 'hidden'
					} :
					{}
				)
				.append( tmpTable )
				.appendTo( tableContainer );
	
			// When scrolling (X or Y) we want to set the width of the table as 
			// appropriate. However, when not scrolling leave the table width as it
			// is. This results in slightly different, but I think correct behaviour
			if ( scrollX && scrollXInner ) {
				tmpTable.width( scrollXInner );
			}
			else if ( scrollX ) {
				tmpTable.css( 'width', 'auto' );
				tmpTable.removeAttr('width');
	
				// If there is no width attribute or style, then allow the table to
				// collapse
				if ( tmpTable.width() < tableContainer.clientWidth && tableWidthAttr ) {
					tmpTable.width( tableContainer.clientWidth );
				}
			}
			else if ( scrollY ) {
				tmpTable.width( tableContainer.clientWidth );
			}
			else if ( tableWidthAttr ) {
				tmpTable.width( tableWidthAttr );
			}
	
			// Get the width of each column in the constructed table - we need to
			// know the inner width (so it can be assigned to the other table's
			// cells) and the outer width so we can calculate the full width of the
			// table. This is safe since DataTables requires a unique cell for each
			// column, but if ever a header can span multiple columns, this will
			// need to be modified.
			var total = 0;
			for ( i=0 ; i<visibleColumns.length ; i++ ) {
				var cell = $(headerCells[i]);
				var border = cell.outerWidth() - cell.width();
	
				// Use getBounding... where possible (not IE8-) because it can give
				// sub-pixel accuracy, which we then want to round up!
				var bounding = browser.bBounding ?
					Math.ceil( headerCells[i].getBoundingClientRect().width ) :
					cell.outerWidth();
	
				// Total is tracked to remove any sub-pixel errors as the outerWidth
				// of the table might not equal the total given here (IE!).
				total += bounding;
	
				// Width for each column to use
				columns[ visibleColumns[i] ].sWidth = _fnStringToCss( bounding - border );
			}
	
			table.style.width = _fnStringToCss( total );
	
			// Finished with the table - ditch it
			holder.remove();
		}
	
		// If there is a width attr, we want to attach an event listener which
		// allows the table sizing to automatically adjust when the window is
		// resized. Use the width attr rather than CSS, since we can't know if the
		// CSS is a relative value or absolute - DOM read is always px.
		if ( tableWidthAttr ) {
			table.style.width = _fnStringToCss( tableWidthAttr );
		}
	
		if ( (tableWidthAttr || scrollX) && ! oSettings._reszEvt ) {
			var bindResize = function () {
				$(window).on('resize.DT-'+oSettings.sInstance, _fnThrottle( function () {
					_fnAdjustColumnSizing( oSettings );
				} ) );
			};
	
			// IE6/7 will crash if we bind a resize event handler on page load.
			// To be removed in 1.11 which drops IE6/7 support
			if ( ie67 ) {
				setTimeout( bindResize, 1000 );
			}
			else {
				bindResize();
			}
	
			oSettings._reszEvt = true;
		}
	}
	
	
	/**
	 * Throttle the calls to a function. Arguments and context are maintained for
	 * the throttled function
	 *  @param {function} fn Function to be called
	 *  @param {int} [freq=200] call frequency in mS
	 *  @returns {function} wrapped function
	 *  @memberof DataTable#oApi
	 */
	var _fnThrottle = DataTable.util.throttle;
	
	
	/**
	 * Convert a CSS unit width to pixels (e.g. 2em)
	 *  @param {string} width width to be converted
	 *  @param {node} parent parent to get the with for (required for relative widths) - optional
	 *  @returns {int} width in pixels
	 *  @memberof DataTable#oApi
	 */
	function _fnConvertToWidth ( width, parent )
	{
		if ( ! width ) {
			return 0;
		}
	
		var n = $('<div/>')
			.css( 'width', _fnStringToCss( width ) )
			.appendTo( parent || document.body );
	
		var val = n[0].offsetWidth;
		n.remove();
	
		return val;
	}
	
	
	/**
	 * Get the widest node
	 *  @param {object} settings dataTables settings object
	 *  @param {int} colIdx column of interest
	 *  @returns {node} widest table node
	 *  @memberof DataTable#oApi
	 */
	function _fnGetWidestNode( settings, colIdx )
	{
		var idx = _fnGetMaxLenString( settings, colIdx );
		if ( idx < 0 ) {
			return null;
		}
	
		var data = settings.aoData[ idx ];
		return ! data.nTr ? // Might not have been created when deferred rendering
			$('<td/>').html( _fnGetCellData( settings, idx, colIdx, 'display' ) )[0] :
			data.anCells[ colIdx ];
	}
	
	
	/**
	 * Get the maximum strlen for each data column
	 *  @param {object} settings dataTables settings object
	 *  @param {int} colIdx column of interest
	 *  @returns {string} max string length for each column
	 *  @memberof DataTable#oApi
	 */
	function _fnGetMaxLenString( settings, colIdx )
	{
		var s, max=-1, maxIdx = -1;
	
		for ( var i=0, ien=settings.aoData.length ; i<ien ; i++ ) {
			s = _fnGetCellData( settings, i, colIdx, 'display' )+'';
			s = s.replace( __re_html_remove, '' );
			s = s.replace( /&nbsp;/g, ' ' );
	
			if ( s.length > max ) {
				max = s.length;
				maxIdx = i;
			}
		}
	
		return maxIdx;
	}
	
	
	/**
	 * Append a CSS unit (only if required) to a string
	 *  @param {string} value to css-ify
	 *  @returns {string} value with css unit
	 *  @memberof DataTable#oApi
	 */
	function _fnStringToCss( s )
	{
		if ( s === null ) {
			return '0px';
		}
	
		if ( typeof s == 'number' ) {
			return s < 0 ?
				'0px' :
				s+'px';
		}
	
		// Check it has a unit character already
		return s.match(/\d$/) ?
			s+'px' :
			s;
	}
	
	
	
	function _fnSortFlatten ( settings )
	{
		var
			i, iLen, k, kLen,
			aSort = [],
			aiOrig = [],
			aoColumns = settings.aoColumns,
			aDataSort, iCol, sType, srcCol,
			fixed = settings.aaSortingFixed,
			fixedObj = $.isPlainObject( fixed ),
			nestedSort = [],
			add = function ( a ) {
				if ( a.length && ! $.isArray( a[0] ) ) {
					// 1D array
					nestedSort.push( a );
				}
				else {
					// 2D array
					$.merge( nestedSort, a );
				}
			};
	
		// Build the sort array, with pre-fix and post-fix options if they have been
		// specified
		if ( $.isArray( fixed ) ) {
			add( fixed );
		}
	
		if ( fixedObj && fixed.pre ) {
			add( fixed.pre );
		}
	
		add( settings.aaSorting );
	
		if (fixedObj && fixed.post ) {
			add( fixed.post );
		}
	
		for ( i=0 ; i<nestedSort.length ; i++ )
		{
			srcCol = nestedSort[i][0];
			aDataSort = aoColumns[ srcCol ].aDataSort;
	
			for ( k=0, kLen=aDataSort.length ; k<kLen ; k++ )
			{
				iCol = aDataSort[k];
				sType = aoColumns[ iCol ].sType || 'string';
	
				if ( nestedSort[i]._idx === undefined ) {
					nestedSort[i]._idx = $.inArray( nestedSort[i][1], aoColumns[iCol].asSorting );
				}
	
				aSort.push( {
					src:       srcCol,
					col:       iCol,
					dir:       nestedSort[i][1],
					index:     nestedSort[i]._idx,
					type:      sType,
					formatter: DataTable.ext.type.order[ sType+"-pre" ]
				} );
			}
		}
	
		return aSort;
	}
	
	/**
	 * Change the order of the table
	 *  @param {object} oSettings dataTables settings object
	 *  @memberof DataTable#oApi
	 *  @todo This really needs split up!
	 */
	function _fnSort ( oSettings )
	{
		var
			i, ien, iLen, j, jLen, k, kLen,
			sDataType, nTh,
			aiOrig = [],
			oExtSort = DataTable.ext.type.order,
			aoData = oSettings.aoData,
			aoColumns = oSettings.aoColumns,
			aDataSort, data, iCol, sType, oSort,
			formatters = 0,
			sortCol,
			displayMaster = oSettings.aiDisplayMaster,
			aSort;
	
		// Resolve any column types that are unknown due to addition or invalidation
		// @todo Can this be moved into a 'data-ready' handler which is called when
		//   data is going to be used in the table?
		_fnColumnTypes( oSettings );
	
		aSort = _fnSortFlatten( oSettings );
	
		for ( i=0, ien=aSort.length ; i<ien ; i++ ) {
			sortCol = aSort[i];
	
			// Track if we can use the fast sort algorithm
			if ( sortCol.formatter ) {
				formatters++;
			}
	
			// Load the data needed for the sort, for each cell
			_fnSortData( oSettings, sortCol.col );
		}
	
		/* No sorting required if server-side or no sorting array */
		if ( _fnDataSource( oSettings ) != 'ssp' && aSort.length !== 0 )
		{
			// Create a value - key array of the current row positions such that we can use their
			// current position during the sort, if values match, in order to perform stable sorting
			for ( i=0, iLen=displayMaster.length ; i<iLen ; i++ ) {
				aiOrig[ displayMaster[i] ] = i;
			}
	
			/* Do the sort - here we want multi-column sorting based on a given data source (column)
			 * and sorting function (from oSort) in a certain direction. It's reasonably complex to
			 * follow on it's own, but this is what we want (example two column sorting):
			 *  fnLocalSorting = function(a,b){
			 *    var iTest;
			 *    iTest = oSort['string-asc']('data11', 'data12');
			 *      if (iTest !== 0)
			 *        return iTest;
			 *    iTest = oSort['numeric-desc']('data21', 'data22');
			 *    if (iTest !== 0)
			 *      return iTest;
			 *    return oSort['numeric-asc']( aiOrig[a], aiOrig[b] );
			 *  }
			 * Basically we have a test for each sorting column, if the data in that column is equal,
			 * test the next column. If all columns match, then we use a numeric sort on the row
			 * positions in the original data array to provide a stable sort.
			 *
			 * Note - I know it seems excessive to have two sorting methods, but the first is around
			 * 15% faster, so the second is only maintained for backwards compatibility with sorting
			 * methods which do not have a pre-sort formatting function.
			 */
			if ( formatters === aSort.length ) {
				// All sort types have formatting functions
				displayMaster.sort( function ( a, b ) {
					var
						x, y, k, test, sort,
						len=aSort.length,
						dataA = aoData[a]._aSortData,
						dataB = aoData[b]._aSortData;
	
					for ( k=0 ; k<len ; k++ ) {
						sort = aSort[k];
	
						x = dataA[ sort.col ];
						y = dataB[ sort.col ];
	
						test = x<y ? -1 : x>y ? 1 : 0;
						if ( test !== 0 ) {
							return sort.dir === 'asc' ? test : -test;
						}
					}
	
					x = aiOrig[a];
					y = aiOrig[b];
					return x<y ? -1 : x>y ? 1 : 0;
				} );
			}
			else {
				// Depreciated - remove in 1.11 (providing a plug-in option)
				// Not all sort types have formatting methods, so we have to call their sorting
				// methods.
				displayMaster.sort( function ( a, b ) {
					var
						x, y, k, l, test, sort, fn,
						len=aSort.length,
						dataA = aoData[a]._aSortData,
						dataB = aoData[b]._aSortData;
	
					for ( k=0 ; k<len ; k++ ) {
						sort = aSort[k];
	
						x = dataA[ sort.col ];
						y = dataB[ sort.col ];
	
						fn = oExtSort[ sort.type+"-"+sort.dir ] || oExtSort[ "string-"+sort.dir ];
						test = fn( x, y );
						if ( test !== 0 ) {
							return test;
						}
					}
	
					x = aiOrig[a];
					y = aiOrig[b];
					return x<y ? -1 : x>y ? 1 : 0;
				} );
			}
		}
	
		/* Tell the draw function that we have sorted the data */
		oSettings.bSorted = true;
	}
	
	
	function _fnSortAria ( settings )
	{
		var label;
		var nextSort;
		var columns = settings.aoColumns;
		var aSort = _fnSortFlatten( settings );
		var oAria = settings.oLanguage.oAria;
	
		// ARIA attributes - need to loop all columns, to update all (removing old
		// attributes as needed)
		for ( var i=0, iLen=columns.length ; i<iLen ; i++ )
		{
			var col = columns[i];
			var asSorting = col.asSorting;
			var sTitle = col.sTitle.replace( /<.*?>/g, "" );
			var th = col.nTh;
	
			// IE7 is throwing an error when setting these properties with jQuery's
			// attr() and removeAttr() methods...
			th.removeAttribute('aria-sort');
	
			/* In ARIA only the first sorting column can be marked as sorting - no multi-sort option */
			if ( col.bSortable ) {
				if ( aSort.length > 0 && aSort[0].col == i ) {
					th.setAttribute('aria-sort', aSort[0].dir=="asc" ? "ascending" : "descending" );
					nextSort = asSorting[ aSort[0].index+1 ] || asSorting[0];
				}
				else {
					nextSort = asSorting[0];
				}
	
				label = sTitle + ( nextSort === "asc" ?
					oAria.sSortAscending :
					oAria.sSortDescending
				);
			}
			else {
				label = sTitle;
			}
	
			th.setAttribute('aria-label', label);
		}
	}
	
	
	/**
	 * Function to run on user sort request
	 *  @param {object} settings dataTables settings object
	 *  @param {node} attachTo node to attach the handler to
	 *  @param {int} colIdx column sorting index
	 *  @param {boolean} [append=false] Append the requested sort to the existing
	 *    sort if true (i.e. multi-column sort)
	 *  @param {function} [callback] callback function
	 *  @memberof DataTable#oApi
	 */
	function _fnSortListener ( settings, colIdx, append, callback )
	{
		var col = settings.aoColumns[ colIdx ];
		var sorting = settings.aaSorting;
		var asSorting = col.asSorting;
		var nextSortIdx;
		var next = function ( a, overflow ) {
			var idx = a._idx;
			if ( idx === undefined ) {
				idx = $.inArray( a[1], asSorting );
			}
	
			return idx+1 < asSorting.length ?
				idx+1 :
				overflow ?
					null :
					0;
		};
	
		// Convert to 2D array if needed
		if ( typeof sorting[0] === 'number' ) {
			sorting = settings.aaSorting = [ sorting ];
		}
	
		// If appending the sort then we are multi-column sorting
		if ( append && settings.oFeatures.bSortMulti ) {
			// Are we already doing some kind of sort on this column?
			var sortIdx = $.inArray( colIdx, _pluck(sorting, '0') );
	
			if ( sortIdx !== -1 ) {
				// Yes, modify the sort
				nextSortIdx = next( sorting[sortIdx], true );
	
				if ( nextSortIdx === null && sorting.length === 1 ) {
					nextSortIdx = 0; // can't remove sorting completely
				}
	
				if ( nextSortIdx === null ) {
					sorting.splice( sortIdx, 1 );
				}
				else {
					sorting[sortIdx][1] = asSorting[ nextSortIdx ];
					sorting[sortIdx]._idx = nextSortIdx;
				}
			}
			else {
				// No sort on this column yet
				sorting.push( [ colIdx, asSorting[0], 0 ] );
				sorting[sorting.length-1]._idx = 0;
			}
		}
		else if ( sorting.length && sorting[0][0] == colIdx ) {
			// Single column - already sorting on this column, modify the sort
			nextSortIdx = next( sorting[0] );
	
			sorting.length = 1;
			sorting[0][1] = asSorting[ nextSortIdx ];
			sorting[0]._idx = nextSortIdx;
		}
		else {
			// Single column - sort only on this column
			sorting.length = 0;
			sorting.push( [ colIdx, asSorting[0] ] );
			sorting[0]._idx = 0;
		}
	
		// Run the sort by calling a full redraw
		_fnReDraw( settings );
	
		// callback used for async user interaction
		if ( typeof callback == 'function' ) {
			callback( settings );
		}
	}
	
	
	/**
	 * Attach a sort handler (click) to a node
	 *  @param {object} settings dataTables settings object
	 *  @param {node} attachTo node to attach the handler to
	 *  @param {int} colIdx column sorting index
	 *  @param {function} [callback] callback function
	 *  @memberof DataTable#oApi
	 */
	function _fnSortAttachListener ( settings, attachTo, colIdx, callback )
	{
		var col = settings.aoColumns[ colIdx ];
	
		_fnBindAction( attachTo, {}, function (e) {
			/* If the column is not sortable - don't to anything */
			if ( col.bSortable === false ) {
				return;
			}
	
			// If processing is enabled use a timeout to allow the processing
			// display to be shown - otherwise to it synchronously
			if ( settings.oFeatures.bProcessing ) {
				_fnProcessingDisplay( settings, true );
	
				setTimeout( function() {
					_fnSortListener( settings, colIdx, e.shiftKey, callback );
	
					// In server-side processing, the draw callback will remove the
					// processing display
					if ( _fnDataSource( settings ) !== 'ssp' ) {
						_fnProcessingDisplay( settings, false );
					}
				}, 0 );
			}
			else {
				_fnSortListener( settings, colIdx, e.shiftKey, callback );
			}
		} );
	}
	
	
	/**
	 * Set the sorting classes on table's body, Note: it is safe to call this function
	 * when bSort and bSortClasses are false
	 *  @param {object} oSettings dataTables settings object
	 *  @memberof DataTable#oApi
	 */
	function _fnSortingClasses( settings )
	{
		var oldSort = settings.aLastSort;
		var sortClass = settings.oClasses.sSortColumn;
		var sort = _fnSortFlatten( settings );
		var features = settings.oFeatures;
		var i, ien, colIdx;
	
		if ( features.bSort && features.bSortClasses ) {
			// Remove old sorting classes
			for ( i=0, ien=oldSort.length ; i<ien ; i++ ) {
				colIdx = oldSort[i].src;
	
				// Remove column sorting
				$( _pluck( settings.aoData, 'anCells', colIdx ) )
					.removeClass( sortClass + (i<2 ? i+1 : 3) );
			}
	
			// Add new column sorting
			for ( i=0, ien=sort.length ; i<ien ; i++ ) {
				colIdx = sort[i].src;
	
				$( _pluck( settings.aoData, 'anCells', colIdx ) )
					.addClass( sortClass + (i<2 ? i+1 : 3) );
			}
		}
	
		settings.aLastSort = sort;
	}
	
	
	// Get the data to sort a column, be it from cache, fresh (populating the
	// cache), or from a sort formatter
	function _fnSortData( settings, idx )
	{
		// Custom sorting function - provided by the sort data type
		var column = settings.aoColumns[ idx ];
		var customSort = DataTable.ext.order[ column.sSortDataType ];
		var customData;
	
		if ( customSort ) {
			customData = customSort.call( settings.oInstance, settings, idx,
				_fnColumnIndexToVisible( settings, idx )
			);
		}
	
		// Use / populate cache
		var row, cellData;
		var formatter = DataTable.ext.type.order[ column.sType+"-pre" ];
	
		for ( var i=0, ien=settings.aoData.length ; i<ien ; i++ ) {
			row = settings.aoData[i];
	
			if ( ! row._aSortData ) {
				row._aSortData = [];
			}
	
			if ( ! row._aSortData[idx] || customSort ) {
				cellData = customSort ?
					customData[i] : // If there was a custom sort function, use data from there
					_fnGetCellData( settings, i, idx, 'sort' );
	
				row._aSortData[ idx ] = formatter ?
					formatter( cellData ) :
					cellData;
			}
		}
	}
	
	
	
	/**
	 * Save the state of a table
	 *  @param {object} oSettings dataTables settings object
	 *  @memberof DataTable#oApi
	 */
	function _fnSaveState ( settings )
	{
		if ( !settings.oFeatures.bStateSave || settings.bDestroying )
		{
			return;
		}
	
		/* Store the interesting variables */
		var state = {
			time:    +new Date(),
			start:   settings._iDisplayStart,
			length:  settings._iDisplayLength,
			order:   $.extend( true, [], settings.aaSorting ),
			search:  _fnSearchToCamel( settings.oPreviousSearch ),
			columns: $.map( settings.aoColumns, function ( col, i ) {
				return {
					visible: col.bVisible,
					search: _fnSearchToCamel( settings.aoPreSearchCols[i] )
				};
			} )
		};
	
		_fnCallbackFire( settings, "aoStateSaveParams", 'stateSaveParams', [settings, state] );
	
		settings.oSavedState = state;
		settings.fnStateSaveCallback.call( settings.oInstance, settings, state );
	}
	
	
	/**
	 * Attempt to load a saved table state
	 *  @param {object} oSettings dataTables settings object
	 *  @param {object} oInit DataTables init object so we can override settings
	 *  @param {function} callback Callback to execute when the state has been loaded
	 *  @memberof DataTable#oApi
	 */
	function _fnLoadState ( settings, oInit, callback )
	{
		var i, ien;
		var columns = settings.aoColumns;
		var loaded = function ( s ) {
			if ( ! s || ! s.time ) {
				callback();
				return;
			}
	
			// Allow custom and plug-in manipulation functions to alter the saved data set and
			// cancelling of loading by returning false
			var abStateLoad = _fnCallbackFire( settings, 'aoStateLoadParams', 'stateLoadParams', [settings, s] );
			if ( $.inArray( false, abStateLoad ) !== -1 ) {
				callback();
				return;
			}
	
			// Reject old data
			var duration = settings.iStateDuration;
			if ( duration > 0 && s.time < +new Date() - (duration*1000) ) {
				callback();
				return;
			}
	
			// Number of columns have changed - all bets are off, no restore of settings
			if ( s.columns && columns.length !== s.columns.length ) {
				callback();
				return;
			}
	
			// Store the saved state so it might be accessed at any time
			settings.oLoadedState = $.extend( true, {}, s );
	
			// Restore key features - todo - for 1.11 this needs to be done by
			// subscribed events
			if ( s.start !== undefined ) {
				settings._iDisplayStart    = s.start;
				settings.iInitDisplayStart = s.start;
			}
			if ( s.length !== undefined ) {
				settings._iDisplayLength   = s.length;
			}
	
			// Order
			if ( s.order !== undefined ) {
				settings.aaSorting = [];
				$.each( s.order, function ( i, col ) {
					settings.aaSorting.push( col[0] >= columns.length ?
						[ 0, col[1] ] :
						col
					);
				} );
			}
	
			// Search
			if ( s.search !== undefined ) {
				$.extend( settings.oPreviousSearch, _fnSearchToHung( s.search ) );
			}
	
			// Columns
			//
			if ( s.columns ) {
				for ( i=0, ien=s.columns.length ; i<ien ; i++ ) {
					var col = s.columns[i];
	
					// Visibility
					if ( col.visible !== undefined ) {
						columns[i].bVisible = col.visible;
					}
	
					// Search
					if ( col.search !== undefined ) {
						$.extend( settings.aoPreSearchCols[i], _fnSearchToHung( col.search ) );
					}
				}
			}
	
			_fnCallbackFire( settings, 'aoStateLoaded', 'stateLoaded', [settings, s] );
			callback();
		}
	
		if ( ! settings.oFeatures.bStateSave ) {
			callback();
			return;
		}
	
		var state = settings.fnStateLoadCallback.call( settings.oInstance, settings, loaded );
	
		if ( state !== undefined ) {
			loaded( state );
		}
		// otherwise, wait for the loaded callback to be executed
	}
	
	
	/**
	 * Return the settings object for a particular table
	 *  @param {node} table table we are using as a dataTable
	 *  @returns {object} Settings object - or null if not found
	 *  @memberof DataTable#oApi
	 */
	function _fnSettingsFromNode ( table )
	{
		var settings = DataTable.settings;
		var idx = $.inArray( table, _pluck( settings, 'nTable' ) );
	
		return idx !== -1 ?
			settings[ idx ] :
			null;
	}
	
	
	/**
	 * Log an error message
	 *  @param {object} settings dataTables settings object
	 *  @param {int} level log error messages, or display them to the user
	 *  @param {string} msg error message
	 *  @param {int} tn Technical note id to get more information about the error.
	 *  @memberof DataTable#oApi
	 */
	function _fnLog( settings, level, msg, tn )
	{
		msg = 'DataTables warning: '+
			(settings ? 'table id='+settings.sTableId+' - ' : '')+msg;
	
		if ( tn ) {
			msg += '. For more information about this error, please see '+
			'http://datatables.net/tn/'+tn;
		}
	
		if ( ! level  ) {
			// Backwards compatibility pre 1.10
			var ext = DataTable.ext;
			var type = ext.sErrMode || ext.errMode;
	
			if ( settings ) {
				_fnCallbackFire( settings, null, 'error', [ settings, tn, msg ] );
			}
	
			if ( type == 'alert' ) {
				alert( msg );
			}
			else if ( type == 'throw' ) {
				throw new Error(msg);
			}
			else if ( typeof type == 'function' ) {
				type( settings, tn, msg );
			}
		}
		else if ( window.console && console.log ) {
			console.log( msg );
		}
	}
	
	
	/**
	 * See if a property is defined on one object, if so assign it to the other object
	 *  @param {object} ret target object
	 *  @param {object} src source object
	 *  @param {string} name property
	 *  @param {string} [mappedName] name to map too - optional, name used if not given
	 *  @memberof DataTable#oApi
	 */
	function _fnMap( ret, src, name, mappedName )
	{
		if ( $.isArray( name ) ) {
			$.each( name, function (i, val) {
				if ( $.isArray( val ) ) {
					_fnMap( ret, src, val[0], val[1] );
				}
				else {
					_fnMap( ret, src, val );
				}
			} );
	
			return;
		}
	
		if ( mappedName === undefined ) {
			mappedName = name;
		}
	
		if ( src[name] !== undefined ) {
			ret[mappedName] = src[name];
		}
	}
	
	
	/**
	 * Extend objects - very similar to jQuery.extend, but deep copy objects, and
	 * shallow copy arrays. The reason we need to do this, is that we don't want to
	 * deep copy array init values (such as aaSorting) since the dev wouldn't be
	 * able to override them, but we do want to deep copy arrays.
	 *  @param {object} out Object to extend
	 *  @param {object} extender Object from which the properties will be applied to
	 *      out
	 *  @param {boolean} breakRefs If true, then arrays will be sliced to take an
	 *      independent copy with the exception of the `data` or `aaData` parameters
	 *      if they are present. This is so you can pass in a collection to
	 *      DataTables and have that used as your data source without breaking the
	 *      references
	 *  @returns {object} out Reference, just for convenience - out === the return.
	 *  @memberof DataTable#oApi
	 *  @todo This doesn't take account of arrays inside the deep copied objects.
	 */
	function _fnExtend( out, extender, breakRefs )
	{
		var val;
	
		for ( var prop in extender ) {
			if ( extender.hasOwnProperty(prop) ) {
				val = extender[prop];
	
				if ( $.isPlainObject( val ) ) {
					if ( ! $.isPlainObject( out[prop] ) ) {
						out[prop] = {};
					}
					$.extend( true, out[prop], val );
				}
				else if ( breakRefs && prop !== 'data' && prop !== 'aaData' && $.isArray(val) ) {
					out[prop] = val.slice();
				}
				else {
					out[prop] = val;
				}
			}
		}
	
		return out;
	}
	
	
	/**
	 * Bind an event handers to allow a click or return key to activate the callback.
	 * This is good for accessibility since a return on the keyboard will have the
	 * same effect as a click, if the element has focus.
	 *  @param {element} n Element to bind the action to
	 *  @param {object} oData Data object to pass to the triggered function
	 *  @param {function} fn Callback function for when the event is triggered
	 *  @memberof DataTable#oApi
	 */
	function _fnBindAction( n, oData, fn )
	{
		$(n)
			.on( 'click.DT', oData, function (e) {
					$(n).blur(); // Remove focus outline for mouse users
					fn(e);
				} )
			.on( 'keypress.DT', oData, function (e){
					if ( e.which === 13 ) {
						e.preventDefault();
						fn(e);
					}
				} )
			.on( 'selectstart.DT', function () {
					/* Take the brutal approach to cancelling text selection */
					return false;
				} );
	}
	
	
	/**
	 * Register a callback function. Easily allows a callback function to be added to
	 * an array store of callback functions that can then all be called together.
	 *  @param {object} oSettings dataTables settings object
	 *  @param {string} sStore Name of the array storage for the callbacks in oSettings
	 *  @param {function} fn Function to be called back
	 *  @param {string} sName Identifying name for the callback (i.e. a label)
	 *  @memberof DataTable#oApi
	 */
	function _fnCallbackReg( oSettings, sStore, fn, sName )
	{
		if ( fn )
		{
			oSettings[sStore].push( {
				"fn": fn,
				"sName": sName
			} );
		}
	}
	
	
	/**
	 * Fire callback functions and trigger events. Note that the loop over the
	 * callback array store is done backwards! Further note that you do not want to
	 * fire off triggers in time sensitive applications (for example cell creation)
	 * as its slow.
	 *  @param {object} settings dataTables settings object
	 *  @param {string} callbackArr Name of the array storage for the callbacks in
	 *      oSettings
	 *  @param {string} eventName Name of the jQuery custom event to trigger. If
	 *      null no trigger is fired
	 *  @param {array} args Array of arguments to pass to the callback function /
	 *      trigger
	 *  @memberof DataTable#oApi
	 */
	function _fnCallbackFire( settings, callbackArr, eventName, args )
	{
		var ret = [];
	
		if ( callbackArr ) {
			ret = $.map( settings[callbackArr].slice().reverse(), function (val, i) {
				return val.fn.apply( settings.oInstance, args );
			} );
		}
	
		if ( eventName !== null ) {
			var e = $.Event( eventName+'.dt' );
	
			$(settings.nTable).trigger( e, args );
	
			ret.push( e.result );
		}
	
		return ret;
	}
	
	
	function _fnLengthOverflow ( settings )
	{
		var
			start = settings._iDisplayStart,
			end = settings.fnDisplayEnd(),
			len = settings._iDisplayLength;
	
		/* If we have space to show extra rows (backing up from the end point - then do so */
		if ( start >= end )
		{
			start = end - len;
		}
	
		// Keep the start record on the current page
		start -= (start % len);
	
		if ( len === -1 || start < 0 )
		{
			start = 0;
		}
	
		settings._iDisplayStart = start;
	}
	
	
	function _fnRenderer( settings, type )
	{
		var renderer = settings.renderer;
		var host = DataTable.ext.renderer[type];
	
		if ( $.isPlainObject( renderer ) && renderer[type] ) {
			// Specific renderer for this type. If available use it, otherwise use
			// the default.
			return host[renderer[type]] || host._;
		}
		else if ( typeof renderer === 'string' ) {
			// Common renderer - if there is one available for this type use it,
			// otherwise use the default
			return host[renderer] || host._;
		}
	
		// Use the default
		return host._;
	}
	
	
	/**
	 * Detect the data source being used for the table. Used to simplify the code
	 * a little (ajax) and to make it compress a little smaller.
	 *
	 *  @param {object} settings dataTables settings object
	 *  @returns {string} Data source
	 *  @memberof DataTable#oApi
	 */
	function _fnDataSource ( settings )
	{
		if ( settings.oFeatures.bServerSide ) {
			return 'ssp';
		}
		else if ( settings.ajax || settings.sAjaxSource ) {
			return 'ajax';
		}
		return 'dom';
	}
	

	
	
	/**
	 * Computed structure of the DataTables API, defined by the options passed to
	 * `DataTable.Api.register()` when building the API.
	 *
	 * The structure is built in order to speed creation and extension of the Api
	 * objects since the extensions are effectively pre-parsed.
	 *
	 * The array is an array of objects with the following structure, where this
	 * base array represents the Api prototype base:
	 *
	 *     [
	 *       {
	 *         name:      'data'                -- string   - Property name
	 *         val:       function () {},       -- function - Api method (or undefined if just an object
	 *         methodExt: [ ... ],              -- array    - Array of Api object definitions to extend the method result
	 *         propExt:   [ ... ]               -- array    - Array of Api object definitions to extend the property
	 *       },
	 *       {
	 *         name:     'row'
	 *         val:       {},
	 *         methodExt: [ ... ],
	 *         propExt:   [
	 *           {
	 *             name:      'data'
	 *             val:       function () {},
	 *             methodExt: [ ... ],
	 *             propExt:   [ ... ]
	 *           },
	 *           ...
	 *         ]
	 *       }
	 *     ]
	 *
	 * @type {Array}
	 * @ignore
	 */
	var __apiStruct = [];
	
	
	/**
	 * `Array.prototype` reference.
	 *
	 * @type object
	 * @ignore
	 */
	var __arrayProto = Array.prototype;
	
	
	/**
	 * Abstraction for `context` parameter of the `Api` constructor to allow it to
	 * take several different forms for ease of use.
	 *
	 * Each of the input parameter types will be converted to a DataTables settings
	 * object where possible.
	 *
	 * @param  {string|node|jQuery|object} mixed DataTable identifier. Can be one
	 *   of:
	 *
	 *   * `string` - jQuery selector. Any DataTables' matching the given selector
	 *     with be found and used.
	 *   * `node` - `TABLE` node which has already been formed into a DataTable.
	 *   * `jQuery` - A jQuery object of `TABLE` nodes.
	 *   * `object` - DataTables settings object
	 *   * `DataTables.Api` - API instance
	 * @return {array|null} Matching DataTables settings objects. `null` or
	 *   `undefined` is returned if no matching DataTable is found.
	 * @ignore
	 */
	var _toSettings = function ( mixed )
	{
		var idx, jq;
		var settings = DataTable.settings;
		var tables = $.map( settings, function (el, i) {
			return el.nTable;
		} );
	
		if ( ! mixed ) {
			return [];
		}
		else if ( mixed.nTable && mixed.oApi ) {
			// DataTables settings object
			return [ mixed ];
		}
		else if ( mixed.nodeName && mixed.nodeName.toLowerCase() === 'table' ) {
			// Table node
			idx = $.inArray( mixed, tables );
			return idx !== -1 ? [ settings[idx] ] : null;
		}
		else if ( mixed && typeof mixed.settings === 'function' ) {
			return mixed.settings().toArray();
		}
		else if ( typeof mixed === 'string' ) {
			// jQuery selector
			jq = $(mixed);
		}
		else if ( mixed instanceof $ ) {
			// jQuery object (also DataTables instance)
			jq = mixed;
		}
	
		if ( jq ) {
			return jq.map( function(i) {
				idx = $.inArray( this, tables );
				return idx !== -1 ? settings[idx] : null;
			} ).toArray();
		}
	};
	
	
	/**
	 * DataTables API class - used to control and interface with  one or more
	 * DataTables enhanced tables.
	 *
	 * The API class is heavily based on jQuery, presenting a chainable interface
	 * that you can use to interact with tables. Each instance of the API class has
	 * a "context" - i.e. the tables that it will operate on. This could be a single
	 * table, all tables on a page or a sub-set thereof.
	 *
	 * Additionally the API is designed to allow you to easily work with the data in
	 * the tables, retrieving and manipulating it as required. This is done by
	 * presenting the API class as an array like interface. The contents of the
	 * array depend upon the actions requested by each method (for example
	 * `rows().nodes()` will return an array of nodes, while `rows().data()` will
	 * return an array of objects or arrays depending upon your table's
	 * configuration). The API object has a number of array like methods (`push`,
	 * `pop`, `reverse` etc) as well as additional helper methods (`each`, `pluck`,
	 * `unique` etc) to assist your working with the data held in a table.
	 *
	 * Most methods (those which return an Api instance) are chainable, which means
	 * the return from a method call also has all of the methods available that the
	 * top level object had. For example, these two calls are equivalent:
	 *
	 *     // Not chained
	 *     api.row.add( {...} );
	 *     api.draw();
	 *
	 *     // Chained
	 *     api.row.add( {...} ).draw();
	 *
	 * @class DataTable.Api
	 * @param {array|object|string|jQuery} context DataTable identifier. This is
	 *   used to define which DataTables enhanced tables this API will operate on.
	 *   Can be one of:
	 *
	 *   * `string` - jQuery selector. Any DataTables' matching the given selector
	 *     with be found and used.
	 *   * `node` - `TABLE` node which has already been formed into a DataTable.
	 *   * `jQuery` - A jQuery object of `TABLE` nodes.
	 *   * `object` - DataTables settings object
	 * @param {array} [data] Data to initialise the Api instance with.
	 *
	 * @example
	 *   // Direct initialisation during DataTables construction
	 *   var api = $('#example').DataTable();
	 *
	 * @example
	 *   // Initialisation using a DataTables jQuery object
	 *   var api = $('#example').dataTable().api();
	 *
	 * @example
	 *   // Initialisation as a constructor
	 *   var api = new $.fn.DataTable.Api( 'table.dataTable' );
	 */
	_Api = function ( context, data )
	{
		if ( ! (this instanceof _Api) ) {
			return new _Api( context, data );
		}
	
		var settings = [];
		var ctxSettings = function ( o ) {
			var a = _toSettings( o );
			if ( a ) {
				settings = settings.concat( a );
			}
		};
	
		if ( $.isArray( context ) ) {
			for ( var i=0, ien=context.length ; i<ien ; i++ ) {
				ctxSettings( context[i] );
			}
		}
		else {
			ctxSettings( context );
		}
	
		// Remove duplicates
		this.context = _unique( settings );
	
		// Initial data
		if ( data ) {
			$.merge( this, data );
		}
	
		// selector
		this.selector = {
			rows: null,
			cols: null,
			opts: null
		};
	
		_Api.extend( this, this, __apiStruct );
	};
	
	DataTable.Api = _Api;
	
	// Don't destroy the existing prototype, just extend it. Required for jQuery 2's
	// isPlainObject.
	$.extend( _Api.prototype, {
		any: function ()
		{
			return this.count() !== 0;
		},
	
	
		concat:  __arrayProto.concat,
	
	
		context: [], // array of table settings objects
	
	
		count: function ()
		{
			return this.flatten().length;
		},
	
	
		each: function ( fn )
		{
			for ( var i=0, ien=this.length ; i<ien; i++ ) {
				fn.call( this, this[i], i, this );
			}
	
			return this;
		},
	
	
		eq: function ( idx )
		{
			var ctx = this.context;
	
			return ctx.length > idx ?
				new _Api( ctx[idx], this[idx] ) :
				null;
		},
	
	
		filter: function ( fn )
		{
			var a = [];
	
			if ( __arrayProto.filter ) {
				a = __arrayProto.filter.call( this, fn, this );
			}
			else {
				// Compatibility for browsers without EMCA-252-5 (JS 1.6)
				for ( var i=0, ien=this.length ; i<ien ; i++ ) {
					if ( fn.call( this, this[i], i, this ) ) {
						a.push( this[i] );
					}
				}
			}
	
			return new _Api( this.context, a );
		},
	
	
		flatten: function ()
		{
			var a = [];
			return new _Api( this.context, a.concat.apply( a, this.toArray() ) );
		},
	
	
		join:    __arrayProto.join,
	
	
		indexOf: __arrayProto.indexOf || function (obj, start)
		{
			for ( var i=(start || 0), ien=this.length ; i<ien ; i++ ) {
				if ( this[i] === obj ) {
					return i;
				}
			}
			return -1;
		},
	
		iterator: function ( flatten, type, fn, alwaysNew ) {
			var
				a = [], ret,
				i, ien, j, jen,
				context = this.context,
				rows, items, item,
				selector = this.selector;
	
			// Argument shifting
			if ( typeof flatten === 'string' ) {
				alwaysNew = fn;
				fn = type;
				type = flatten;
				flatten = false;
			}
	
			for ( i=0, ien=context.length ; i<ien ; i++ ) {
				var apiInst = new _Api( context[i] );
	
				if ( type === 'table' ) {
					ret = fn.call( apiInst, context[i], i );
	
					if ( ret !== undefined ) {
						a.push( ret );
					}
				}
				else if ( type === 'columns' || type === 'rows' ) {
					// this has same length as context - one entry for each table
					ret = fn.call( apiInst, context[i], this[i], i );
	
					if ( ret !== undefined ) {
						a.push( ret );
					}
				}
				else if ( type === 'column' || type === 'column-rows' || type === 'row' || type === 'cell' ) {
					// columns and rows share the same structure.
					// 'this' is an array of column indexes for each context
					items = this[i];
	
					if ( type === 'column-rows' ) {
						rows = _selector_row_indexes( context[i], selector.opts );
					}
	
					for ( j=0, jen=items.length ; j<jen ; j++ ) {
						item = items[j];
	
						if ( type === 'cell' ) {
							ret = fn.call( apiInst, context[i], item.row, item.column, i, j );
						}
						else {
							ret = fn.call( apiInst, context[i], item, i, j, rows );
						}
	
						if ( ret !== undefined ) {
							a.push( ret );
						}
					}
				}
			}
	
			if ( a.length || alwaysNew ) {
				var api = new _Api( context, flatten ? a.concat.apply( [], a ) : a );
				var apiSelector = api.selector;
				apiSelector.rows = selector.rows;
				apiSelector.cols = selector.cols;
				apiSelector.opts = selector.opts;
				return api;
			}
			return this;
		},
	
	
		lastIndexOf: __arrayProto.lastIndexOf || function (obj, start)
		{
			// Bit cheeky...
			return this.indexOf.apply( this.toArray.reverse(), arguments );
		},
	
	
		length:  0,
	
	
		map: function ( fn )
		{
			var a = [];
	
			if ( __arrayProto.map ) {
				a = __arrayProto.map.call( this, fn, this );
			}
			else {
				// Compatibility for browsers without EMCA-252-5 (JS 1.6)
				for ( var i=0, ien=this.length ; i<ien ; i++ ) {
					a.push( fn.call( this, this[i], i ) );
				}
			}
	
			return new _Api( this.context, a );
		},
	
	
		pluck: function ( prop )
		{
			return this.map( function ( el ) {
				return el[ prop ];
			} );
		},
	
		pop:     __arrayProto.pop,
	
	
		push:    __arrayProto.push,
	
	
		// Does not return an API instance
		reduce: __arrayProto.reduce || function ( fn, init )
		{
			return _fnReduce( this, fn, init, 0, this.length, 1 );
		},
	
	
		reduceRight: __arrayProto.reduceRight || function ( fn, init )
		{
			return _fnReduce( this, fn, init, this.length-1, -1, -1 );
		},
	
	
		reverse: __arrayProto.reverse,
	
	
		// Object with rows, columns and opts
		selector: null,
	
	
		shift:   __arrayProto.shift,
	
	
		slice: function () {
			return new _Api( this.context, this );
		},
	
	
		sort:    __arrayProto.sort, // ? name - order?
	
	
		splice:  __arrayProto.splice,
	
	
		toArray: function ()
		{
			return __arrayProto.slice.call( this );
		},
	
	
		to$: function ()
		{
			return $( this );
		},
	
	
		toJQuery: function ()
		{
			return $( this );
		},
	
	
		unique: function ()
		{
			return new _Api( this.context, _unique(this) );
		},
	
	
		unshift: __arrayProto.unshift
	} );
	
	
	_Api.extend = function ( scope, obj, ext )
	{
		// Only extend API instances and static properties of the API
		if ( ! ext.length || ! obj || ( ! (obj instanceof _Api) && ! obj.__dt_wrapper ) ) {
			return;
		}
	
		var
			i, ien,
			j, jen,
			struct, inner,
			methodScoping = function ( scope, fn, struc ) {
				return function () {
					var ret = fn.apply( scope, arguments );
	
					// Method extension
					_Api.extend( ret, ret, struc.methodExt );
					return ret;
				};
			};
	
		for ( i=0, ien=ext.length ; i<ien ; i++ ) {
			struct = ext[i];
	
			// Value
			obj[ struct.name ] = typeof struct.val === 'function' ?
				methodScoping( scope, struct.val, struct ) :
				$.isPlainObject( struct.val ) ?
					{} :
					struct.val;
	
			obj[ struct.name ].__dt_wrapper = true;
	
			// Property extension
			_Api.extend( scope, obj[ struct.name ], struct.propExt );
		}
	};
	
	
	// @todo - Is there need for an augment function?
	// _Api.augment = function ( inst, name )
	// {
	// 	// Find src object in the structure from the name
	// 	var parts = name.split('.');
	
	// 	_Api.extend( inst, obj );
	// };
	
	
	//     [
	//       {
	//         name:      'data'                -- string   - Property name
	//         val:       function () {},       -- function - Api method (or undefined if just an object
	//         methodExt: [ ... ],              -- array    - Array of Api object definitions to extend the method result
	//         propExt:   [ ... ]               -- array    - Array of Api object definitions to extend the property
	//       },
	//       {
	//         name:     'row'
	//         val:       {},
	//         methodExt: [ ... ],
	//         propExt:   [
	//           {
	//             name:      'data'
	//             val:       function () {},
	//             methodExt: [ ... ],
	//             propExt:   [ ... ]
	//           },
	//           ...
	//         ]
	//       }
	//     ]
	
	_Api.register = _api_register = function ( name, val )
	{
		if ( $.isArray( name ) ) {
			for ( var j=0, jen=name.length ; j<jen ; j++ ) {
				_Api.register( name[j], val );
			}
			return;
		}
	
		var
			i, ien,
			heir = name.split('.'),
			struct = __apiStruct,
			key, method;
	
		var find = function ( src, name ) {
			for ( var i=0, ien=src.length ; i<ien ; i++ ) {
				if ( src[i].name === name ) {
					return src[i];
				}
			}
			return null;
		};
	
		for ( i=0, ien=heir.length ; i<ien ; i++ ) {
			method = heir[i].indexOf('()') !== -1;
			key = method ?
				heir[i].replace('()', '') :
				heir[i];
	
			var src = find( struct, key );
			if ( ! src ) {
				src = {
					name:      key,
					val:       {},
					methodExt: [],
					propExt:   []
				};
				struct.push( src );
			}
	
			if ( i === ien-1 ) {
				src.val = val;
			}
			else {
				struct = method ?
					src.methodExt :
					src.propExt;
			}
		}
	};
	
	
	_Api.registerPlural = _api_registerPlural = function ( pluralName, singularName, val ) {
		_Api.register( pluralName, val );
	
		_Api.register( singularName, function () {
			var ret = val.apply( this, arguments );
	
			if ( ret === this ) {
				// Returned item is the API instance that was passed in, return it
				return this;
			}
			else if ( ret instanceof _Api ) {
				// New API instance returned, want the value from the first item
				// in the returned array for the singular result.
				return ret.length ?
					$.isArray( ret[0] ) ?
						new _Api( ret.context, ret[0] ) : // Array results are 'enhanced'
						ret[0] :
					undefined;
			}
	
			// Non-API return - just fire it back
			return ret;
		} );
	};
	
	
	/**
	 * Selector for HTML tables. Apply the given selector to the give array of
	 * DataTables settings objects.
	 *
	 * @param {string|integer} [selector] jQuery selector string or integer
	 * @param  {array} Array of DataTables settings objects to be filtered
	 * @return {array}
	 * @ignore
	 */
	var __table_selector = function ( selector, a )
	{
		// Integer is used to pick out a table by index
		if ( typeof selector === 'number' ) {
			return [ a[ selector ] ];
		}
	
		// Perform a jQuery selector on the table nodes
		var nodes = $.map( a, function (el, i) {
			return el.nTable;
		} );
	
		return $(nodes)
			.filter( selector )
			.map( function (i) {
				// Need to translate back from the table node to the settings
				var idx = $.inArray( this, nodes );
				return a[ idx ];
			} )
			.toArray();
	};
	
	
	
	/**
	 * Context selector for the API's context (i.e. the tables the API instance
	 * refers to.
	 *
	 * @name    DataTable.Api#tables
	 * @param {string|integer} [selector] Selector to pick which tables the iterator
	 *   should operate on. If not given, all tables in the current context are
	 *   used. This can be given as a jQuery selector (for example `':gt(0)'`) to
	 *   select multiple tables or as an integer to select a single table.
	 * @returns {DataTable.Api} Returns a new API instance if a selector is given.
	 */
	_api_register( 'tables()', function ( selector ) {
		// A new instance is created if there was a selector specified
		return selector ?
			new _Api( __table_selector( selector, this.context ) ) :
			this;
	} );
	
	
	_api_register( 'table()', function ( selector ) {
		var tables = this.tables( selector );
		var ctx = tables.context;
	
		// Truncate to the first matched table
		return ctx.length ?
			new _Api( ctx[0] ) :
			tables;
	} );
	
	
	_api_registerPlural( 'tables().nodes()', 'table().node()' , function () {
		return this.iterator( 'table', function ( ctx ) {
			return ctx.nTable;
		}, 1 );
	} );
	
	
	_api_registerPlural( 'tables().body()', 'table().body()' , function () {
		return this.iterator( 'table', function ( ctx ) {
			return ctx.nTBody;
		}, 1 );
	} );
	
	
	_api_registerPlural( 'tables().header()', 'table().header()' , function () {
		return this.iterator( 'table', function ( ctx ) {
			return ctx.nTHead;
		}, 1 );
	} );
	
	
	_api_registerPlural( 'tables().footer()', 'table().footer()' , function () {
		return this.iterator( 'table', function ( ctx ) {
			return ctx.nTFoot;
		}, 1 );
	} );
	
	
	_api_registerPlural( 'tables().containers()', 'table().container()' , function () {
		return this.iterator( 'table', function ( ctx ) {
			return ctx.nTableWrapper;
		}, 1 );
	} );
	
	
	
	/**
	 * Redraw the tables in the current context.
	 */
	_api_register( 'draw()', function ( paging ) {
		return this.iterator( 'table', function ( settings ) {
			if ( paging === 'page' ) {
				_fnDraw( settings );
			}
			else {
				if ( typeof paging === 'string' ) {
					paging = paging === 'full-hold' ?
						false :
						true;
				}
	
				_fnReDraw( settings, paging===false );
			}
		} );
	} );
	
	
	
	/**
	 * Get the current page index.
	 *
	 * @return {integer} Current page index (zero based)
	 *//**
	 * Set the current page.
	 *
	 * Note that if you attempt to show a page which does not exist, DataTables will
	 * not throw an error, but rather reset the paging.
	 *
	 * @param {integer|string} action The paging action to take. This can be one of:
	 *  * `integer` - The page index to jump to
	 *  * `string` - An action to take:
	 *    * `first` - Jump to first page.
	 *    * `next` - Jump to the next page
	 *    * `previous` - Jump to previous page
	 *    * `last` - Jump to the last page.
	 * @returns {DataTables.Api} this
	 */
	_api_register( 'page()', function ( action ) {
		if ( action === undefined ) {
			return this.page.info().page; // not an expensive call
		}
	
		// else, have an action to take on all tables
		return this.iterator( 'table', function ( settings ) {
			_fnPageChange( settings, action );
		} );
	} );
	
	
	/**
	 * Paging information for the first table in the current context.
	 *
	 * If you require paging information for another table, use the `table()` method
	 * with a suitable selector.
	 *
	 * @return {object} Object with the following properties set:
	 *  * `page` - Current page index (zero based - i.e. the first page is `0`)
	 *  * `pages` - Total number of pages
	 *  * `start` - Display index for the first record shown on the current page
	 *  * `end` - Display index for the last record shown on the current page
	 *  * `length` - Display length (number of records). Note that generally `start
	 *    + length = end`, but this is not always true, for example if there are
	 *    only 2 records to show on the final page, with a length of 10.
	 *  * `recordsTotal` - Full data set length
	 *  * `recordsDisplay` - Data set length once the current filtering criterion
	 *    are applied.
	 */
	_api_register( 'page.info()', function ( action ) {
		if ( this.context.length === 0 ) {
			return undefined;
		}
	
		var
			settings   = this.context[0],
			start      = settings._iDisplayStart,
			len        = settings.oFeatures.bPaginate ? settings._iDisplayLength : -1,
			visRecords = settings.fnRecordsDisplay(),
			all        = len === -1;
	
		return {
			"page":           all ? 0 : Math.floor( start / len ),
			"pages":          all ? 1 : Math.ceil( visRecords / len ),
			"start":          start,
			"end":            settings.fnDisplayEnd(),
			"length":         len,
			"recordsTotal":   settings.fnRecordsTotal(),
			"recordsDisplay": visRecords,
			"serverSide":     _fnDataSource( settings ) === 'ssp'
		};
	} );
	
	
	/**
	 * Get the current page length.
	 *
	 * @return {integer} Current page length. Note `-1` indicates that all records
	 *   are to be shown.
	 *//**
	 * Set the current page length.
	 *
	 * @param {integer} Page length to set. Use `-1` to show all records.
	 * @returns {DataTables.Api} this
	 */
	_api_register( 'page.len()', function ( len ) {
		// Note that we can't call this function 'length()' because `length`
		// is a Javascript property of functions which defines how many arguments
		// the function expects.
		if ( len === undefined ) {
			return this.context.length !== 0 ?
				this.context[0]._iDisplayLength :
				undefined;
		}
	
		// else, set the page length
		return this.iterator( 'table', function ( settings ) {
			_fnLengthChange( settings, len );
		} );
	} );
	
	
	
	var __reload = function ( settings, holdPosition, callback ) {
		// Use the draw event to trigger a callback
		if ( callback ) {
			var api = new _Api( settings );
	
			api.one( 'draw', function () {
				callback( api.ajax.json() );
			} );
		}
	
		if ( _fnDataSource( settings ) == 'ssp' ) {
			_fnReDraw( settings, holdPosition );
		}
		else {
			_fnProcessingDisplay( settings, true );
	
			// Cancel an existing request
			var xhr = settings.jqXHR;
			if ( xhr && xhr.readyState !== 4 ) {
				xhr.abort();
			}
	
			// Trigger xhr
			_fnBuildAjax( settings, [], function( json ) {
				_fnClearTable( settings );
	
				var data = _fnAjaxDataSrc( settings, json );
				for ( var i=0, ien=data.length ; i<ien ; i++ ) {
					_fnAddData( settings, data[i] );
				}
	
				_fnReDraw( settings, holdPosition );
				_fnProcessingDisplay( settings, false );
			} );
		}
	};
	
	
	/**
	 * Get the JSON response from the last Ajax request that DataTables made to the
	 * server. Note that this returns the JSON from the first table in the current
	 * context.
	 *
	 * @return {object} JSON received from the server.
	 */
	_api_register( 'ajax.json()', function () {
		var ctx = this.context;
	
		if ( ctx.length > 0 ) {
			return ctx[0].json;
		}
	
		// else return undefined;
	} );
	
	
	/**
	 * Get the data submitted in the last Ajax request
	 */
	_api_register( 'ajax.params()', function () {
		var ctx = this.context;
	
		if ( ctx.length > 0 ) {
			return ctx[0].oAjaxData;
		}
	
		// else return undefined;
	} );
	
	
	/**
	 * Reload tables from the Ajax data source. Note that this function will
	 * automatically re-draw the table when the remote data has been loaded.
	 *
	 * @param {boolean} [reset=true] Reset (default) or hold the current paging
	 *   position. A full re-sort and re-filter is performed when this method is
	 *   called, which is why the pagination reset is the default action.
	 * @returns {DataTables.Api} this
	 */
	_api_register( 'ajax.reload()', function ( callback, resetPaging ) {
		return this.iterator( 'table', function (settings) {
			__reload( settings, resetPaging===false, callback );
		} );
	} );
	
	
	/**
	 * Get the current Ajax URL. Note that this returns the URL from the first
	 * table in the current context.
	 *
	 * @return {string} Current Ajax source URL
	 *//**
	 * Set the Ajax URL. Note that this will set the URL for all tables in the
	 * current context.
	 *
	 * @param {string} url URL to set.
	 * @returns {DataTables.Api} this
	 */
	_api_register( 'ajax.url()', function ( url ) {
		var ctx = this.context;
	
		if ( url === undefined ) {
			// get
			if ( ctx.length === 0 ) {
				return undefined;
			}
			ctx = ctx[0];
	
			return ctx.ajax ?
				$.isPlainObject( ctx.ajax ) ?
					ctx.ajax.url :
					ctx.ajax :
				ctx.sAjaxSource;
		}
	
		// set
		return this.iterator( 'table', function ( settings ) {
			if ( $.isPlainObject( settings.ajax ) ) {
				settings.ajax.url = url;
			}
			else {
				settings.ajax = url;
			}
			// No need to consider sAjaxSource here since DataTables gives priority
			// to `ajax` over `sAjaxSource`. So setting `ajax` here, renders any
			// value of `sAjaxSource` redundant.
		} );
	} );
	
	
	/**
	 * Load data from the newly set Ajax URL. Note that this method is only
	 * available when `ajax.url()` is used to set a URL. Additionally, this method
	 * has the same effect as calling `ajax.reload()` but is provided for
	 * convenience when setting a new URL. Like `ajax.reload()` it will
	 * automatically redraw the table once the remote data has been loaded.
	 *
	 * @returns {DataTables.Api} this
	 */
	_api_register( 'ajax.url().load()', function ( callback, resetPaging ) {
		// Same as a reload, but makes sense to present it for easy access after a
		// url change
		return this.iterator( 'table', function ( ctx ) {
			__reload( ctx, resetPaging===false, callback );
		} );
	} );
	
	
	
	
	var _selector_run = function ( type, selector, selectFn, settings, opts )
	{
		var
			out = [], res,
			a, i, ien, j, jen,
			selectorType = typeof selector;
	
		// Can't just check for isArray here, as an API or jQuery instance might be
		// given with their array like look
		if ( ! selector || selectorType === 'string' || selectorType === 'function' || selector.length === undefined ) {
			selector = [ selector ];
		}
	
		for ( i=0, ien=selector.length ; i<ien ; i++ ) {
			// Only split on simple strings - complex expressions will be jQuery selectors
			a = selector[i] && selector[i].split && ! selector[i].match(/[\[\(:]/) ?
				selector[i].split(',') :
				[ selector[i] ];
	
			for ( j=0, jen=a.length ; j<jen ; j++ ) {
				res = selectFn( typeof a[j] === 'string' ? $.trim(a[j]) : a[j] );
	
				if ( res && res.length ) {
					out = out.concat( res );
				}
			}
		}
	
		// selector extensions
		var ext = _ext.selector[ type ];
		if ( ext.length ) {
			for ( i=0, ien=ext.length ; i<ien ; i++ ) {
				out = ext[i]( settings, opts, out );
			}
		}
	
		return _unique( out );
	};
	
	
	var _selector_opts = function ( opts )
	{
		if ( ! opts ) {
			opts = {};
		}
	
		// Backwards compatibility for 1.9- which used the terminology filter rather
		// than search
		if ( opts.filter && opts.search === undefined ) {
			opts.search = opts.filter;
		}
	
		return $.extend( {
			search: 'none',
			order: 'current',
			page: 'all'
		}, opts );
	};
	
	
	var _selector_first = function ( inst )
	{
		// Reduce the API instance to the first item found
		for ( var i=0, ien=inst.length ; i<ien ; i++ ) {
			if ( inst[i].length > 0 ) {
				// Assign the first element to the first item in the instance
				// and truncate the instance and context
				inst[0] = inst[i];
				inst[0].length = 1;
				inst.length = 1;
				inst.context = [ inst.context[i] ];
	
				return inst;
			}
		}
	
		// Not found - return an empty instance
		inst.length = 0;
		return inst;
	};
	
	
	var _selector_row_indexes = function ( settings, opts )
	{
		var
			i, ien, tmp, a=[],
			displayFiltered = settings.aiDisplay,
			displayMaster = settings.aiDisplayMaster;
	
		var
			search = opts.search,  // none, applied, removed
			order  = opts.order,   // applied, current, index (original - compatibility with 1.9)
			page   = opts.page;    // all, current
	
		if ( _fnDataSource( settings ) == 'ssp' ) {
			// In server-side processing mode, most options are irrelevant since
			// rows not shown don't exist and the index order is the applied order
			// Removed is a special case - for consistency just return an empty
			// array
			return search === 'removed' ?
				[] :
				_range( 0, displayMaster.length );
		}
		else if ( page == 'current' ) {
			// Current page implies that order=current and fitler=applied, since it is
			// fairly senseless otherwise, regardless of what order and search actually
			// are
			for ( i=settings._iDisplayStart, ien=settings.fnDisplayEnd() ; i<ien ; i++ ) {
				a.push( displayFiltered[i] );
			}
		}
		else if ( order == 'current' || order == 'applied' ) {
			if ( search == 'none') {
				a = displayMaster.slice();
			}
			else if ( search == 'applied' ) {
				a = displayFiltered.slice();
			}
			else if ( search == 'removed' ) {
				// O(n+m) solution by creating a hash map
				var displayFilteredMap = {};
	
				for ( var i=0, ien=displayFiltered.length ; i<ien ; i++ ) {
					displayFilteredMap[displayFiltered[i]] = null;
				}
	
				a = $.map( displayMaster, function (el) {
					return ! displayFilteredMap.hasOwnProperty(el) ?
						el :
						null;
				} );
			}
		}
		else if ( order == 'index' || order == 'original' ) {
			for ( i=0, ien=settings.aoData.length ; i<ien ; i++ ) {
				if ( search == 'none' ) {
					a.push( i );
				}
				else { // applied | removed
					tmp = $.inArray( i, displayFiltered );
	
					if ((tmp === -1 && search == 'removed') ||
						(tmp >= 0   && search == 'applied') )
					{
						a.push( i );
					}
				}
			}
		}
	
		return a;
	};
	
	
	/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
	 * Rows
	 *
	 * {}          - no selector - use all available rows
	 * {integer}   - row aoData index
	 * {node}      - TR node
	 * {string}    - jQuery selector to apply to the TR elements
	 * {array}     - jQuery array of nodes, or simply an array of TR nodes
	 *
	 */
	var __row_selector = function ( settings, selector, opts )
	{
		var rows;
		var run = function ( sel ) {
			var selInt = _intVal( sel );
			var i, ien;
			var aoData = settings.aoData;
	
			// Short cut - selector is a number and no options provided (default is
			// all records, so no need to check if the index is in there, since it
			// must be - dev error if the index doesn't exist).
			if ( selInt !== null && ! opts ) {
				return [ selInt ];
			}
	
			if ( ! rows ) {
				rows = _selector_row_indexes( settings, opts );
			}
	
			if ( selInt !== null && $.inArray( selInt, rows ) !== -1 ) {
				// Selector - integer
				return [ selInt ];
			}
			else if ( sel === null || sel === undefined || sel === '' ) {
				// Selector - none
				return rows;
			}
	
			// Selector - function
			if ( typeof sel === 'function' ) {
				return $.map( rows, function (idx) {
					var row = aoData[ idx ];
					return sel( idx, row._aData, row.nTr ) ? idx : null;
				} );
			}
	
			// Selector - node
			if ( sel.nodeName ) {
				var rowIdx = sel._DT_RowIndex;  // Property added by DT for fast lookup
				var cellIdx = sel._DT_CellIndex;
	
				if ( rowIdx !== undefined ) {
					// Make sure that the row is actually still present in the table
					return aoData[ rowIdx ] && aoData[ rowIdx ].nTr === sel ?
						[ rowIdx ] :
						[];
				}
				else if ( cellIdx ) {
					return aoData[ cellIdx.row ] && aoData[ cellIdx.row ].nTr === sel ?
						[ cellIdx.row ] :
						[];
				}
				else {
					var host = $(sel).closest('*[data-dt-row]');
					return host.length ?
						[ host.data('dt-row') ] :
						[];
				}
			}
	
			// ID selector. Want to always be able to select rows by id, regardless
			// of if the tr element has been created or not, so can't rely upon
			// jQuery here - hence a custom implementation. This does not match
			// Sizzle's fast selector or HTML4 - in HTML5 the ID can be anything,
			// but to select it using a CSS selector engine (like Sizzle or
			// querySelect) it would need to need to be escaped for some characters.
			// DataTables simplifies this for row selectors since you can select
			// only a row. A # indicates an id any anything that follows is the id -
			// unescaped.
			if ( typeof sel === 'string' && sel.charAt(0) === '#' ) {
				// get row index from id
				var rowObj = settings.aIds[ sel.replace( /^#/, '' ) ];
				if ( rowObj !== undefined ) {
					return [ rowObj.idx ];
				}
	
				// need to fall through to jQuery in case there is DOM id that
				// matches
			}
			
			// Get nodes in the order from the `rows` array with null values removed
			var nodes = _removeEmpty(
				_pluck_order( settings.aoData, rows, 'nTr' )
			);
	
			// Selector - jQuery selector string, array of nodes or jQuery object/
			// As jQuery's .filter() allows jQuery objects to be passed in filter,
			// it also allows arrays, so this will cope with all three options
			return $(nodes)
				.filter( sel )
				.map( function () {
					return this._DT_RowIndex;
				} )
				.toArray();
		};
	
		return _selector_run( 'row', selector, run, settings, opts );
	};
	
	
	_api_register( 'rows()', function ( selector, opts ) {
		// argument shifting
		if ( selector === undefined ) {
			selector = '';
		}
		else if ( $.isPlainObject( selector ) ) {
			opts = selector;
			selector = '';
		}
	
		opts = _selector_opts( opts );
	
		var inst = this.iterator( 'table', function ( settings ) {
			return __row_selector( settings, selector, opts );
		}, 1 );
	
		// Want argument shifting here and in __row_selector?
		inst.selector.rows = selector;
		inst.selector.opts = opts;
	
		return inst;
	} );
	
	_api_register( 'rows().nodes()', function () {
		return this.iterator( 'row', function ( settings, row ) {
			return settings.aoData[ row ].nTr || undefined;
		}, 1 );
	} );
	
	_api_register( 'rows().data()', function () {
		return this.iterator( true, 'rows', function ( settings, rows ) {
			return _pluck_order( settings.aoData, rows, '_aData' );
		}, 1 );
	} );
	
	_api_registerPlural( 'rows().cache()', 'row().cache()', function ( type ) {
		return this.iterator( 'row', function ( settings, row ) {
			var r = settings.aoData[ row ];
			return type === 'search' ? r._aFilterData : r._aSortData;
		}, 1 );
	} );
	
	_api_registerPlural( 'rows().invalidate()', 'row().invalidate()', function ( src ) {
		return this.iterator( 'row', function ( settings, row ) {
			_fnInvalidate( settings, row, src );
		} );
	} );
	
	_api_registerPlural( 'rows().indexes()', 'row().index()', function () {
		return this.iterator( 'row', function ( settings, row ) {
			return row;
		}, 1 );
	} );
	
	_api_registerPlural( 'rows().ids()', 'row().id()', function ( hash ) {
		var a = [];
		var context = this.context;
	
		// `iterator` will drop undefined values, but in this case we want them
		for ( var i=0, ien=context.length ; i<ien ; i++ ) {
			for ( var j=0, jen=this[i].length ; j<jen ; j++ ) {
				var id = context[i].rowIdFn( context[i].aoData[ this[i][j] ]._aData );
				a.push( (hash === true ? '#' : '' )+ id );
			}
		}
	
		return new _Api( context, a );
	} );
	
	_api_registerPlural( 'rows().remove()', 'row().remove()', function () {
		var that = this;
	
		this.iterator( 'row', function ( settings, row, thatIdx ) {
			var data = settings.aoData;
			var rowData = data[ row ];
			var i, ien, j, jen;
			var loopRow, loopCells;
	
			data.splice( row, 1 );
	
			// Update the cached indexes
			for ( i=0, ien=data.length ; i<ien ; i++ ) {
				loopRow = data[i];
				loopCells = loopRow.anCells;
	
				// Rows
				if ( loopRow.nTr !== null ) {
					loopRow.nTr._DT_RowIndex = i;
				}
	
				// Cells
				if ( loopCells !== null ) {
					for ( j=0, jen=loopCells.length ; j<jen ; j++ ) {
						loopCells[j]._DT_CellIndex.row = i;
					}
				}
			}
	
			// Delete from the display arrays
			_fnDeleteIndex( settings.aiDisplayMaster, row );
			_fnDeleteIndex( settings.aiDisplay, row );
			_fnDeleteIndex( that[ thatIdx ], row, false ); // maintain local indexes
	
			// For server-side processing tables - subtract the deleted row from the count
			if ( settings._iRecordsDisplay > 0 ) {
				settings._iRecordsDisplay--;
			}
	
			// Check for an 'overflow' they case for displaying the table
			_fnLengthOverflow( settings );
	
			// Remove the row's ID reference if there is one
			var id = settings.rowIdFn( rowData._aData );
			if ( id !== undefined ) {
				delete settings.aIds[ id ];
			}
		} );
	
		this.iterator( 'table', function ( settings ) {
			for ( var i=0, ien=settings.aoData.length ; i<ien ; i++ ) {
				settings.aoData[i].idx = i;
			}
		} );
	
		return this;
	} );
	
	
	_api_register( 'rows.add()', function ( rows ) {
		var newRows = this.iterator( 'table', function ( settings ) {
				var row, i, ien;
				var out = [];
	
				for ( i=0, ien=rows.length ; i<ien ; i++ ) {
					row = rows[i];
	
					if ( row.nodeName && row.nodeName.toUpperCase() === 'TR' ) {
						out.push( _fnAddTr( settings, row )[0] );
					}
					else {
						out.push( _fnAddData( settings, row ) );
					}
				}
	
				return out;
			}, 1 );
	
		// Return an Api.rows() extended instance, so rows().nodes() etc can be used
		var modRows = this.rows( -1 );
		modRows.pop();
		$.merge( modRows, newRows );
	
		return modRows;
	} );
	
	
	
	
	
	/**
	 *
	 */
	_api_register( 'row()', function ( selector, opts ) {
		return _selector_first( this.rows( selector, opts ) );
	} );
	
	
	_api_register( 'row().data()', function ( data ) {
		var ctx = this.context;
	
		if ( data === undefined ) {
			// Get
			return ctx.length && this.length ?
				ctx[0].aoData[ this[0] ]._aData :
				undefined;
		}
	
		// Set
		var row = ctx[0].aoData[ this[0] ];
		row._aData = data;
	
		// If the DOM has an id, and the data source is an array
		if ( $.isArray( data ) && row.nTr.id ) {
			_fnSetObjectDataFn( ctx[0].rowId )( data, row.nTr.id );
		}
	
		// Automatically invalidate
		_fnInvalidate( ctx[0], this[0], 'data' );
	
		return this;
	} );
	
	
	_api_register( 'row().node()', function () {
		var ctx = this.context;
	
		return ctx.length && this.length ?
			ctx[0].aoData[ this[0] ].nTr || null :
			null;
	} );
	
	
	_api_register( 'row.add()', function ( row ) {
		// Allow a jQuery object to be passed in - only a single row is added from
		// it though - the first element in the set
		if ( row instanceof $ && row.length ) {
			row = row[0];
		}
	
		var rows = this.iterator( 'table', function ( settings ) {
			if ( row.nodeName && row.nodeName.toUpperCase() === 'TR' ) {
				return _fnAddTr( settings, row )[0];
			}
			return _fnAddData( settings, row );
		} );
	
		// Return an Api.rows() extended instance, with the newly added row selected
		return this.row( rows[0] );
	} );
	
	
	
	var __details_add = function ( ctx, row, data, klass )
	{
		// Convert to array of TR elements
		var rows = [];
		var addRow = function ( r, k ) {
			// Recursion to allow for arrays of jQuery objects
			if ( $.isArray( r ) || r instanceof $ ) {
				for ( var i=0, ien=r.length ; i<ien ; i++ ) {
					addRow( r[i], k );
				}
				return;
			}
	
			// If we get a TR element, then just add it directly - up to the dev
			// to add the correct number of columns etc
			if ( r.nodeName && r.nodeName.toLowerCase() === 'tr' ) {
				rows.push( r );
			}
			else {
				// Otherwise create a row with a wrapper
				var created = $('<tr><td/></tr>').addClass( k );
				$('td', created)
					.addClass( k )
					.html( r )
					[0].colSpan = _fnVisbleColumns( ctx );
	
				rows.push( created[0] );
			}
		};
	
		addRow( data, klass );
	
		if ( row._details ) {
			row._details.detach();
		}
	
		row._details = $(rows);
	
		// If the children were already shown, that state should be retained
		if ( row._detailsShow ) {
			row._details.insertAfter( row.nTr );
		}
	};
	
	
	var __details_remove = function ( api, idx )
	{
		var ctx = api.context;
	
		if ( ctx.length ) {
			var row = ctx[0].aoData[ idx !== undefined ? idx : api[0] ];
	
			if ( row && row._details ) {
				row._details.remove();
	
				row._detailsShow = undefined;
				row._details = undefined;
			}
		}
	};
	
	
	var __details_display = function ( api, show ) {
		var ctx = api.context;
	
		if ( ctx.length && api.length ) {
			var row = ctx[0].aoData[ api[0] ];
	
			if ( row._details ) {
				row._detailsShow = show;
	
				if ( show ) {
					row._details.insertAfter( row.nTr );
				}
				else {
					row._details.detach();
				}
	
				__details_events( ctx[0] );
			}
		}
	};
	
	
	var __details_events = function ( settings )
	{
		var api = new _Api( settings );
		var namespace = '.dt.DT_details';
		var drawEvent = 'draw'+namespace;
		var colvisEvent = 'column-visibility'+namespace;
		var destroyEvent = 'destroy'+namespace;
		var data = settings.aoData;
	
		api.off( drawEvent +' '+ colvisEvent +' '+ destroyEvent );
	
		if ( _pluck( data, '_details' ).length > 0 ) {
			// On each draw, insert the required elements into the document
			api.on( drawEvent, function ( e, ctx ) {
				if ( settings !== ctx ) {
					return;
				}
	
				api.rows( {page:'current'} ).eq(0).each( function (idx) {
					// Internal data grab
					var row = data[ idx ];
	
					if ( row._detailsShow ) {
						row._details.insertAfter( row.nTr );
					}
				} );
			} );
	
			// Column visibility change - update the colspan
			api.on( colvisEvent, function ( e, ctx, idx, vis ) {
				if ( settings !== ctx ) {
					return;
				}
	
				// Update the colspan for the details rows (note, only if it already has
				// a colspan)
				var row, visible = _fnVisbleColumns( ctx );
	
				for ( var i=0, ien=data.length ; i<ien ; i++ ) {
					row = data[i];
	
					if ( row._details ) {
						row._details.children('td[colspan]').attr('colspan', visible );
					}
				}
			} );
	
			// Table destroyed - nuke any child rows
			api.on( destroyEvent, function ( e, ctx ) {
				if ( settings !== ctx ) {
					return;
				}
	
				for ( var i=0, ien=data.length ; i<ien ; i++ ) {
					if ( data[i]._details ) {
						__details_remove( api, i );
					}
				}
			} );
		}
	};
	
	// Strings for the method names to help minification
	var _emp = '';
	var _child_obj = _emp+'row().child';
	var _child_mth = _child_obj+'()';
	
	// data can be:
	//  tr
	//  string
	//  jQuery or array of any of the above
	_api_register( _child_mth, function ( data, klass ) {
		var ctx = this.context;
	
		if ( data === undefined ) {
			// get
			return ctx.length && this.length ?
				ctx[0].aoData[ this[0] ]._details :
				undefined;
		}
		else if ( data === true ) {
			// show
			this.child.show();
		}
		else if ( data === false ) {
			// remove
			__details_remove( this );
		}
		else if ( ctx.length && this.length ) {
			// set
			__details_add( ctx[0], ctx[0].aoData[ this[0] ], data, klass );
		}
	
		return this;
	} );
	
	
	_api_register( [
		_child_obj+'.show()',
		_child_mth+'.show()' // only when `child()` was called with parameters (without
	], function ( show ) {   // it returns an object and this method is not executed)
		__details_display( this, true );
		return this;
	} );
	
	
	_api_register( [
		_child_obj+'.hide()',
		_child_mth+'.hide()' // only when `child()` was called with parameters (without
	], function () {         // it returns an object and this method is not executed)
		__details_display( this, false );
		return this;
	} );
	
	
	_api_register( [
		_child_obj+'.remove()',
		_child_mth+'.remove()' // only when `child()` was called with parameters (without
	], function () {           // it returns an object and this method is not executed)
		__details_remove( this );
		return this;
	} );
	
	
	_api_register( _child_obj+'.isShown()', function () {
		var ctx = this.context;
	
		if ( ctx.length && this.length ) {
			// _detailsShown as false or undefined will fall through to return false
			return ctx[0].aoData[ this[0] ]._detailsShow || false;
		}
		return false;
	} );
	
	
	
	/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
	 * Columns
	 *
	 * {integer}           - column index (>=0 count from left, <0 count from right)
	 * "{integer}:visIdx"  - visible column index (i.e. translate to column index)  (>=0 count from left, <0 count from right)
	 * "{integer}:visible" - alias for {integer}:visIdx  (>=0 count from left, <0 count from right)
	 * "{string}:name"     - column name
	 * "{string}"          - jQuery selector on column header nodes
	 *
	 */
	
	// can be an array of these items, comma separated list, or an array of comma
	// separated lists
	
	var __re_column_selector = /^([^:]+):(name|visIdx|visible)$/;
	
	
	// r1 and r2 are redundant - but it means that the parameters match for the
	// iterator callback in columns().data()
	var __columnData = function ( settings, column, r1, r2, rows ) {
		var a = [];
		for ( var row=0, ien=rows.length ; row<ien ; row++ ) {
			a.push( _fnGetCellData( settings, rows[row], column ) );
		}
		return a;
	};
	
	
	var __column_selector = function ( settings, selector, opts )
	{
		var
			columns = settings.aoColumns,
			names = _pluck( columns, 'sName' ),
			nodes = _pluck( columns, 'nTh' );
	
		var run = function ( s ) {
			var selInt = _intVal( s );
	
			// Selector - all
			if ( s === '' ) {
				return _range( columns.length );
			}
	
			// Selector - index
			if ( selInt !== null ) {
				return [ selInt >= 0 ?
					selInt : // Count from left
					columns.length + selInt // Count from right (+ because its a negative value)
				];
			}
	
			// Selector = function
			if ( typeof s === 'function' ) {
				var rows = _selector_row_indexes( settings, opts );
	
				return $.map( columns, function (col, idx) {
					return s(
							idx,
							__columnData( settings, idx, 0, 0, rows ),
							nodes[ idx ]
						) ? idx : null;
				} );
			}
	
			// jQuery or string selector
			var match = typeof s === 'string' ?
				s.match( __re_column_selector ) :
				'';
	
			if ( match ) {
				switch( match[2] ) {
					case 'visIdx':
					case 'visible':
						var idx = parseInt( match[1], 10 );
						// Visible index given, convert to column index
						if ( idx < 0 ) {
							// Counting from the right
							var visColumns = $.map( columns, function (col,i) {
								return col.bVisible ? i : null;
							} );
							return [ visColumns[ visColumns.length + idx ] ];
						}
						// Counting from the left
						return [ _fnVisibleToColumnIndex( settings, idx ) ];
	
					case 'name':
						// match by name. `names` is column index complete and in order
						return $.map( names, function (name, i) {
							return name === match[1] ? i : null;
						} );
	
					default:
						return [];
				}
			}
	
			// Cell in the table body
			if ( s.nodeName && s._DT_CellIndex ) {
				return [ s._DT_CellIndex.column ];
			}
	
			// jQuery selector on the TH elements for the columns
			var jqResult = $( nodes )
				.filter( s )
				.map( function () {
					return $.inArray( this, nodes ); // `nodes` is column index complete and in order
				} )
				.toArray();
	
			if ( jqResult.length || ! s.nodeName ) {
				return jqResult;
			}
	
			// Otherwise a node which might have a `dt-column` data attribute, or be
			// a child or such an element
			var host = $(s).closest('*[data-dt-column]');
			return host.length ?
				[ host.data('dt-column') ] :
				[];
		};
	
		return _selector_run( 'column', selector, run, settings, opts );
	};
	
	
	var __setColumnVis = function ( settings, column, vis ) {
		var
			cols = settings.aoColumns,
			col  = cols[ column ],
			data = settings.aoData,
			row, cells, i, ien, tr;
	
		// Get
		if ( vis === undefined ) {
			return col.bVisible;
		}
	
		// Set
		// No change
		if ( col.bVisible === vis ) {
			return;
		}
	
		if ( vis ) {
			// Insert column
			// Need to decide if we should use appendChild or insertBefore
			var insertBefore = $.inArray( true, _pluck(cols, 'bVisible'), column+1 );
	
			for ( i=0, ien=data.length ; i<ien ; i++ ) {
				tr = data[i].nTr;
				cells = data[i].anCells;
	
				if ( tr ) {
					// insertBefore can act like appendChild if 2nd arg is null
					tr.insertBefore( cells[ column ], cells[ insertBefore ] || null );
				}
			}
		}
		else {
			// Remove column
			$( _pluck( settings.aoData, 'anCells', column ) ).detach();
		}
	
		// Common actions
		col.bVisible = vis;
		_fnDrawHead( settings, settings.aoHeader );
		_fnDrawHead( settings, settings.aoFooter );
	
		// Update colspan for no records display. Child rows and extensions will use their own
		// listeners to do this - only need to update the empty table item here
		if ( ! settings.aiDisplay.length ) {
			$(settings.nTBody).find('td[colspan]').attr('colspan', _fnVisbleColumns(settings));
		}
	
		_fnSaveState( settings );
	};
	
	
	_api_register( 'columns()', function ( selector, opts ) {
		// argument shifting
		if ( selector === undefined ) {
			selector = '';
		}
		else if ( $.isPlainObject( selector ) ) {
			opts = selector;
			selector = '';
		}
	
		opts = _selector_opts( opts );
	
		var inst = this.iterator( 'table', function ( settings ) {
			return __column_selector( settings, selector, opts );
		}, 1 );
	
		// Want argument shifting here and in _row_selector?
		inst.selector.cols = selector;
		inst.selector.opts = opts;
	
		return inst;
	} );
	
	_api_registerPlural( 'columns().header()', 'column().header()', function ( selector, opts ) {
		return this.iterator( 'column', function ( settings, column ) {
			return settings.aoColumns[column].nTh;
		}, 1 );
	} );
	
	_api_registerPlural( 'columns().footer()', 'column().footer()', function ( selector, opts ) {
		return this.iterator( 'column', function ( settings, column ) {
			return settings.aoColumns[column].nTf;
		}, 1 );
	} );
	
	_api_registerPlural( 'columns().data()', 'column().data()', function () {
		return this.iterator( 'column-rows', __columnData, 1 );
	} );
	
	_api_registerPlural( 'columns().dataSrc()', 'column().dataSrc()', function () {
		return this.iterator( 'column', function ( settings, column ) {
			return settings.aoColumns[column].mData;
		}, 1 );
	} );
	
	_api_registerPlural( 'columns().cache()', 'column().cache()', function ( type ) {
		return this.iterator( 'column-rows', function ( settings, column, i, j, rows ) {
			return _pluck_order( settings.aoData, rows,
				type === 'search' ? '_aFilterData' : '_aSortData', column
			);
		}, 1 );
	} );
	
	_api_registerPlural( 'columns().nodes()', 'column().nodes()', function () {
		return this.iterator( 'column-rows', function ( settings, column, i, j, rows ) {
			return _pluck_order( settings.aoData, rows, 'anCells', column ) ;
		}, 1 );
	} );
	
	_api_registerPlural( 'columns().visible()', 'column().visible()', function ( vis, calc ) {
		var ret = this.iterator( 'column', function ( settings, column ) {
			if ( vis === undefined ) {
				return settings.aoColumns[ column ].bVisible;
			} // else
			__setColumnVis( settings, column, vis );
		} );
	
		// Group the column visibility changes
		if ( vis !== undefined ) {
			// Second loop once the first is done for events
			this.iterator( 'column', function ( settings, column ) {
				_fnCallbackFire( settings, null, 'column-visibility', [settings, column, vis, calc] );
			} );
	
			if ( calc === undefined || calc ) {
				this.columns.adjust();
			}
		}
	
		return ret;
	} );
	
	_api_registerPlural( 'columns().indexes()', 'column().index()', function ( type ) {
		return this.iterator( 'column', function ( settings, column ) {
			return type === 'visible' ?
				_fnColumnIndexToVisible( settings, column ) :
				column;
		}, 1 );
	} );
	
	_api_register( 'columns.adjust()', function () {
		return this.iterator( 'table', function ( settings ) {
			_fnAdjustColumnSizing( settings );
		}, 1 );
	} );
	
	_api_register( 'column.index()', function ( type, idx ) {
		if ( this.context.length !== 0 ) {
			var ctx = this.context[0];
	
			if ( type === 'fromVisible' || type === 'toData' ) {
				return _fnVisibleToColumnIndex( ctx, idx );
			}
			else if ( type === 'fromData' || type === 'toVisible' ) {
				return _fnColumnIndexToVisible( ctx, idx );
			}
		}
	} );
	
	_api_register( 'column()', function ( selector, opts ) {
		return _selector_first( this.columns( selector, opts ) );
	} );
	
	
	
	var __cell_selector = function ( settings, selector, opts )
	{
		var data = settings.aoData;
		var rows = _selector_row_indexes( settings, opts );
		var cells = _removeEmpty( _pluck_order( data, rows, 'anCells' ) );
		var allCells = $( [].concat.apply([], cells) );
		var row;
		var columns = settings.aoColumns.length;
		var a, i, ien, j, o, host;
	
		var run = function ( s ) {
			var fnSelector = typeof s === 'function';
	
			if ( s === null || s === undefined || fnSelector ) {
				// All cells and function selectors
				a = [];
	
				for ( i=0, ien=rows.length ; i<ien ; i++ ) {
					row = rows[i];
	
					for ( j=0 ; j<columns ; j++ ) {
						o = {
							row: row,
							column: j
						};
	
						if ( fnSelector ) {
							// Selector - function
							host = data[ row ];
	
							if ( s( o, _fnGetCellData(settings, row, j), host.anCells ? host.anCells[j] : null ) ) {
								a.push( o );
							}
						}
						else {
							// Selector - all
							a.push( o );
						}
					}
				}
	
				return a;
			}
			
			// Selector - index
			if ( $.isPlainObject( s ) ) {
				// Valid cell index and its in the array of selectable rows
				return s.column !== undefined && s.row !== undefined && $.inArray( s.row, rows ) !== -1 ?
					[s] :
					[];
			}
	
			// Selector - jQuery filtered cells
			var jqResult = allCells
				.filter( s )
				.map( function (i, el) {
					return { // use a new object, in case someone changes the values
						row:    el._DT_CellIndex.row,
						column: el._DT_CellIndex.column
	 				};
				} )
				.toArray();
	
			if ( jqResult.length || ! s.nodeName ) {
				return jqResult;
			}
	
			// Otherwise the selector is a node, and there is one last option - the
			// element might be a child of an element which has dt-row and dt-column
			// data attributes
			host = $(s).closest('*[data-dt-row]');
			return host.length ?
				[ {
					row: host.data('dt-row'),
					column: host.data('dt-column')
				} ] :
				[];
		};
	
		return _selector_run( 'cell', selector, run, settings, opts );
	};
	
	
	
	
	_api_register( 'cells()', function ( rowSelector, columnSelector, opts ) {
		// Argument shifting
		if ( $.isPlainObject( rowSelector ) ) {
			// Indexes
			if ( rowSelector.row === undefined ) {
				// Selector options in first parameter
				opts = rowSelector;
				rowSelector = null;
			}
			else {
				// Cell index objects in first parameter
				opts = columnSelector;
				columnSelector = null;
			}
		}
		if ( $.isPlainObject( columnSelector ) ) {
			opts = columnSelector;
			columnSelector = null;
		}
	
		// Cell selector
		if ( columnSelector === null || columnSelector === undefined ) {
			return this.iterator( 'table', function ( settings ) {
				return __cell_selector( settings, rowSelector, _selector_opts( opts ) );
			} );
		}
	
		// Row + column selector
		var columns = this.columns( columnSelector );
		var rows = this.rows( rowSelector );
		var a, i, ien, j, jen;
	
		this.iterator( 'table', function ( settings, idx ) {
			a = [];
	
			for ( i=0, ien=rows[idx].length ; i<ien ; i++ ) {
				for ( j=0, jen=columns[idx].length ; j<jen ; j++ ) {
					a.push( {
						row:    rows[idx][i],
						column: columns[idx][j]
					} );
				}
			}
		}, 1 );
	
	    // Now pass through the cell selector for options
	    var cells = this.cells( a, opts );
	
		$.extend( cells.selector, {
			cols: columnSelector,
			rows: rowSelector,
			opts: opts
		} );
	
		return cells;
	} );
	
	
	_api_registerPlural( 'cells().nodes()', 'cell().node()', function () {
		return this.iterator( 'cell', function ( settings, row, column ) {
			var data = settings.aoData[ row ];
	
			return data && data.anCells ?
				data.anCells[ column ] :
				undefined;
		}, 1 );
	} );
	
	
	_api_register( 'cells().data()', function () {
		return this.iterator( 'cell', function ( settings, row, column ) {
			return _fnGetCellData( settings, row, column );
		}, 1 );
	} );
	
	
	_api_registerPlural( 'cells().cache()', 'cell().cache()', function ( type ) {
		type = type === 'search' ? '_aFilterData' : '_aSortData';
	
		return this.iterator( 'cell', function ( settings, row, column ) {
			return settings.aoData[ row ][ type ][ column ];
		}, 1 );
	} );
	
	
	_api_registerPlural( 'cells().render()', 'cell().render()', function ( type ) {
		return this.iterator( 'cell', function ( settings, row, column ) {
			return _fnGetCellData( settings, row, column, type );
		}, 1 );
	} );
	
	
	_api_registerPlural( 'cells().indexes()', 'cell().index()', function () {
		return this.iterator( 'cell', function ( settings, row, column ) {
			return {
				row: row,
				column: column,
				columnVisible: _fnColumnIndexToVisible( settings, column )
			};
		}, 1 );
	} );
	
	
	_api_registerPlural( 'cells().invalidate()', 'cell().invalidate()', function ( src ) {
		return this.iterator( 'cell', function ( settings, row, column ) {
			_fnInvalidate( settings, row, src, column );
		} );
	} );
	
	
	
	_api_register( 'cell()', function ( rowSelector, columnSelector, opts ) {
		return _selector_first( this.cells( rowSelector, columnSelector, opts ) );
	} );
	
	
	_api_register( 'cell().data()', function ( data ) {
		var ctx = this.context;
		var cell = this[0];
	
		if ( data === undefined ) {
			// Get
			return ctx.length && cell.length ?
				_fnGetCellData( ctx[0], cell[0].row, cell[0].column ) :
				undefined;
		}
	
		// Set
		_fnSetCellData( ctx[0], cell[0].row, cell[0].column, data );
		_fnInvalidate( ctx[0], cell[0].row, 'data', cell[0].column );
	
		return this;
	} );
	
	
	
	/**
	 * Get current ordering (sorting) that has been applied to the table.
	 *
	 * @returns {array} 2D array containing the sorting information for the first
	 *   table in the current context. Each element in the parent array represents
	 *   a column being sorted upon (i.e. multi-sorting with two columns would have
	 *   2 inner arrays). The inner arrays may have 2 or 3 elements. The first is
	 *   the column index that the sorting condition applies to, the second is the
	 *   direction of the sort (`desc` or `asc`) and, optionally, the third is the
	 *   index of the sorting order from the `column.sorting` initialisation array.
	 *//**
	 * Set the ordering for the table.
	 *
	 * @param {integer} order Column index to sort upon.
	 * @param {string} direction Direction of the sort to be applied (`asc` or `desc`)
	 * @returns {DataTables.Api} this
	 *//**
	 * Set the ordering for the table.
	 *
	 * @param {array} order 1D array of sorting information to be applied.
	 * @param {array} [...] Optional additional sorting conditions
	 * @returns {DataTables.Api} this
	 *//**
	 * Set the ordering for the table.
	 *
	 * @param {array} order 2D array of sorting information to be applied.
	 * @returns {DataTables.Api} this
	 */
	_api_register( 'order()', function ( order, dir ) {
		var ctx = this.context;
	
		if ( order === undefined ) {
			// get
			return ctx.length !== 0 ?
				ctx[0].aaSorting :
				undefined;
		}
	
		// set
		if ( typeof order === 'number' ) {
			// Simple column / direction passed in
			order = [ [ order, dir ] ];
		}
		else if ( order.length && ! $.isArray( order[0] ) ) {
			// Arguments passed in (list of 1D arrays)
			order = Array.prototype.slice.call( arguments );
		}
		// otherwise a 2D array was passed in
	
		return this.iterator( 'table', function ( settings ) {
			settings.aaSorting = order.slice();
		} );
	} );
	
	
	/**
	 * Attach a sort listener to an element for a given column
	 *
	 * @param {node|jQuery|string} node Identifier for the element(s) to attach the
	 *   listener to. This can take the form of a single DOM node, a jQuery
	 *   collection of nodes or a jQuery selector which will identify the node(s).
	 * @param {integer} column the column that a click on this node will sort on
	 * @param {function} [callback] callback function when sort is run
	 * @returns {DataTables.Api} this
	 */
	_api_register( 'order.listener()', function ( node, column, callback ) {
		return this.iterator( 'table', function ( settings ) {
			_fnSortAttachListener( settings, node, column, callback );
		} );
	} );
	
	
	_api_register( 'order.fixed()', function ( set ) {
		if ( ! set ) {
			var ctx = this.context;
			var fixed = ctx.length ?
				ctx[0].aaSortingFixed :
				undefined;
	
			return $.isArray( fixed ) ?
				{ pre: fixed } :
				fixed;
		}
	
		return this.iterator( 'table', function ( settings ) {
			settings.aaSortingFixed = $.extend( true, {}, set );
		} );
	} );
	
	
	// Order by the selected column(s)
	_api_register( [
		'columns().order()',
		'column().order()'
	], function ( dir ) {
		var that = this;
	
		return this.iterator( 'table', function ( settings, i ) {
			var sort = [];
	
			$.each( that[i], function (j, col) {
				sort.push( [ col, dir ] );
			} );
	
			settings.aaSorting = sort;
		} );
	} );
	
	
	
	_api_register( 'search()', function ( input, regex, smart, caseInsen ) {
		var ctx = this.context;
	
		if ( input === undefined ) {
			// get
			return ctx.length !== 0 ?
				ctx[0].oPreviousSearch.sSearch :
				undefined;
		}
	
		// set
		return this.iterator( 'table', function ( settings ) {
			if ( ! settings.oFeatures.bFilter ) {
				return;
			}
	
			_fnFilterComplete( settings, $.extend( {}, settings.oPreviousSearch, {
				"sSearch": input+"",
				"bRegex":  regex === null ? false : regex,
				"bSmart":  smart === null ? true  : smart,
				"bCaseInsensitive": caseInsen === null ? true : caseInsen
			} ), 1 );
		} );
	} );
	
	
	_api_registerPlural(
		'columns().search()',
		'column().search()',
		function ( input, regex, smart, caseInsen ) {
			return this.iterator( 'column', function ( settings, column ) {
				var preSearch = settings.aoPreSearchCols;
	
				if ( input === undefined ) {
					// get
					return preSearch[ column ].sSearch;
				}
	
				// set
				if ( ! settings.oFeatures.bFilter ) {
					return;
				}
	
				$.extend( preSearch[ column ], {
					"sSearch": input+"",
					"bRegex":  regex === null ? false : regex,
					"bSmart":  smart === null ? true  : smart,
					"bCaseInsensitive": caseInsen === null ? true : caseInsen
				} );
	
				_fnFilterComplete( settings, settings.oPreviousSearch, 1 );
			} );
		}
	);
	
	/*
	 * State API methods
	 */
	
	_api_register( 'state()', function () {
		return this.context.length ?
			this.context[0].oSavedState :
			null;
	} );
	
	
	_api_register( 'state.clear()', function () {
		return this.iterator( 'table', function ( settings ) {
			// Save an empty object
			settings.fnStateSaveCallback.call( settings.oInstance, settings, {} );
		} );
	} );
	
	
	_api_register( 'state.loaded()', function () {
		return this.context.length ?
			this.context[0].oLoadedState :
			null;
	} );
	
	
	_api_register( 'state.save()', function () {
		return this.iterator( 'table', function ( settings ) {
			_fnSaveState( settings );
		} );
	} );
	
	
	
	/**
	 * Provide a common method for plug-ins to check the version of DataTables being
	 * used, in order to ensure compatibility.
	 *
	 *  @param {string} version Version string to check for, in the format "X.Y.Z".
	 *    Note that the formats "X" and "X.Y" are also acceptable.
	 *  @returns {boolean} true if this version of DataTables is greater or equal to
	 *    the required version, or false if this version of DataTales is not
	 *    suitable
	 *  @static
	 *  @dtopt API-Static
	 *
	 *  @example
	 *    alert( $.fn.dataTable.versionCheck( '1.9.0' ) );
	 */
	DataTable.versionCheck = DataTable.fnVersionCheck = function( version )
	{
		var aThis = DataTable.version.split('.');
		var aThat = version.split('.');
		var iThis, iThat;
	
		for ( var i=0, iLen=aThat.length ; i<iLen ; i++ ) {
			iThis = parseInt( aThis[i], 10 ) || 0;
			iThat = parseInt( aThat[i], 10 ) || 0;
	
			// Parts are the same, keep comparing
			if (iThis === iThat) {
				continue;
			}
	
			// Parts are different, return immediately
			return iThis > iThat;
		}
	
		return true;
	};
	
	
	/**
	 * Check if a `<table>` node is a DataTable table already or not.
	 *
	 *  @param {node|jquery|string} table Table node, jQuery object or jQuery
	 *      selector for the table to test. Note that if more than more than one
	 *      table is passed on, only the first will be checked
	 *  @returns {boolean} true the table given is a DataTable, or false otherwise
	 *  @static
	 *  @dtopt API-Static
	 *
	 *  @example
	 *    if ( ! $.fn.DataTable.isDataTable( '#example' ) ) {
	 *      $('#example').dataTable();
	 *    }
	 */
	DataTable.isDataTable = DataTable.fnIsDataTable = function ( table )
	{
		var t = $(table).get(0);
		var is = false;
	
		if ( table instanceof DataTable.Api ) {
			return true;
		}
	
		$.each( DataTable.settings, function (i, o) {
			var head = o.nScrollHead ? $('table', o.nScrollHead)[0] : null;
			var foot = o.nScrollFoot ? $('table', o.nScrollFoot)[0] : null;
	
			if ( o.nTable === t || head === t || foot === t ) {
				is = true;
			}
		} );
	
		return is;
	};
	
	
	/**
	 * Get all DataTable tables that have been initialised - optionally you can
	 * select to get only currently visible tables.
	 *
	 *  @param {boolean} [visible=false] Flag to indicate if you want all (default)
	 *    or visible tables only.
	 *  @returns {array} Array of `table` nodes (not DataTable instances) which are
	 *    DataTables
	 *  @static
	 *  @dtopt API-Static
	 *
	 *  @example
	 *    $.each( $.fn.dataTable.tables(true), function () {
	 *      $(table).DataTable().columns.adjust();
	 *    } );
	 */
	DataTable.tables = DataTable.fnTables = function ( visible )
	{
		var api = false;
	
		if ( $.isPlainObject( visible ) ) {
			api = visible.api;
			visible = visible.visible;
		}
	
		var a = $.map( DataTable.settings, function (o) {
			if ( !visible || (visible && $(o.nTable).is(':visible')) ) {
				return o.nTable;
			}
		} );
	
		return api ?
			new _Api( a ) :
			a;
	};
	
	
	/**
	 * Convert from camel case parameters to Hungarian notation. This is made public
	 * for the extensions to provide the same ability as DataTables core to accept
	 * either the 1.9 style Hungarian notation, or the 1.10+ style camelCase
	 * parameters.
	 *
	 *  @param {object} src The model object which holds all parameters that can be
	 *    mapped.
	 *  @param {object} user The object to convert from camel case to Hungarian.
	 *  @param {boolean} force When set to `true`, properties which already have a
	 *    Hungarian value in the `user` object will be overwritten. Otherwise they
	 *    won't be.
	 */
	DataTable.camelToHungarian = _fnCamelToHungarian;
	
	
	
	/**
	 *
	 */
	_api_register( '$()', function ( selector, opts ) {
		var
			rows   = this.rows( opts ).nodes(), // Get all rows
			jqRows = $(rows);
	
		return $( [].concat(
			jqRows.filter( selector ).toArray(),
			jqRows.find( selector ).toArray()
		) );
	} );
	
	
	// jQuery functions to operate on the tables
	$.each( [ 'on', 'one', 'off' ], function (i, key) {
		_api_register( key+'()', function ( /* event, handler */ ) {
			var args = Array.prototype.slice.call(arguments);
	
			// Add the `dt` namespace automatically if it isn't already present
			args[0] = $.map( args[0].split( /\s/ ), function ( e ) {
				return ! e.match(/\.dt\b/) ?
					e+'.dt' :
					e;
				} ).join( ' ' );
	
			var inst = $( this.tables().nodes() );
			inst[key].apply( inst, args );
			return this;
		} );
	} );
	
	
	_api_register( 'clear()', function () {
		return this.iterator( 'table', function ( settings ) {
			_fnClearTable( settings );
		} );
	} );
	
	
	_api_register( 'settings()', function () {
		return new _Api( this.context, this.context );
	} );
	
	
	_api_register( 'init()', function () {
		var ctx = this.context;
		return ctx.length ? ctx[0].oInit : null;
	} );
	
	
	_api_register( 'data()', function () {
		return this.iterator( 'table', function ( settings ) {
			return _pluck( settings.aoData, '_aData' );
		} ).flatten();
	} );
	
	
	_api_register( 'destroy()', function ( remove ) {
		remove = remove || false;
	
		return this.iterator( 'table', function ( settings ) {
			var orig      = settings.nTableWrapper.parentNode;
			var classes   = settings.oClasses;
			var table     = settings.nTable;
			var tbody     = settings.nTBody;
			var thead     = settings.nTHead;
			var tfoot     = settings.nTFoot;
			var jqTable   = $(table);
			var jqTbody   = $(tbody);
			var jqWrapper = $(settings.nTableWrapper);
			var rows      = $.map( settings.aoData, function (r) { return r.nTr; } );
			var i, ien;
	
			// Flag to note that the table is currently being destroyed - no action
			// should be taken
			settings.bDestroying = true;
	
			// Fire off the destroy callbacks for plug-ins etc
			_fnCallbackFire( settings, "aoDestroyCallback", "destroy", [settings] );
	
			// If not being removed from the document, make all columns visible
			if ( ! remove ) {
				new _Api( settings ).columns().visible( true );
			}
	
			// Blitz all `DT` namespaced events (these are internal events, the
			// lowercase, `dt` events are user subscribed and they are responsible
			// for removing them
			jqWrapper.off('.DT').find(':not(tbody *)').off('.DT');
			$(window).off('.DT-'+settings.sInstance);
	
			// When scrolling we had to break the table up - restore it
			if ( table != thead.parentNode ) {
				jqTable.children('thead').detach();
				jqTable.append( thead );
			}
	
			if ( tfoot && table != tfoot.parentNode ) {
				jqTable.children('tfoot').detach();
				jqTable.append( tfoot );
			}
	
			settings.aaSorting = [];
			settings.aaSortingFixed = [];
			_fnSortingClasses( settings );
	
			$( rows ).removeClass( settings.asStripeClasses.join(' ') );
	
			$('th, td', thead).removeClass( classes.sSortable+' '+
				classes.sSortableAsc+' '+classes.sSortableDesc+' '+classes.sSortableNone
			);
	
			// Add the TR elements back into the table in their original order
			jqTbody.children().detach();
			jqTbody.append( rows );
	
			// Remove the DataTables generated nodes, events and classes
			var removedMethod = remove ? 'remove' : 'detach';
			jqTable[ removedMethod ]();
			jqWrapper[ removedMethod ]();
	
			// If we need to reattach the table to the document
			if ( ! remove && orig ) {
				// insertBefore acts like appendChild if !arg[1]
				orig.insertBefore( table, settings.nTableReinsertBefore );
	
				// Restore the width of the original table - was read from the style property,
				// so we can restore directly to that
				jqTable
					.css( 'width', settings.sDestroyWidth )
					.removeClass( classes.sTable );
	
				// If the were originally stripe classes - then we add them back here.
				// Note this is not fool proof (for example if not all rows had stripe
				// classes - but it's a good effort without getting carried away
				ien = settings.asDestroyStripes.length;
	
				if ( ien ) {
					jqTbody.children().each( function (i) {
						$(this).addClass( settings.asDestroyStripes[i % ien] );
					} );
				}
			}
	
			/* Remove the settings object from the settings array */
			var idx = $.inArray( settings, DataTable.settings );
			if ( idx !== -1 ) {
				DataTable.settings.splice( idx, 1 );
			}
		} );
	} );
	
	
	// Add the `every()` method for rows, columns and cells in a compact form
	$.each( [ 'column', 'row', 'cell' ], function ( i, type ) {
		_api_register( type+'s().every()', function ( fn ) {
			var opts = this.selector.opts;
			var api = this;
	
			return this.iterator( type, function ( settings, arg1, arg2, arg3, arg4 ) {
				// Rows and columns:
				//  arg1 - index
				//  arg2 - table counter
				//  arg3 - loop counter
				//  arg4 - undefined
				// Cells:
				//  arg1 - row index
				//  arg2 - column index
				//  arg3 - table counter
				//  arg4 - loop counter
				fn.call(
					api[ type ](
						arg1,
						type==='cell' ? arg2 : opts,
						type==='cell' ? opts : undefined
					),
					arg1, arg2, arg3, arg4
				);
			} );
		} );
	} );
	
	
	// i18n method for extensions to be able to use the language object from the
	// DataTable
	_api_register( 'i18n()', function ( token, def, plural ) {
		var ctx = this.context[0];
		var resolved = _fnGetObjectDataFn( token )( ctx.oLanguage );
	
		if ( resolved === undefined ) {
			resolved = def;
		}
	
		if ( plural !== undefined && $.isPlainObject( resolved ) ) {
			resolved = resolved[ plural ] !== undefined ?
				resolved[ plural ] :
				resolved._;
		}
	
		return resolved.replace( '%d', plural ); // nb: plural might be undefined,
	} );

	/**
	 * Version string for plug-ins to check compatibility. Allowed format is
	 * `a.b.c-d` where: a:int, b:int, c:int, d:string(dev|beta|alpha). `d` is used
	 * only for non-release builds. See http://semver.org/ for more information.
	 *  @member
	 *  @type string
	 *  @default Version number
	 */
	DataTable.version = "1.10.18";

	/**
	 * Private data store, containing all of the settings objects that are
	 * created for the tables on a given page.
	 *
	 * Note that the `DataTable.settings` object is aliased to
	 * `jQuery.fn.dataTableExt` through which it may be accessed and
	 * manipulated, or `jQuery.fn.dataTable.settings`.
	 *  @member
	 *  @type array
	 *  @default []
	 *  @private
	 */
	DataTable.settings = [];

	/**
	 * Object models container, for the various models that DataTables has
	 * available to it. These models define the objects that are used to hold
	 * the active state and configuration of the table.
	 *  @namespace
	 */
	DataTable.models = {};
	
	
	
	/**
	 * Template object for the way in which DataTables holds information about
	 * search information for the global filter and individual column filters.
	 *  @namespace
	 */
	DataTable.models.oSearch = {
		/**
		 * Flag to indicate if the filtering should be case insensitive or not
		 *  @type boolean
		 *  @default true
		 */
		"bCaseInsensitive": true,
	
		/**
		 * Applied search term
		 *  @type string
		 *  @default <i>Empty string</i>
		 */
		"sSearch": "",
	
		/**
		 * Flag to indicate if the search term should be interpreted as a
		 * regular expression (true) or not (false) and therefore and special
		 * regex characters escaped.
		 *  @type boolean
		 *  @default false
		 */
		"bRegex": false,
	
		/**
		 * Flag to indicate if DataTables is to use its smart filtering or not.
		 *  @type boolean
		 *  @default true
		 */
		"bSmart": true
	};
	
	
	
	
	/**
	 * Template object for the way in which DataTables holds information about
	 * each individual row. This is the object format used for the settings
	 * aoData array.
	 *  @namespace
	 */
	DataTable.models.oRow = {
		/**
		 * TR element for the row
		 *  @type node
		 *  @default null
		 */
		"nTr": null,
	
		/**
		 * Array of TD elements for each row. This is null until the row has been
		 * created.
		 *  @type array nodes
		 *  @default []
		 */
		"anCells": null,
	
		/**
		 * Data object from the original data source for the row. This is either
		 * an array if using the traditional form of DataTables, or an object if
		 * using mData options. The exact type will depend on the passed in
		 * data from the data source, or will be an array if using DOM a data
		 * source.
		 *  @type array|object
		 *  @default []
		 */
		"_aData": [],
	
		/**
		 * Sorting data cache - this array is ostensibly the same length as the
		 * number of columns (although each index is generated only as it is
		 * needed), and holds the data that is used for sorting each column in the
		 * row. We do this cache generation at the start of the sort in order that
		 * the formatting of the sort data need be done only once for each cell
		 * per sort. This array should not be read from or written to by anything
		 * other than the master sorting methods.
		 *  @type array
		 *  @default null
		 *  @private
		 */
		"_aSortData": null,
	
		/**
		 * Per cell filtering data cache. As per the sort data cache, used to
		 * increase the performance of the filtering in DataTables
		 *  @type array
		 *  @default null
		 *  @private
		 */
		"_aFilterData": null,
	
		/**
		 * Filtering data cache. This is the same as the cell filtering cache, but
		 * in this case a string rather than an array. This is easily computed with
		 * a join on `_aFilterData`, but is provided as a cache so the join isn't
		 * needed on every search (memory traded for performance)
		 *  @type array
		 *  @default null
		 *  @private
		 */
		"_sFilterRow": null,
	
		/**
		 * Cache of the class name that DataTables has applied to the row, so we
		 * can quickly look at this variable rather than needing to do a DOM check
		 * on className for the nTr property.
		 *  @type string
		 *  @default <i>Empty string</i>
		 *  @private
		 */
		"_sRowStripe": "",
	
		/**
		 * Denote if the original data source was from the DOM, or the data source
		 * object. This is used for invalidating data, so DataTables can
		 * automatically read data from the original source, unless uninstructed
		 * otherwise.
		 *  @type string
		 *  @default null
		 *  @private
		 */
		"src": null,
	
		/**
		 * Index in the aoData array. This saves an indexOf lookup when we have the
		 * object, but want to know the index
		 *  @type integer
		 *  @default -1
		 *  @private
		 */
		"idx": -1
	};
	
	
	/**
	 * Template object for the column information object in DataTables. This object
	 * is held in the settings aoColumns array and contains all the information that
	 * DataTables needs about each individual column.
	 *
	 * Note that this object is related to {@link DataTable.defaults.column}
	 * but this one is the internal data store for DataTables's cache of columns.
	 * It should NOT be manipulated outside of DataTables. Any configuration should
	 * be done through the initialisation options.
	 *  @namespace
	 */
	DataTable.models.oColumn = {
		/**
		 * Column index. This could be worked out on-the-fly with $.inArray, but it
		 * is faster to just hold it as a variable
		 *  @type integer
		 *  @default null
		 */
		"idx": null,
	
		/**
		 * A list of the columns that sorting should occur on when this column
		 * is sorted. That this property is an array allows multi-column sorting
		 * to be defined for a column (for example first name / last name columns
		 * would benefit from this). The values are integers pointing to the
		 * columns to be sorted on (typically it will be a single integer pointing
		 * at itself, but that doesn't need to be the case).
		 *  @type array
		 */
		"aDataSort": null,
	
		/**
		 * Define the sorting directions that are applied to the column, in sequence
		 * as the column is repeatedly sorted upon - i.e. the first value is used
		 * as the sorting direction when the column if first sorted (clicked on).
		 * Sort it again (click again) and it will move on to the next index.
		 * Repeat until loop.
		 *  @type array
		 */
		"asSorting": null,
	
		/**
		 * Flag to indicate if the column is searchable, and thus should be included
		 * in the filtering or not.
		 *  @type boolean
		 */
		"bSearchable": null,
	
		/**
		 * Flag to indicate if the column is sortable or not.
		 *  @type boolean
		 */
		"bSortable": null,
	
		/**
		 * Flag to indicate if the column is currently visible in the table or not
		 *  @type boolean
		 */
		"bVisible": null,
	
		/**
		 * Store for manual type assignment using the `column.type` option. This
		 * is held in store so we can manipulate the column's `sType` property.
		 *  @type string
		 *  @default null
		 *  @private
		 */
		"_sManualType": null,
	
		/**
		 * Flag to indicate if HTML5 data attributes should be used as the data
		 * source for filtering or sorting. True is either are.
		 *  @type boolean
		 *  @default false
		 *  @private
		 */
		"_bAttrSrc": false,
	
		/**
		 * Developer definable function that is called whenever a cell is created (Ajax source,
		 * etc) or processed for input (DOM source). This can be used as a compliment to mRender
		 * allowing you to modify the DOM element (add background colour for example) when the
		 * element is available.
		 *  @type function
		 *  @param {element} nTd The TD node that has been created
		 *  @param {*} sData The Data for the cell
		 *  @param {array|object} oData The data for the whole row
		 *  @param {int} iRow The row index for the aoData data store
		 *  @default null
		 */
		"fnCreatedCell": null,
	
		/**
		 * Function to get data from a cell in a column. You should <b>never</b>
		 * access data directly through _aData internally in DataTables - always use
		 * the method attached to this property. It allows mData to function as
		 * required. This function is automatically assigned by the column
		 * initialisation method
		 *  @type function
		 *  @param {array|object} oData The data array/object for the array
		 *    (i.e. aoData[]._aData)
		 *  @param {string} sSpecific The specific data type you want to get -
		 *    'display', 'type' 'filter' 'sort'
		 *  @returns {*} The data for the cell from the given row's data
		 *  @default null
		 */
		"fnGetData": null,
	
		/**
		 * Function to set data for a cell in the column. You should <b>never</b>
		 * set the data directly to _aData internally in DataTables - always use
		 * this method. It allows mData to function as required. This function
		 * is automatically assigned by the column initialisation method
		 *  @type function
		 *  @param {array|object} oData The data array/object for the array
		 *    (i.e. aoData[]._aData)
		 *  @param {*} sValue Value to set
		 *  @default null
		 */
		"fnSetData": null,
	
		/**
		 * Property to read the value for the cells in the column from the data
		 * source array / object. If null, then the default content is used, if a
		 * function is given then the return from the function is used.
		 *  @type function|int|string|null
		 *  @default null
		 */
		"mData": null,
	
		/**
		 * Partner property to mData which is used (only when defined) to get
		 * the data - i.e. it is basically the same as mData, but without the
		 * 'set' option, and also the data fed to it is the result from mData.
		 * This is the rendering method to match the data method of mData.
		 *  @type function|int|string|null
		 *  @default null
		 */
		"mRender": null,
	
		/**
		 * Unique header TH/TD element for this column - this is what the sorting
		 * listener is attached to (if sorting is enabled.)
		 *  @type node
		 *  @default null
		 */
		"nTh": null,
	
		/**
		 * Unique footer TH/TD element for this column (if there is one). Not used
		 * in DataTables as such, but can be used for plug-ins to reference the
		 * footer for each column.
		 *  @type node
		 *  @default null
		 */
		"nTf": null,
	
		/**
		 * The class to apply to all TD elements in the table's TBODY for the column
		 *  @type string
		 *  @default null
		 */
		"sClass": null,
	
		/**
		 * When DataTables calculates the column widths to assign to each column,
		 * it finds the longest string in each column and then constructs a
		 * temporary table and reads the widths from that. The problem with this
		 * is that "mmm" is much wider then "iiii", but the latter is a longer
		 * string - thus the calculation can go wrong (doing it properly and putting
		 * it into an DOM object and measuring that is horribly(!) slow). Thus as
		 * a "work around" we provide this option. It will append its value to the
		 * text that is found to be the longest string for the column - i.e. padding.
		 *  @type string
		 */
		"sContentPadding": null,
	
		/**
		 * Allows a default value to be given for a column's data, and will be used
		 * whenever a null data source is encountered (this can be because mData
		 * is set to null, or because the data source itself is null).
		 *  @type string
		 *  @default null
		 */
		"sDefaultContent": null,
	
		/**
		 * Name for the column, allowing reference to the column by name as well as
		 * by index (needs a lookup to work by name).
		 *  @type string
		 */
		"sName": null,
	
		/**
		 * Custom sorting data type - defines which of the available plug-ins in
		 * afnSortData the custom sorting will use - if any is defined.
		 *  @type string
		 *  @default std
		 */
		"sSortDataType": 'std',
	
		/**
		 * Class to be applied to the header element when sorting on this column
		 *  @type string
		 *  @default null
		 */
		"sSortingClass": null,
	
		/**
		 * Class to be applied to the header element when sorting on this column -
		 * when jQuery UI theming is used.
		 *  @type string
		 *  @default null
		 */
		"sSortingClassJUI": null,
	
		/**
		 * Title of the column - what is seen in the TH element (nTh).
		 *  @type string
		 */
		"sTitle": null,
	
		/**
		 * Column sorting and filtering type
		 *  @type string
		 *  @default null
		 */
		"sType": null,
	
		/**
		 * Width of the column
		 *  @type string
		 *  @default null
		 */
		"sWidth": null,
	
		/**
		 * Width of the column when it was first "encountered"
		 *  @type string
		 *  @default null
		 */
		"sWidthOrig": null
	};
	
	
	/*
	 * Developer note: The properties of the object below are given in Hungarian
	 * notation, that was used as the interface for DataTables prior to v1.10, however
	 * from v1.10 onwards the primary interface is camel case. In order to avoid
	 * breaking backwards compatibility utterly with this change, the Hungarian
	 * version is still, internally the primary interface, but is is not documented
	 * - hence the @name tags in each doc comment. This allows a Javascript function
	 * to create a map from Hungarian notation to camel case (going the other direction
	 * would require each property to be listed, which would at around 3K to the size
	 * of DataTables, while this method is about a 0.5K hit.
	 *
	 * Ultimately this does pave the way for Hungarian notation to be dropped
	 * completely, but that is a massive amount of work and will break current
	 * installs (therefore is on-hold until v2).
	 */
	
	/**
	 * Initialisation options that can be given to DataTables at initialisation
	 * time.
	 *  @namespace
	 */
	DataTable.defaults = {
		/**
		 * An array of data to use for the table, passed in at initialisation which
		 * will be used in preference to any data which is already in the DOM. This is
		 * particularly useful for constructing tables purely in Javascript, for
		 * example with a custom Ajax call.
		 *  @type array
		 *  @default null
		 *
		 *  @dtopt Option
		 *  @name DataTable.defaults.data
		 *
		 *  @example
		 *    // Using a 2D array data source
		 *    $(document).ready( function () {
		 *      $('#example').dataTable( {
		 *        "data": [
		 *          ['Trident', 'Internet Explorer 4.0', 'Win 95+', 4, 'X'],
		 *          ['Trident', 'Internet Explorer 5.0', 'Win 95+', 5, 'C'],
		 *        ],
		 *        "columns": [
		 *          { "title": "Engine" },
		 *          { "title": "Browser" },
		 *          { "title": "Platform" },
		 *          { "title": "Version" },
		 *          { "title": "Grade" }
		 *        ]
		 *      } );
		 *    } );
		 *
		 *  @example
		 *    // Using an array of objects as a data source (`data`)
		 *    $(document).ready( function () {
		 *      $('#example').dataTable( {
		 *        "data": [
		 *          {
		 *            "engine":   "Trident",
		 *            "browser":  "Internet Explorer 4.0",
		 *            "platform": "Win 95+",
		 *            "version":  4,
		 *            "grade":    "X"
		 *          },
		 *          {
		 *            "engine":   "Trident",
		 *            "browser":  "Internet Explorer 5.0",
		 *            "platform": "Win 95+",
		 *            "version":  5,
		 *            "grade":    "C"
		 *          }
		 *        ],
		 *        "columns": [
		 *          { "title": "Engine",   "data": "engine" },
		 *          { "title": "Browser",  "data": "browser" },
		 *          { "title": "Platform", "data": "platform" },
		 *          { "title": "Version",  "data": "version" },
		 *          { "title": "Grade",    "data": "grade" }
		 *        ]
		 *      } );
		 *    } );
		 */
		"aaData": null,
	
	
		/**
		 * If ordering is enabled, then DataTables will perform a first pass sort on
		 * initialisation. You can define which column(s) the sort is performed
		 * upon, and the sorting direction, with this variable. The `sorting` array
		 * should contain an array for each column to be sorted initially containing
		 * the column's index and a direction string ('asc' or 'desc').
		 *  @type array
		 *  @default [[0,'asc']]
		 *
		 *  @dtopt Option
		 *  @name DataTable.defaults.order
		 *
		 *  @example
		 *    // Sort by 3rd column first, and then 4th column
		 *    $(document).ready( function() {
		 *      $('#example').dataTable( {
		 *        "order": [[2,'asc'], [3,'desc']]
		 *      } );
		 *    } );
		 *
		 *    // No initial sorting
		 *    $(document).ready( function() {
		 *      $('#example').dataTable( {
		 *        "order": []
		 *      } );
		 *    } );
		 */
		"aaSorting": [[0,'asc']],
	
	
		/**
		 * This parameter is basically identical to the `sorting` parameter, but
		 * cannot be overridden by user interaction with the table. What this means
		 * is that you could have a column (visible or hidden) which the sorting
		 * will always be forced on first - any sorting after that (from the user)
		 * will then be performed as required. This can be useful for grouping rows
		 * together.
		 *  @type array
		 *  @default null
		 *
		 *  @dtopt Option
		 *  @name DataTable.defaults.orderFixed
		 *
		 *  @example
		 *    $(document).ready( function() {
		 *      $('#example').dataTable( {
		 *        "orderFixed": [[0,'asc']]
		 *      } );
		 *    } )
		 */
		"aaSortingFixed": [],
	
	
		/**
		 * DataTables can be instructed to load data to display in the table from a
		 * Ajax source. This option defines how that Ajax call is made and where to.
		 *
		 * The `ajax` property has three different modes of operation, depending on
		 * how it is defined. These are:
		 *
		 * * `string` - Set the URL from where the data should be loaded from.
		 * * `object` - Define properties for `jQuery.ajax`.
		 * * `function` - Custom data get function
		 *
		 * `string`
		 * --------
		 *
		 * As a string, the `ajax` property simply defines the URL from which
		 * DataTables will load data.
		 *
		 * `object`
		 * --------
		 *
		 * As an object, the parameters in the object are passed to
		 * [jQuery.ajax](http://api.jquery.com/jQuery.ajax/) allowing fine control
		 * of the Ajax request. DataTables has a number of default parameters which
		 * you can override using this option. Please refer to the jQuery
		 * documentation for a full description of the options available, although
		 * the following parameters provide additional options in DataTables or
		 * require special consideration:
		 *
		 * * `data` - As with jQuery, `data` can be provided as an object, but it
		 *   can also be used as a function to manipulate the data DataTables sends
		 *   to the server. The function takes a single parameter, an object of
		 *   parameters with the values that DataTables has readied for sending. An
		 *   object may be returned which will be merged into the DataTables
		 *   defaults, or you can add the items to the object that was passed in and
		 *   not return anything from the function. This supersedes `fnServerParams`
		 *   from DataTables 1.9-.
		 *
		 * * `dataSrc` - By default DataTables will look for the property `data` (or
		 *   `aaData` for compatibility with DataTables 1.9-) when obtaining data
		 *   from an Ajax source or for server-side processing - this parameter
		 *   allows that property to be changed. You can use Javascript dotted
		 *   object notation to get a data source for multiple levels of nesting, or
		 *   it my be used as a function. As a function it takes a single parameter,
		 *   the JSON returned from the server, which can be manipulated as
		 *   required, with the returned value being that used by DataTables as the
		 *   data source for the table. This supersedes `sAjaxDataProp` from
		 *   DataTables 1.9-.
		 *
		 * * `success` - Should not be overridden it is used internally in
		 *   DataTables. To manipulate / transform the data returned by the server
		 *   use `ajax.dataSrc`, or use `ajax` as a function (see below).
		 *
		 * `function`
		 * ----------
		 *
		 * As a function, making the Ajax call is left up to yourself allowing
		 * complete control of the Ajax request. Indeed, if desired, a method other
		 * than Ajax could be used to obtain the required data, such as Web storage
		 * or an AIR database.
		 *
		 * The function is given four parameters and no return is required. The
		 * parameters are:
		 *
		 * 1. _object_ - Data to send to the server
		 * 2. _function_ - Callback function that must be executed when the required
		 *    data has been obtained. That data should be passed into the callback
		 *    as the only parameter
		 * 3. _object_ - DataTables settings object for the table
		 *
		 * Note that this supersedes `fnServerData` from DataTables 1.9-.
		 *
		 *  @type string|object|function
		 *  @default null
		 *
		 *  @dtopt Option
		 *  @name DataTable.defaults.ajax
		 *  @since 1.10.0
		 *
		 * @example
		 *   // Get JSON data from a file via Ajax.
		 *   // Note DataTables expects data in the form `{ data: [ ...data... ] }` by default).
		 *   $('#example').dataTable( {
		 *     "ajax": "data.json"
		 *   } );
		 *
		 * @example
		 *   // Get JSON data from a file via Ajax, using `dataSrc` to change
		 *   // `data` to `tableData` (i.e. `{ tableData: [ ...data... ] }`)
		 *   $('#example').dataTable( {
		 *     "ajax": {
		 *       "url": "data.json",
		 *       "dataSrc": "tableData"
		 *     }
		 *   } );
		 *
		 * @example
		 *   // Get JSON data from a file via Ajax, using `dataSrc` to read data
		 *   // from a plain array rather than an array in an object
		 *   $('#example').dataTable( {
		 *     "ajax": {
		 *       "url": "data.json",
		 *       "dataSrc": ""
		 *     }
		 *   } );
		 *
		 * @example
		 *   // Manipulate the data returned from the server - add a link to data
		 *   // (note this can, should, be done using `render` for the column - this
		 *   // is just a simple example of how the data can be manipulated).
		 *   $('#example').dataTable( {
		 *     "ajax": {
		 *       "url": "data.json",
		 *       "dataSrc": function ( json ) {
		 *         for ( var i=0, ien=json.length ; i<ien ; i++ ) {
		 *           json[i][0] = '<a href="/message/'+json[i][0]+'>View message</a>';
		 *         }
		 *         return json;
		 *       }
		 *     }
		 *   } );
		 *
		 * @example
		 *   // Add data to the request
		 *   $('#example').dataTable( {
		 *     "ajax": {
		 *       "url": "data.json",
		 *       "data": function ( d ) {
		 *         return {
		 *           "extra_search": $('#extra').val()
		 *         };
		 *       }
		 *     }
		 *   } );
		 *
		 * @example
		 *   // Send request as POST
		 *   $('#example').dataTable( {
		 *     "ajax": {
		 *       "url": "data.json",
		 *       "type": "POST"
		 *     }
		 *   } );
		 *
		 * @example
		 *   // Get the data from localStorage (could interface with a form for
		 *   // adding, editing and removing rows).
		 *   $('#example').dataTable( {
		 *     "ajax": function (data, callback, settings) {
		 *       callback(
		 *         JSON.parse( localStorage.getItem('dataTablesData') )
		 *       );
		 *     }
		 *   } );
		 */
		"ajax": null,
	
	
		/**
		 * This parameter allows you to readily specify the entries in the length drop
		 * down menu that DataTables shows when pagination is enabled. It can be
		 * either a 1D array of options which will be used for both the displayed
		 * option and the value, or a 2D array which will use the array in the first
		 * position as the value, and the array in the second position as the
		 * displayed options (useful for language strings such as 'All').
		 *
		 * Note that the `pageLength` property will be automatically set to the
		 * first value given in this array, unless `pageLength` is also provided.
		 *  @type array
		 *  @default [ 10, 25, 50, 100 ]
		 *
		 *  @dtopt Option
		 *  @name DataTable.defaults.lengthMenu
		 *
		 *  @example
		 *    $(document).ready( function() {
		 *      $('#example').dataTable( {
		 *        "lengthMenu": [[10, 25, 50, -1], [10, 25, 50, "All"]]
		 *      } );
		 *    } );
		 */
		"aLengthMenu": [ 10, 25, 50, 100 ],
	
	
		/**
		 * The `columns` option in the initialisation parameter allows you to define
		 * details about the way individual columns behave. For a full list of
		 * column options that can be set, please see
		 * {@link DataTable.defaults.column}. Note that if you use `columns` to
		 * define your columns, you must have an entry in the array for every single
		 * column that you have in your table (these can be null if you don't which
		 * to specify any options).
		 *  @member
		 *
		 *  @name DataTable.defaults.column
		 */
		"aoColumns": null,
	
		/**
		 * Very similar to `columns`, `columnDefs` allows you to target a specific
		 * column, multiple columns, or all columns, using the `targets` property of
		 * each object in the array. This allows great flexibility when creating
		 * tables, as the `columnDefs` arrays can be of any length, targeting the
		 * columns you specifically want. `columnDefs` may use any of the column
		 * options available: {@link DataTable.defaults.column}, but it _must_
		 * have `targets` defined in each object in the array. Values in the `targets`
		 * array may be:
		 *   <ul>
		 *     <li>a string - class name will be matched on the TH for the column</li>
		 *     <li>0 or a positive integer - column index counting from the left</li>
		 *     <li>a negative integer - column index counting from the right</li>
		 *     <li>the string "_all" - all columns (i.e. assign a default)</li>
		 *   </ul>
		 *  @member
		 *
		 *  @name DataTable.defaults.columnDefs
		 */
		"aoColumnDefs": null,
	
	
		/**
		 * Basically the same as `search`, this parameter defines the individual column
		 * filtering state at initialisation time. The array must be of the same size
		 * as the number of columns, and each element be an object with the parameters
		 * `search` and `escapeRegex` (the latter is optional). 'null' is also
		 * accepted and the default will be used.
		 *  @type array
		 *  @default []
		 *
		 *  @dtopt Option
		 *  @name DataTable.defaults.searchCols
		 *
		 *  @example
		 *    $(document).ready( function() {
		 *      $('#example').dataTable( {
		 *        "searchCols": [
		 *          null,
		 *          { "search": "My filter" },
		 *          null,
		 *          { "search": "^[0-9]", "escapeRegex": false }
		 *        ]
		 *      } );
		 *    } )
		 */
		"aoSearchCols": [],
	
	
		/**
		 * An array of CSS classes that should be applied to displayed rows. This
		 * array may be of any length, and DataTables will apply each class
		 * sequentially, looping when required.
		 *  @type array
		 *  @default null <i>Will take the values determined by the `oClasses.stripe*`
		 *    options</i>
		 *
		 *  @dtopt Option
		 *  @name DataTable.defaults.stripeClasses
		 *
		 *  @example
		 *    $(document).ready( function() {
		 *      $('#example').dataTable( {
		 *        "stripeClasses": [ 'strip1', 'strip2', 'strip3' ]
		 *      } );
		 *    } )
		 */
		"asStripeClasses": null,
	
	
		/**
		 * Enable or disable automatic column width calculation. This can be disabled
		 * as an optimisation (it takes some time to calculate the widths) if the
		 * tables widths are passed in using `columns`.
		 *  @type boolean
		 *  @default true
		 *
		 *  @dtopt Features
		 *  @name DataTable.defaults.autoWidth
		 *
		 *  @example
		 *    $(document).ready( function () {
		 *      $('#example').dataTable( {
		 *        "autoWidth": false
		 *      } );
		 *    } );
		 */
		"bAutoWidth": true,
	
	
		/**
		 * Deferred rendering can provide DataTables with a huge speed boost when you
		 * are using an Ajax or JS data source for the table. This option, when set to
		 * true, will cause DataTables to defer the creation of the table elements for
		 * each row until they are needed for a draw - saving a significant amount of
		 * time.
		 *  @type boolean
		 *  @default false
		 *
		 *  @dtopt Features
		 *  @name DataTable.defaults.deferRender
		 *
		 *  @example
		 *    $(document).ready( function() {
		 *      $('#example').dataTable( {
		 *        "ajax": "sources/arrays.txt",
		 *        "deferRender": true
		 *      } );
		 *    } );
		 */
		"bDeferRender": false,
	
	
		/**
		 * Replace a DataTable which matches the given selector and replace it with
		 * one which has the properties of the new initialisation object passed. If no
		 * table matches the selector, then the new DataTable will be constructed as
		 * per normal.
		 *  @type boolean
		 *  @default false
		 *
		 *  @dtopt Options
		 *  @name DataTable.defaults.destroy
		 *
		 *  @example
		 *    $(document).ready( function() {
		 *      $('#example').dataTable( {
		 *        "srollY": "200px",
		 *        "paginate": false
		 *      } );
		 *
		 *      // Some time later....
		 *      $('#example').dataTable( {
		 *        "filter": false,
		 *        "destroy": true
		 *      } );
		 *    } );
		 */
		"bDestroy": false,
	
	
		/**
		 * Enable or disable filtering of data. Filtering in DataTables is "smart" in
		 * that it allows the end user to input multiple words (space separated) and
		 * will match a row containing those words, even if not in the order that was
		 * specified (this allow matching across multiple columns). Note that if you
		 * wish to use filtering in DataTables this must remain 'true' - to remove the
		 * default filtering input box and retain filtering abilities, please use
		 * {@link DataTable.defaults.dom}.
		 *  @type boolean
		 *  @default true
		 *
		 *  @dtopt Features
		 *  @name DataTable.defaults.searching
		 *
		 *  @example
		 *    $(document).ready( function () {
		 *      $('#example').dataTable( {
		 *        "searching": false
		 *      } );
		 *    } );
		 */
		"bFilter": true,
	
	
		/**
		 * Enable or disable the table information display. This shows information
		 * about the data that is currently visible on the page, including information
		 * about filtered data if that action is being performed.
		 *  @type boolean
		 *  @default true
		 *
		 *  @dtopt Features
		 *  @name DataTable.defaults.info
		 *
		 *  @example
		 *    $(document).ready( function () {
		 *      $('#example').dataTable( {
		 *        "info": false
		 *      } );
		 *    } );
		 */
		"bInfo": true,
	
	
		/**
		 * Allows the end user to select the size of a formatted page from a select
		 * menu (sizes are 10, 25, 50 and 100). Requires pagination (`paginate`).
		 *  @type boolean
		 *  @default true
		 *
		 *  @dtopt Features
		 *  @name DataTable.defaults.lengthChange
		 *
		 *  @example
		 *    $(document).ready( function () {
		 *      $('#example').dataTable( {
		 *        "lengthChange": false
		 *      } );
		 *    } );
		 */
		"bLengthChange": true,
	
	
		/**
		 * Enable or disable pagination.
		 *  @type boolean
		 *  @default true
		 *
		 *  @dtopt Features
		 *  @name DataTable.defaults.paging
		 *
		 *  @example
		 *    $(document).ready( function () {
		 *      $('#example').dataTable( {
		 *        "paging": false
		 *      } );
		 *    } );
		 */
		"bPaginate": true,
	
	
		/**
		 * Enable or disable the display of a 'processing' indicator when the table is
		 * being processed (e.g. a sort). This is particularly useful for tables with
		 * large amounts of data where it can take a noticeable amount of time to sort
		 * the entries.
		 *  @type boolean
		 *  @default false
		 *
		 *  @dtopt Features
		 *  @name DataTable.defaults.processing
		 *
		 *  @example
		 *    $(document).ready( function () {
		 *      $('#example').dataTable( {
		 *        "processing": true
		 *      } );
		 *    } );
		 */
		"bProcessing": false,
	
	
		/**
		 * Retrieve the DataTables object for the given selector. Note that if the
		 * table has already been initialised, this parameter will cause DataTables
		 * to simply return the object that has already been set up - it will not take
		 * account of any changes you might have made to the initialisation object
		 * passed to DataTables (setting this parameter to true is an acknowledgement
		 * that you understand this). `destroy` can be used to reinitialise a table if
		 * you need.
		 *  @type boolean
		 *  @default false
		 *
		 *  @dtopt Options
		 *  @name DataTable.defaults.retrieve
		 *
		 *  @example
		 *    $(document).ready( function() {
		 *      initTable();
		 *      tableActions();
		 *    } );
		 *
		 *    function initTable ()
		 *    {
		 *      return $('#example').dataTable( {
		 *        "scrollY": "200px",
		 *        "paginate": false,
		 *        "retrieve": true
		 *      } );
		 *    }
		 *
		 *    function tableActions ()
		 *    {
		 *      var table = initTable();
		 *      // perform API operations with oTable
		 *    }
		 */
		"bRetrieve": false,
	
	
		/**
		 * When vertical (y) scrolling is enabled, DataTables will force the height of
		 * the table's viewport to the given height at all times (useful for layout).
		 * However, this can look odd when filtering data down to a small data set,
		 * and the footer is left "floating" further down. This parameter (when
		 * enabled) will cause DataTables to collapse the table's viewport down when
		 * the result set will fit within the given Y height.
		 *  @type boolean
		 *  @default false
		 *
		 *  @dtopt Options
		 *  @name DataTable.defaults.scrollCollapse
		 *
		 *  @example
		 *    $(document).ready( function() {
		 *      $('#example').dataTable( {
		 *        "scrollY": "200",
		 *        "scrollCollapse": true
		 *      } );
		 *    } );
		 */
		"bScrollCollapse": false,
	
	
		/**
		 * Configure DataTables to use server-side processing. Note that the
		 * `ajax` parameter must also be given in order to give DataTables a
		 * source to obtain the required data for each draw.
		 *  @type boolean
		 *  @default false
		 *
		 *  @dtopt Features
		 *  @dtopt Server-side
		 *  @name DataTable.defaults.serverSide
		 *
		 *  @example
		 *    $(document).ready( function () {
		 *      $('#example').dataTable( {
		 *        "serverSide": true,
		 *        "ajax": "xhr.php"
		 *      } );
		 *    } );
		 */
		"bServerSide": false,
	
	
		/**
		 * Enable or disable sorting of columns. Sorting of individual columns can be
		 * disabled by the `sortable` option for each column.
		 *  @type boolean
		 *  @default true
		 *
		 *  @dtopt Features
		 *  @name DataTable.defaults.ordering
		 *
		 *  @example
		 *    $(document).ready( function () {
		 *      $('#example').dataTable( {
		 *        "ordering": false
		 *      } );
		 *    } );
		 */
		"bSort": true,
	
	
		/**
		 * Enable or display DataTables' ability to sort multiple columns at the
		 * same time (activated by shift-click by the user).
		 *  @type boolean
		 *  @default true
		 *
		 *  @dtopt Options
		 *  @name DataTable.defaults.orderMulti
		 *
		 *  @example
		 *    // Disable multiple column sorting ability
		 *    $(document).ready( function () {
		 *      $('#example').dataTable( {
		 *        "orderMulti": false
		 *      } );
		 *    } );
		 */
		"bSortMulti": true,
	
	
		/**
		 * Allows control over whether DataTables should use the top (true) unique
		 * cell that is found for a single column, or the bottom (false - default).
		 * This is useful when using complex headers.
		 *  @type boolean
		 *  @default false
		 *
		 *  @dtopt Options
		 *  @name DataTable.defaults.orderCellsTop
		 *
		 *  @example
		 *    $(document).ready( function() {
		 *      $('#example').dataTable( {
		 *        "orderCellsTop": true
		 *      } );
		 *    } );
		 */
		"bSortCellsTop": false,
	
	
		/**
		 * Enable or disable the addition of the classes `sorting\_1`, `sorting\_2` and
		 * `sorting\_3` to the columns which are currently being sorted on. This is
		 * presented as a feature switch as it can increase processing time (while
		 * classes are removed and added) so for large data sets you might want to
		 * turn this off.
		 *  @type boolean
		 *  @default true
		 *
		 *  @dtopt Features
		 *  @name DataTable.defaults.orderClasses
		 *
		 *  @example
		 *    $(document).ready( function () {
		 *      $('#example').dataTable( {
		 *        "orderClasses": false
		 *      } );
		 *    } );
		 */
		"bSortClasses": true,
	
	
		/**
		 * Enable or disable state saving. When enabled HTML5 `localStorage` will be
		 * used to save table display information such as pagination information,
		 * display length, filtering and sorting. As such when the end user reloads
		 * the page the display display will match what thy had previously set up.
		 *
		 * Due to the use of `localStorage` the default state saving is not supported
		 * in IE6 or 7. If state saving is required in those browsers, use
		 * `stateSaveCallback` to provide a storage solution such as cookies.
		 *  @type boolean
		 *  @default false
		 *
		 *  @dtopt Features
		 *  @name DataTable.defaults.stateSave
		 *
		 *  @example
		 *    $(document).ready( function () {
		 *      $('#example').dataTable( {
		 *        "stateSave": true
		 *      } );
		 *    } );
		 */
		"bStateSave": false,
	
	
		/**
		 * This function is called when a TR element is created (and all TD child
		 * elements have been inserted), or registered if using a DOM source, allowing
		 * manipulation of the TR element (adding classes etc).
		 *  @type function
		 *  @param {node} row "TR" element for the current row
		 *  @param {array} data Raw data array for this row
		 *  @param {int} dataIndex The index of this row in the internal aoData array
		 *
		 *  @dtopt Callbacks
		 *  @name DataTable.defaults.createdRow
		 *
		 *  @example
		 *    $(document).ready( function() {
		 *      $('#example').dataTable( {
		 *        "createdRow": function( row, data, dataIndex ) {
		 *          // Bold the grade for all 'A' grade browsers
		 *          if ( data[4] == "A" )
		 *          {
		 *            $('td:eq(4)', row).html( '<b>A</b>' );
		 *          }
		 *        }
		 *      } );
		 *    } );
		 */
		"fnCreatedRow": null,
	
	
		/**
		 * This function is called on every 'draw' event, and allows you to
		 * dynamically modify any aspect you want about the created DOM.
		 *  @type function
		 *  @param {object} settings DataTables settings object
		 *
		 *  @dtopt Callbacks
		 *  @name DataTable.defaults.drawCallback
		 *
		 *  @example
		 *    $(document).ready( function() {
		 *      $('#example').dataTable( {
		 *        "drawCallback": function( settings ) {
		 *          alert( 'DataTables has redrawn the table' );
		 *        }
		 *      } );
		 *    } );
		 */
		"fnDrawCallback": null,
	
	
		/**
		 * Identical to fnHeaderCallback() but for the table footer this function
		 * allows you to modify the table footer on every 'draw' event.
		 *  @type function
		 *  @param {node} foot "TR" element for the footer
		 *  @param {array} data Full table data (as derived from the original HTML)
		 *  @param {int} start Index for the current display starting point in the
		 *    display array
		 *  @param {int} end Index for the current display ending point in the
		 *    display array
		 *  @param {array int} display Index array to translate the visual position
		 *    to the full data array
		 *
		 *  @dtopt Callbacks
		 *  @name DataTable.defaults.footerCallback
		 *
		 *  @example
		 *    $(document).ready( function() {
		 *      $('#example').dataTable( {
		 *        "footerCallback": function( tfoot, data, start, end, display ) {
		 *          tfoot.getElementsByTagName('th')[0].innerHTML = "Starting index is "+start;
		 *        }
		 *      } );
		 *    } )
		 */
		"fnFooterCallback": null,
	
	
		/**
		 * When rendering large numbers in the information element for the table
		 * (i.e. "Showing 1 to 10 of 57 entries") DataTables will render large numbers
		 * to have a comma separator for the 'thousands' units (e.g. 1 million is
		 * rendered as "1,000,000") to help readability for the end user. This
		 * function will override the default method DataTables uses.
		 *  @type function
		 *  @member
		 *  @param {int} toFormat number to be formatted
		 *  @returns {string} formatted string for DataTables to show the number
		 *
		 *  @dtopt Callbacks
		 *  @name DataTable.defaults.formatNumber
		 *
		 *  @example
		 *    // Format a number using a single quote for the separator (note that
		 *    // this can also be done with the language.thousands option)
		 *    $(document).ready( function() {
		 *      $('#example').dataTable( {
		 *        "formatNumber": function ( toFormat ) {
		 *          return toFormat.toString().replace(
		 *            /\B(?=(\d{3})+(?!\d))/g, "'"
		 *          );
		 *        };
		 *      } );
		 *    } );
		 */
		"fnFormatNumber": function ( toFormat ) {
			return toFormat.toString().replace(
				/\B(?=(\d{3})+(?!\d))/g,
				this.oLanguage.sThousands
			);
		},
	
	
		/**
		 * This function is called on every 'draw' event, and allows you to
		 * dynamically modify the header row. This can be used to calculate and
		 * display useful information about the table.
		 *  @type function
		 *  @param {node} head "TR" element for the header
		 *  @param {array} data Full table data (as derived from the original HTML)
		 *  @param {int} start Index for the current display starting point in the
		 *    display array
		 *  @param {int} end Index for the current display ending point in the
		 *    display array
		 *  @param {array int} display Index array to translate the visual position
		 *    to the full data array
		 *
		 *  @dtopt Callbacks
		 *  @name DataTable.defaults.headerCallback
		 *
		 *  @example
		 *    $(document).ready( function() {
		 *      $('#example').dataTable( {
		 *        "fheaderCallback": function( head, data, start, end, display ) {
		 *          head.getElementsByTagName('th')[0].innerHTML = "Displaying "+(end-start)+" records";
		 *        }
		 *      } );
		 *    } )
		 */
		"fnHeaderCallback": null,
	
	
		/**
		 * The information element can be used to convey information about the current
		 * state of the table. Although the internationalisation options presented by
		 * DataTables are quite capable of dealing with most customisations, there may
		 * be times where you wish to customise the string further. This callback
		 * allows you to do exactly that.
		 *  @type function
		 *  @param {object} oSettings DataTables settings object
		 *  @param {int} start Starting position in data for the draw
		 *  @param {int} end End position in data for the draw
		 *  @param {int} max Total number of rows in the table (regardless of
		 *    filtering)
		 *  @param {int} total Total number of rows in the data set, after filtering
		 *  @param {string} pre The string that DataTables has formatted using it's
		 *    own rules
		 *  @returns {string} The string to be displayed in the information element.
		 *
		 *  @dtopt Callbacks
		 *  @name DataTable.defaults.infoCallback
		 *
		 *  @example
		 *    $('#example').dataTable( {
		 *      "infoCallback": function( settings, start, end, max, total, pre ) {
		 *        return start +" to "+ end;
		 *      }
		 *    } );
		 */
		"fnInfoCallback": null,
	
	
		/**
		 * Called when the table has been initialised. Normally DataTables will
		 * initialise sequentially and there will be no need for this function,
		 * however, this does not hold true when using external language information
		 * since that is obtained using an async XHR call.
		 *  @type function
		 *  @param {object} settings DataTables settings object
		 *  @param {object} json The JSON object request from the server - only
		 *    present if client-side Ajax sourced data is used
		 *
		 *  @dtopt Callbacks
		 *  @name DataTable.defaults.initComplete
		 *
		 *  @example
		 *    $(document).ready( function() {
		 *      $('#example').dataTable( {
		 *        "initComplete": function(settings, json) {
		 *          alert( 'DataTables has finished its initialisation.' );
		 *        }
		 *      } );
		 *    } )
		 */
		"fnInitComplete": null,
	
	
		/**
		 * Called at the very start of each table draw and can be used to cancel the
		 * draw by returning false, any other return (including undefined) results in
		 * the full draw occurring).
		 *  @type function
		 *  @param {object} settings DataTables settings object
		 *  @returns {boolean} False will cancel the draw, anything else (including no
		 *    return) will allow it to complete.
		 *
		 *  @dtopt Callbacks
		 *  @name DataTable.defaults.preDrawCallback
		 *
		 *  @example
		 *    $(document).ready( function() {
		 *      $('#example').dataTable( {
		 *        "preDrawCallback": function( settings ) {
		 *          if ( $('#test').val() == 1 ) {
		 *            return false;
		 *          }
		 *        }
		 *      } );
		 *    } );
		 */
		"fnPreDrawCallback": null,
	
	
		/**
		 * This function allows you to 'post process' each row after it have been
		 * generated for each table draw, but before it is rendered on screen. This
		 * function might be used for setting the row class name etc.
		 *  @type function
		 *  @param {node} row "TR" element for the current row
		 *  @param {array} data Raw data array for this row
		 *  @param {int} displayIndex The display index for the current table draw
		 *  @param {int} displayIndexFull The index of the data in the full list of
		 *    rows (after filtering)
		 *
		 *  @dtopt Callbacks
		 *  @name DataTable.defaults.rowCallback
		 *
		 *  @example
		 *    $(document).ready( function() {
		 *      $('#example').dataTable( {
		 *        "rowCallback": function( row, data, displayIndex, displayIndexFull ) {
		 *          // Bold the grade for all 'A' grade browsers
		 *          if ( data[4] == "A" ) {
		 *            $('td:eq(4)', row).html( '<b>A</b>' );
		 *          }
		 *        }
		 *      } );
		 *    } );
		 */
		"fnRowCallback": null,
	
	
		/**
		 * __Deprecated__ The functionality provided by this parameter has now been
		 * superseded by that provided through `ajax`, which should be used instead.
		 *
		 * This parameter allows you to override the default function which obtains
		 * the data from the server so something more suitable for your application.
		 * For example you could use POST data, or pull information from a Gears or
		 * AIR database.
		 *  @type function
		 *  @member
		 *  @param {string} source HTTP source to obtain the data from (`ajax`)
		 *  @param {array} data A key/value pair object containing the data to send
		 *    to the server
		 *  @param {function} callback to be called on completion of the data get
		 *    process that will draw the data on the page.
		 *  @param {object} settings DataTables settings object
		 *
		 *  @dtopt Callbacks
		 *  @dtopt Server-side
		 *  @name DataTable.defaults.serverData
		 *
		 *  @deprecated 1.10. Please use `ajax` for this functionality now.
		 */
		"fnServerData": null,
	
	
		/**
		 * __Deprecated__ The functionality provided by this parameter has now been
		 * superseded by that provided through `ajax`, which should be used instead.
		 *
		 *  It is often useful to send extra data to the server when making an Ajax
		 * request - for example custom filtering information, and this callback
		 * function makes it trivial to send extra information to the server. The
		 * passed in parameter is the data set that has been constructed by
		 * DataTables, and you can add to this or modify it as you require.
		 *  @type function
		 *  @param {array} data Data array (array of objects which are name/value
		 *    pairs) that has been constructed by DataTables and will be sent to the
		 *    server. In the case of Ajax sourced data with server-side processing
		 *    this will be an empty array, for server-side processing there will be a
		 *    significant number of parameters!
		 *  @returns {undefined} Ensure that you modify the data array passed in,
		 *    as this is passed by reference.
		 *
		 *  @dtopt Callbacks
		 *  @dtopt Server-side
		 *  @name DataTable.defaults.serverParams
		 *
		 *  @deprecated 1.10. Please use `ajax` for this functionality now.
		 */
		"fnServerParams": null,
	
	
		/**
		 * Load the table state. With this function you can define from where, and how, the
		 * state of a table is loaded. By default DataTables will load from `localStorage`
		 * but you might wish to use a server-side database or cookies.
		 *  @type function
		 *  @member
		 *  @param {object} settings DataTables settings object
		 *  @param {object} callback Callback that can be executed when done. It
		 *    should be passed the loaded state object.
		 *  @return {object} The DataTables state object to be loaded
		 *
		 *  @dtopt Callbacks
		 *  @name DataTable.defaults.stateLoadCallback
		 *
		 *  @example
		 *    $(document).ready( function() {
		 *      $('#example').dataTable( {
		 *        "stateSave": true,
		 *        "stateLoadCallback": function (settings, callback) {
		 *          $.ajax( {
		 *            "url": "/state_load",
		 *            "dataType": "json",
		 *            "success": function (json) {
		 *              callback( json );
		 *            }
		 *          } );
		 *        }
		 *      } );
		 *    } );
		 */
		"fnStateLoadCallback": function ( settings ) {
			try {
				return JSON.parse(
					(settings.iStateDuration === -1 ? sessionStorage : localStorage).getItem(
						'DataTables_'+settings.sInstance+'_'+location.pathname
					)
				);
			} catch (e) {}
		},
	
	
		/**
		 * Callback which allows modification of the saved state prior to loading that state.
		 * This callback is called when the table is loading state from the stored data, but
		 * prior to the settings object being modified by the saved state. Note that for
		 * plug-in authors, you should use the `stateLoadParams` event to load parameters for
		 * a plug-in.
		 *  @type function
		 *  @param {object} settings DataTables settings object
		 *  @param {object} data The state object that is to be loaded
		 *
		 *  @dtopt Callbacks
		 *  @name DataTable.defaults.stateLoadParams
		 *
		 *  @example
		 *    // Remove a saved filter, so filtering is never loaded
		 *    $(document).ready( function() {
		 *      $('#example').dataTable( {
		 *        "stateSave": true,
		 *        "stateLoadParams": function (settings, data) {
		 *          data.oSearch.sSearch = "";
		 *        }
		 *      } );
		 *    } );
		 *
		 *  @example
		 *    // Disallow state loading by returning false
		 *    $(document).ready( function() {
		 *      $('#example').dataTable( {
		 *        "stateSave": true,
		 *        "stateLoadParams": function (settings, data) {
		 *          return false;
		 *        }
		 *      } );
		 *    } );
		 */
		"fnStateLoadParams": null,
	
	
		/**
		 * Callback that is called when the state has been loaded from the state saving method
		 * and the DataTables settings object has been modified as a result of the loaded state.
		 *  @type function
		 *  @param {object} settings DataTables settings object
		 *  @param {object} data The state object that was loaded
		 *
		 *  @dtopt Callbacks
		 *  @name DataTable.defaults.stateLoaded
		 *
		 *  @example
		 *    // Show an alert with the filtering value that was saved
		 *    $(document).ready( function() {
		 *      $('#example').dataTable( {
		 *        "stateSave": true,
		 *        "stateLoaded": function (settings, data) {
		 *          alert( 'Saved filter was: '+data.oSearch.sSearch );
		 *        }
		 *      } );
		 *    } );
		 */
		"fnStateLoaded": null,
	
	
		/**
		 * Save the table state. This function allows you to define where and how the state
		 * information for the table is stored By default DataTables will use `localStorage`
		 * but you might wish to use a server-side database or cookies.
		 *  @type function
		 *  @member
		 *  @param {object} settings DataTables settings object
		 *  @param {object} data The state object to be saved
		 *
		 *  @dtopt Callbacks
		 *  @name DataTable.defaults.stateSaveCallback
		 *
		 *  @example
		 *    $(document).ready( function() {
		 *      $('#example').dataTable( {
		 *        "stateSave": true,
		 *        "stateSaveCallback": function (settings, data) {
		 *          // Send an Ajax request to the server with the state object
		 *          $.ajax( {
		 *            "url": "/state_save",
		 *            "data": data,
		 *            "dataType": "json",
		 *            "method": "POST"
		 *            "success": function () {}
		 *          } );
		 *        }
		 *      } );
		 *    } );
		 */
		"fnStateSaveCallback": function ( settings, data ) {
			try {
				(settings.iStateDuration === -1 ? sessionStorage : localStorage).setItem(
					'DataTables_'+settings.sInstance+'_'+location.pathname,
					JSON.stringify( data )
				);
			} catch (e) {}
		},
	
	
		/**
		 * Callback which allows modification of the state to be saved. Called when the table
		 * has changed state a new state save is required. This method allows modification of
		 * the state saving object prior to actually doing the save, including addition or
		 * other state properties or modification. Note that for plug-in authors, you should
		 * use the `stateSaveParams` event to save parameters for a plug-in.
		 *  @type function
		 *  @param {object} settings DataTables settings object
		 *  @param {object} data The state object to be saved
		 *
		 *  @dtopt Callbacks
		 *  @name DataTable.defaults.stateSaveParams
		 *
		 *  @example
		 *    // Remove a saved filter, so filtering is never saved
		 *    $(document).ready( function() {
		 *      $('#example').dataTable( {
		 *        "stateSave": true,
		 *        "stateSaveParams": function (settings, data) {
		 *          data.oSearch.sSearch = "";
		 *        }
		 *      } );
		 *    } );
		 */
		"fnStateSaveParams": null,
	
	
		/**
		 * Duration for which the saved state information is considered valid. After this period
		 * has elapsed the state will be returned to the default.
		 * Value is given in seconds.
		 *  @type int
		 *  @default 7200 <i>(2 hours)</i>
		 *
		 *  @dtopt Options
		 *  @name DataTable.defaults.stateDuration
		 *
		 *  @example
		 *    $(document).ready( function() {
		 *      $('#example').dataTable( {
		 *        "stateDuration": 60*60*24; // 1 day
		 *      } );
		 *    } )
		 */
		"iStateDuration": 7200,
	
	
		/**
		 * When enabled DataTables will not make a request to the server for the first
		 * page draw - rather it will use the data already on the page (no sorting etc
		 * will be applied to it), thus saving on an XHR at load time. `deferLoading`
		 * is used to indicate that deferred loading is required, but it is also used
		 * to tell DataTables how many records there are in the full table (allowing
		 * the information element and pagination to be displayed correctly). In the case
		 * where a filtering is applied to the table on initial load, this can be
		 * indicated by giving the parameter as an array, where the first element is
		 * the number of records available after filtering and the second element is the
		 * number of records without filtering (allowing the table information element
		 * to be shown correctly).
		 *  @type int | array
		 *  @default null
		 *
		 *  @dtopt Options
		 *  @name DataTable.defaults.deferLoading
		 *
		 *  @example
		 *    // 57 records available in the table, no filtering applied
		 *    $(document).ready( function() {
		 *      $('#example').dataTable( {
		 *        "serverSide": true,
		 *        "ajax": "scripts/server_processing.php",
		 *        "deferLoading": 57
		 *      } );
		 *    } );
		 *
		 *  @example
		 *    // 57 records after filtering, 100 without filtering (an initial filter applied)
		 *    $(document).ready( function() {
		 *      $('#example').dataTable( {
		 *        "serverSide": true,
		 *        "ajax": "scripts/server_processing.php",
		 *        "deferLoading": [ 57, 100 ],
		 *        "search": {
		 *          "search": "my_filter"
		 *        }
		 *      } );
		 *    } );
		 */
		"iDeferLoading": null,
	
	
		/**
		 * Number of rows to display on a single page when using pagination. If
		 * feature enabled (`lengthChange`) then the end user will be able to override
		 * this to a custom setting using a pop-up menu.
		 *  @type int
		 *  @default 10
		 *
		 *  @dtopt Options
		 *  @name DataTable.defaults.pageLength
		 *
		 *  @example
		 *    $(document).ready( function() {
		 *      $('#example').dataTable( {
		 *        "pageLength": 50
		 *      } );
		 *    } )
		 */
		"iDisplayLength": 10,
	
	
		/**
		 * Define the starting point for data display when using DataTables with
		 * pagination. Note that this parameter is the number of records, rather than
		 * the page number, so if you have 10 records per page and want to start on
		 * the third page, it should be "20".
		 *  @type int
		 *  @default 0
		 *
		 *  @dtopt Options
		 *  @name DataTable.defaults.displayStart
		 *
		 *  @example
		 *    $(document).ready( function() {
		 *      $('#example').dataTable( {
		 *        "displayStart": 20
		 *      } );
		 *    } )
		 */
		"iDisplayStart": 0,
	
	
		/**
		 * By default DataTables allows keyboard navigation of the table (sorting, paging,
		 * and filtering) by adding a `tabindex` attribute to the required elements. This
		 * allows you to tab through the controls and press the enter key to activate them.
		 * The tabindex is default 0, meaning that the tab follows the flow of the document.
		 * You can overrule this using this parameter if you wish. Use a value of -1 to
		 * disable built-in keyboard navigation.
		 *  @type int
		 *  @default 0
		 *
		 *  @dtopt Options
		 *  @name DataTable.defaults.tabIndex
		 *
		 *  @example
		 *    $(document).ready( function() {
		 *      $('#example').dataTable( {
		 *        "tabIndex": 1
		 *      } );
		 *    } );
		 */
		"iTabIndex": 0,
	
	
		/**
		 * Classes that DataTables assigns to the various components and features
		 * that it adds to the HTML table. This allows classes to be configured
		 * during initialisation in addition to through the static
		 * {@link DataTable.ext.oStdClasses} object).
		 *  @namespace
		 *  @name DataTable.defaults.classes
		 */
		"oClasses": {},
	
	
		/**
		 * All strings that DataTables uses in the user interface that it creates
		 * are defined in this object, allowing you to modified them individually or
		 * completely replace them all as required.
		 *  @namespace
		 *  @name DataTable.defaults.language
		 */
		"oLanguage": {
			/**
			 * Strings that are used for WAI-ARIA labels and controls only (these are not
			 * actually visible on the page, but will be read by screenreaders, and thus
			 * must be internationalised as well).
			 *  @namespace
			 *  @name DataTable.defaults.language.aria
			 */
			"oAria": {
				/**
				 * ARIA label that is added to the table headers when the column may be
				 * sorted ascending by activing the column (click or return when focused).
				 * Note that the column header is prefixed to this string.
				 *  @type string
				 *  @default : activate to sort column ascending
				 *
				 *  @dtopt Language
				 *  @name DataTable.defaults.language.aria.sortAscending
				 *
				 *  @example
				 *    $(document).ready( function() {
				 *      $('#example').dataTable( {
				 *        "language": {
				 *          "aria": {
				 *            "sortAscending": " - click/return to sort ascending"
				 *          }
				 *        }
				 *      } );
				 *    } );
				 */
				"sSortAscending": ": activate to sort column ascending",
	
				/**
				 * ARIA label that is added to the table headers when the column may be
				 * sorted descending by activing the column (click or return when focused).
				 * Note that the column header is prefixed to this string.
				 *  @type string
				 *  @default : activate to sort column ascending
				 *
				 *  @dtopt Language
				 *  @name DataTable.defaults.language.aria.sortDescending
				 *
				 *  @example
				 *    $(document).ready( function() {
				 *      $('#example').dataTable( {
				 *        "language": {
				 *          "aria": {
				 *            "sortDescending": " - click/return to sort descending"
				 *          }
				 *        }
				 *      } );
				 *    } );
				 */
				"sSortDescending": ": activate to sort column descending"
			},
	
			/**
			 * Pagination string used by DataTables for the built-in pagination
			 * control types.
			 *  @namespace
			 *  @name DataTable.defaults.language.paginate
			 */
			"oPaginate": {
				/**
				 * Text to use when using the 'full_numbers' type of pagination for the
				 * button to take the user to the first page.
				 *  @type string
				 *  @default First
				 *
				 *  @dtopt Language
				 *  @name DataTable.defaults.language.paginate.first
				 *
				 *  @example
				 *    $(document).ready( function() {
				 *      $('#example').dataTable( {
				 *        "language": {
				 *          "paginate": {
				 *            "first": "First page"
				 *          }
				 *        }
				 *      } );
				 *    } );
				 */
				"sFirst": "First",
	
	
				/**
				 * Text to use when using the 'full_numbers' type of pagination for the
				 * button to take the user to the last page.
				 *  @type string
				 *  @default Last
				 *
				 *  @dtopt Language
				 *  @name DataTable.defaults.language.paginate.last
				 *
				 *  @example
				 *    $(document).ready( function() {
				 *      $('#example').dataTable( {
				 *        "language": {
				 *          "paginate": {
				 *            "last": "Last page"
				 *          }
				 *        }
				 *      } );
				 *    } );
				 */
				"sLast": "Last",
	
	
				/**
				 * Text to use for the 'next' pagination button (to take the user to the
				 * next page).
				 *  @type string
				 *  @default Next
				 *
				 *  @dtopt Language
				 *  @name DataTable.defaults.language.paginate.next
				 *
				 *  @example
				 *    $(document).ready( function() {
				 *      $('#example').dataTable( {
				 *        "language": {
				 *          "paginate": {
				 *            "next": "Next page"
				 *          }
				 *        }
				 *      } );
				 *    } );
				 */
				"sNext": "Next",
	
	
				/**
				 * Text to use for the 'previous' pagination button (to take the user to
				 * the previous page).
				 *  @type string
				 *  @default Previous
				 *
				 *  @dtopt Language
				 *  @name DataTable.defaults.language.paginate.previous
				 *
				 *  @example
				 *    $(document).ready( function() {
				 *      $('#example').dataTable( {
				 *        "language": {
				 *          "paginate": {
				 *            "previous": "Previous page"
				 *          }
				 *        }
				 *      } );
				 *    } );
				 */
				"sPrevious": "Previous"
			},
	
			/**
			 * This string is shown in preference to `zeroRecords` when the table is
			 * empty of data (regardless of filtering). Note that this is an optional
			 * parameter - if it is not given, the value of `zeroRecords` will be used
			 * instead (either the default or given value).
			 *  @type string
			 *  @default No data available in table
			 *
			 *  @dtopt Language
			 *  @name DataTable.defaults.language.emptyTable
			 *
			 *  @example
			 *    $(document).ready( function() {
			 *      $('#example').dataTable( {
			 *        "language": {
			 *          "emptyTable": "No data available in table"
			 *        }
			 *      } );
			 *    } );
			 */
			"sEmptyTable": "No data available in table",
	
	
			/**
			 * This string gives information to the end user about the information
			 * that is current on display on the page. The following tokens can be
			 * used in the string and will be dynamically replaced as the table
			 * display updates. This tokens can be placed anywhere in the string, or
			 * removed as needed by the language requires:
			 *
			 * * `\_START\_` - Display index of the first record on the current page
			 * * `\_END\_` - Display index of the last record on the current page
			 * * `\_TOTAL\_` - Number of records in the table after filtering
			 * * `\_MAX\_` - Number of records in the table without filtering
			 * * `\_PAGE\_` - Current page number
			 * * `\_PAGES\_` - Total number of pages of data in the table
			 *
			 *  @type string
			 *  @default Showing _START_ to _END_ of _TOTAL_ entries
			 *
			 *  @dtopt Language
			 *  @name DataTable.defaults.language.info
			 *
			 *  @example
			 *    $(document).ready( function() {
			 *      $('#example').dataTable( {
			 *        "language": {
			 *          "info": "Showing page _PAGE_ of _PAGES_"
			 *        }
			 *      } );
			 *    } );
			 */
			"sInfo": "Showing _START_ to _END_ of _TOTAL_ entries",
	
	
			/**
			 * Display information string for when the table is empty. Typically the
			 * format of this string should match `info`.
			 *  @type string
			 *  @default Showing 0 to 0 of 0 entries
			 *
			 *  @dtopt Language
			 *  @name DataTable.defaults.language.infoEmpty
			 *
			 *  @example
			 *    $(document).ready( function() {
			 *      $('#example').dataTable( {
			 *        "language": {
			 *          "infoEmpty": "No entries to show"
			 *        }
			 *      } );
			 *    } );
			 */
			"sInfoEmpty": "Showing 0 to 0 of 0 entries",
	
	
			/**
			 * When a user filters the information in a table, this string is appended
			 * to the information (`info`) to give an idea of how strong the filtering
			 * is. The variable _MAX_ is dynamically updated.
			 *  @type string
			 *  @default (filtered from _MAX_ total entries)
			 *
			 *  @dtopt Language
			 *  @name DataTable.defaults.language.infoFiltered
			 *
			 *  @example
			 *    $(document).ready( function() {
			 *      $('#example').dataTable( {
			 *        "language": {
			 *          "infoFiltered": " - filtering from _MAX_ records"
			 *        }
			 *      } );
			 *    } );
			 */
			"sInfoFiltered": "(filtered from _MAX_ total entries)",
	
	
			/**
			 * If can be useful to append extra information to the info string at times,
			 * and this variable does exactly that. This information will be appended to
			 * the `info` (`infoEmpty` and `infoFiltered` in whatever combination they are
			 * being used) at all times.
			 *  @type string
			 *  @default <i>Empty string</i>
			 *
			 *  @dtopt Language
			 *  @name DataTable.defaults.language.infoPostFix
			 *
			 *  @example
			 *    $(document).ready( function() {
			 *      $('#example').dataTable( {
			 *        "language": {
			 *          "infoPostFix": "All records shown are derived from real information."
			 *        }
			 *      } );
			 *    } );
			 */
			"sInfoPostFix": "",
	
	
			/**
			 * This decimal place operator is a little different from the other
			 * language options since DataTables doesn't output floating point
			 * numbers, so it won't ever use this for display of a number. Rather,
			 * what this parameter does is modify the sort methods of the table so
			 * that numbers which are in a format which has a character other than
			 * a period (`.`) as a decimal place will be sorted numerically.
			 *
			 * Note that numbers with different decimal places cannot be shown in
			 * the same table and still be sortable, the table must be consistent.
			 * However, multiple different tables on the page can use different
			 * decimal place characters.
			 *  @type string
			 *  @default 
			 *
			 *  @dtopt Language
			 *  @name DataTable.defaults.language.decimal
			 *
			 *  @example
			 *    $(document).ready( function() {
			 *      $('#example').dataTable( {
			 *        "language": {
			 *          "decimal": ","
			 *          "thousands": "."
			 *        }
			 *      } );
			 *    } );
			 */
			"sDecimal": "",
	
	
			/**
			 * DataTables has a build in number formatter (`formatNumber`) which is
			 * used to format large numbers that are used in the table information.
			 * By default a comma is used, but this can be trivially changed to any
			 * character you wish with this parameter.
			 *  @type string
			 *  @default ,
			 *
			 *  @dtopt Language
			 *  @name DataTable.defaults.language.thousands
			 *
			 *  @example
			 *    $(document).ready( function() {
			 *      $('#example').dataTable( {
			 *        "language": {
			 *          "thousands": "'"
			 *        }
			 *      } );
			 *    } );
			 */
			"sThousands": ",",
	
	
			/**
			 * Detail the action that will be taken when the drop down menu for the
			 * pagination length option is changed. The '_MENU_' variable is replaced
			 * with a default select list of 10, 25, 50 and 100, and can be replaced
			 * with a custom select box if required.
			 *  @type string
			 *  @default Show _MENU_ entries
			 *
			 *  @dtopt Language
			 *  @name DataTable.defaults.language.lengthMenu
			 *
			 *  @example
			 *    // Language change only
			 *    $(document).ready( function() {
			 *      $('#example').dataTable( {
			 *        "language": {
			 *          "lengthMenu": "Display _MENU_ records"
			 *        }
			 *      } );
			 *    } );
			 *
			 *  @example
			 *    // Language and options change
			 *    $(document).ready( function() {
			 *      $('#example').dataTable( {
			 *        "language": {
			 *          "lengthMenu": 'Display <select>'+
			 *            '<option value="10">10</option>'+
			 *            '<option value="20">20</option>'+
			 *            '<option value="30">30</option>'+
			 *            '<option value="40">40</option>'+
			 *            '<option value="50">50</option>'+
			 *            '<option value="-1">All</option>'+
			 *            '</select> records'
			 *        }
			 *      } );
			 *    } );
			 */
			"sLengthMenu": "Show _MENU_ entries",
	
	
			/**
			 * When using Ajax sourced data and during the first draw when DataTables is
			 * gathering the data, this message is shown in an empty row in the table to
			 * indicate to the end user the the data is being loaded. Note that this
			 * parameter is not used when loading data by server-side processing, just
			 * Ajax sourced data with client-side processing.
			 *  @type string
			 *  @default Loading...
			 *
			 *  @dtopt Language
			 *  @name DataTable.defaults.language.loadingRecords
			 *
			 *  @example
			 *    $(document).ready( function() {
			 *      $('#example').dataTable( {
			 *        "language": {
			 *          "loadingRecords": "Please wait - loading..."
			 *        }
			 *      } );
			 *    } );
			 */
			"sLoadingRecords": "Loading...",
	
	
			/**
			 * Text which is displayed when the table is processing a user action
			 * (usually a sort command or similar).
			 *  @type string
			 *  @default Processing...
			 *
			 *  @dtopt Language
			 *  @name DataTable.defaults.language.processing
			 *
			 *  @example
			 *    $(document).ready( function() {
			 *      $('#example').dataTable( {
			 *        "language": {
			 *          "processing": "DataTables is currently busy"
			 *        }
			 *      } );
			 *    } );
			 */
			"sProcessing": "Processing...",
	
	
			/**
			 * Details the actions that will be taken when the user types into the
			 * filtering input text box. The variable "_INPUT_", if used in the string,
			 * is replaced with the HTML text box for the filtering input allowing
			 * control over where it appears in the string. If "_INPUT_" is not given
			 * then the input box is appended to the string automatically.
			 *  @type string
			 *  @default Search:
			 *
			 *  @dtopt Language
			 *  @name DataTable.defaults.language.search
			 *
			 *  @example
			 *    // Input text box will be appended at the end automatically
			 *    $(document).ready( function() {
			 *      $('#example').dataTable( {
			 *        "language": {
			 *          "search": "Filter records:"
			 *        }
			 *      } );
			 *    } );
			 *
			 *  @example
			 *    // Specify where the filter should appear
			 *    $(document).ready( function() {
			 *      $('#example').dataTable( {
			 *        "language": {
			 *          "search": "Apply filter _INPUT_ to table"
			 *        }
			 *      } );
			 *    } );
			 */
			"sSearch": "Search:",
	
	
			/**
			 * Assign a `placeholder` attribute to the search `input` element
			 *  @type string
			 *  @default 
			 *
			 *  @dtopt Language
			 *  @name DataTable.defaults.language.searchPlaceholder
			 */
			"sSearchPlaceholder": "",
	
	
			/**
			 * All of the language information can be stored in a file on the
			 * server-side, which DataTables will look up if this parameter is passed.
			 * It must store the URL of the language file, which is in a JSON format,
			 * and the object has the same properties as the oLanguage object in the
			 * initialiser object (i.e. the above parameters). Please refer to one of
			 * the example language files to see how this works in action.
			 *  @type string
			 *  @default <i>Empty string - i.e. disabled</i>
			 *
			 *  @dtopt Language
			 *  @name DataTable.defaults.language.url
			 *
			 *  @example
			 *    $(document).ready( function() {
			 *      $('#example').dataTable( {
			 *        "language": {
			 *          "url": "http://www.sprymedia.co.uk/dataTables/lang.txt"
			 *        }
			 *      } );
			 *    } );
			 */
			"sUrl": "",
	
	
			/**
			 * Text shown inside the table records when the is no information to be
			 * displayed after filtering. `emptyTable` is shown when there is simply no
			 * information in the table at all (regardless of filtering).
			 *  @type string
			 *  @default No matching records found
			 *
			 *  @dtopt Language
			 *  @name DataTable.defaults.language.zeroRecords
			 *
			 *  @example
			 *    $(document).ready( function() {
			 *      $('#example').dataTable( {
			 *        "language": {
			 *          "zeroRecords": "No records to display"
			 *        }
			 *      } );
			 *    } );
			 */
			"sZeroRecords": "No matching records found"
		},
	
	
		/**
		 * This parameter allows you to have define the global filtering state at
		 * initialisation time. As an object the `search` parameter must be
		 * defined, but all other parameters are optional. When `regex` is true,
		 * the search string will be treated as a regular expression, when false
		 * (default) it will be treated as a straight string. When `smart`
		 * DataTables will use it's smart filtering methods (to word match at
		 * any point in the data), when false this will not be done.
		 *  @namespace
		 *  @extends DataTable.models.oSearch
		 *
		 *  @dtopt Options
		 *  @name DataTable.defaults.search
		 *
		 *  @example
		 *    $(document).ready( function() {
		 *      $('#example').dataTable( {
		 *        "search": {"search": "Initial search"}
		 *      } );
		 *    } )
		 */
		"oSearch": $.extend( {}, DataTable.models.oSearch ),
	
	
		/**
		 * __Deprecated__ The functionality provided by this parameter has now been
		 * superseded by that provided through `ajax`, which should be used instead.
		 *
		 * By default DataTables will look for the property `data` (or `aaData` for
		 * compatibility with DataTables 1.9-) when obtaining data from an Ajax
		 * source or for server-side processing - this parameter allows that
		 * property to be changed. You can use Javascript dotted object notation to
		 * get a data source for multiple levels of nesting.
		 *  @type string
		 *  @default data
		 *
		 *  @dtopt Options
		 *  @dtopt Server-side
		 *  @name DataTable.defaults.ajaxDataProp
		 *
		 *  @deprecated 1.10. Please use `ajax` for this functionality now.
		 */
		"sAjaxDataProp": "data",
	
	
		/**
		 * __Deprecated__ The functionality provided by this parameter has now been
		 * superseded by that provided through `ajax`, which should be used instead.
		 *
		 * You can instruct DataTables to load data from an external
		 * source using this parameter (use aData if you want to pass data in you
		 * already have). Simply provide a url a JSON object can be obtained from.
		 *  @type string
		 *  @default null
		 *
		 *  @dtopt Options
		 *  @dtopt Server-side
		 *  @name DataTable.defaults.ajaxSource
		 *
		 *  @deprecated 1.10. Please use `ajax` for this functionality now.
		 */
		"sAjaxSource": null,
	
	
		/**
		 * This initialisation variable allows you to specify exactly where in the
		 * DOM you want DataTables to inject the various controls it adds to the page
		 * (for example you might want the pagination controls at the top of the
		 * table). DIV elements (with or without a custom class) can also be added to
		 * aid styling. The follow syntax is used:
		 *   <ul>
		 *     <li>The following options are allowed:
		 *       <ul>
		 *         <li>'l' - Length changing</li>
		 *         <li>'f' - Filtering input</li>
		 *         <li>'t' - The table!</li>
		 *         <li>'i' - Information</li>
		 *         <li>'p' - Pagination</li>
		 *         <li>'r' - pRocessing</li>
		 *       </ul>
		 *     </li>
		 *     <li>The following constants are allowed:
		 *       <ul>
		 *         <li>'H' - jQueryUI theme "header" classes ('fg-toolbar ui-widget-header ui-corner-tl ui-corner-tr ui-helper-clearfix')</li>
		 *         <li>'F' - jQueryUI theme "footer" classes ('fg-toolbar ui-widget-header ui-corner-bl ui-corner-br ui-helper-clearfix')</li>
		 *       </ul>
		 *     </li>
		 *     <li>The following syntax is expected:
		 *       <ul>
		 *         <li>'&lt;' and '&gt;' - div elements</li>
		 *         <li>'&lt;"class" and '&gt;' - div with a class</li>
		 *         <li>'&lt;"#id" and '&gt;' - div with an ID</li>
		 *       </ul>
		 *     </li>
		 *     <li>Examples:
		 *       <ul>
		 *         <li>'&lt;"wrapper"flipt&gt;'</li>
		 *         <li>'&lt;lf&lt;t&gt;ip&gt;'</li>
		 *       </ul>
		 *     </li>
		 *   </ul>
		 *  @type string
		 *  @default lfrtip <i>(when `jQueryUI` is false)</i> <b>or</b>
		 *    <"H"lfr>t<"F"ip> <i>(when `jQueryUI` is true)</i>
		 *
		 *  @dtopt Options
		 *  @name DataTable.defaults.dom
		 *
		 *  @example
		 *    $(document).ready( function() {
		 *      $('#example').dataTable( {
		 *        "dom": '&lt;"top"i&gt;rt&lt;"bottom"flp&gt;&lt;"clear"&gt;'
		 *      } );
		 *    } );
		 */
		"sDom": "lfrtip",
	
	
		/**
		 * Search delay option. This will throttle full table searches that use the
		 * DataTables provided search input element (it does not effect calls to
		 * `dt-api search()`, providing a delay before the search is made.
		 *  @type integer
		 *  @default 0
		 *
		 *  @dtopt Options
		 *  @name DataTable.defaults.searchDelay
		 *
		 *  @example
		 *    $(document).ready( function() {
		 *      $('#example').dataTable( {
		 *        "searchDelay": 200
		 *      } );
		 *    } )
		 */
		"searchDelay": null,
	
	
		/**
		 * DataTables features six different built-in options for the buttons to
		 * display for pagination control:
		 *
		 * * `numbers` - Page number buttons only
		 * * `simple` - 'Previous' and 'Next' buttons only
		 * * 'simple_numbers` - 'Previous' and 'Next' buttons, plus page numbers
		 * * `full` - 'First', 'Previous', 'Next' and 'Last' buttons
		 * * `full_numbers` - 'First', 'Previous', 'Next' and 'Last' buttons, plus page numbers
		 * * `first_last_numbers` - 'First' and 'Last' buttons, plus page numbers
		 *  
		 * Further methods can be added using {@link DataTable.ext.oPagination}.
		 *  @type string
		 *  @default simple_numbers
		 *
		 *  @dtopt Options
		 *  @name DataTable.defaults.pagingType
		 *
		 *  @example
		 *    $(document).ready( function() {
		 *      $('#example').dataTable( {
		 *        "pagingType": "full_numbers"
		 *      } );
		 *    } )
		 */
		"sPaginationType": "simple_numbers",
	
	
		/**
		 * Enable horizontal scrolling. When a table is too wide to fit into a
		 * certain layout, or you have a large number of columns in the table, you
		 * can enable x-scrolling to show the table in a viewport, which can be
		 * scrolled. This property can be `true` which will allow the table to
		 * scroll horizontally when needed, or any CSS unit, or a number (in which
		 * case it will be treated as a pixel measurement). Setting as simply `true`
		 * is recommended.
		 *  @type boolean|string
		 *  @default <i>blank string - i.e. disabled</i>
		 *
		 *  @dtopt Features
		 *  @name DataTable.defaults.scrollX
		 *
		 *  @example
		 *    $(document).ready( function() {
		 *      $('#example').dataTable( {
		 *        "scrollX": true,
		 *        "scrollCollapse": true
		 *      } );
		 *    } );
		 */
		"sScrollX": "",
	
	
		/**
		 * This property can be used to force a DataTable to use more width than it
		 * might otherwise do when x-scrolling is enabled. For example if you have a
		 * table which requires to be well spaced, this parameter is useful for
		 * "over-sizing" the table, and thus forcing scrolling. This property can by
		 * any CSS unit, or a number (in which case it will be treated as a pixel
		 * measurement).
		 *  @type string
		 *  @default <i>blank string - i.e. disabled</i>
		 *
		 *  @dtopt Options
		 *  @name DataTable.defaults.scrollXInner
		 *
		 *  @example
		 *    $(document).ready( function() {
		 *      $('#example').dataTable( {
		 *        "scrollX": "100%",
		 *        "scrollXInner": "110%"
		 *      } );
		 *    } );
		 */
		"sScrollXInner": "",
	
	
		/**
		 * Enable vertical scrolling. Vertical scrolling will constrain the DataTable
		 * to the given height, and enable scrolling for any data which overflows the
		 * current viewport. This can be used as an alternative to paging to display
		 * a lot of data in a small area (although paging and scrolling can both be
		 * enabled at the same time). This property can be any CSS unit, or a number
		 * (in which case it will be treated as a pixel measurement).
		 *  @type string
		 *  @default <i>blank string - i.e. disabled</i>
		 *
		 *  @dtopt Features
		 *  @name DataTable.defaults.scrollY
		 *
		 *  @example
		 *    $(document).ready( function() {
		 *      $('#example').dataTable( {
		 *        "scrollY": "200px",
		 *        "paginate": false
		 *      } );
		 *    } );
		 */
		"sScrollY": "",
	
	
		/**
		 * __Deprecated__ The functionality provided by this parameter has now been
		 * superseded by that provided through `ajax`, which should be used instead.
		 *
		 * Set the HTTP method that is used to make the Ajax call for server-side
		 * processing or Ajax sourced data.
		 *  @type string
		 *  @default GET
		 *
		 *  @dtopt Options
		 *  @dtopt Server-side
		 *  @name DataTable.defaults.serverMethod
		 *
		 *  @deprecated 1.10. Please use `ajax` for this functionality now.
		 */
		"sServerMethod": "GET",
	
	
		/**
		 * DataTables makes use of renderers when displaying HTML elements for
		 * a table. These renderers can be added or modified by plug-ins to
		 * generate suitable mark-up for a site. For example the Bootstrap
		 * integration plug-in for DataTables uses a paging button renderer to
		 * display pagination buttons in the mark-up required by Bootstrap.
		 *
		 * For further information about the renderers available see
		 * DataTable.ext.renderer
		 *  @type string|object
		 *  @default null
		 *
		 *  @name DataTable.defaults.renderer
		 *
		 */
		"renderer": null,
	
	
		/**
		 * Set the data property name that DataTables should use to get a row's id
		 * to set as the `id` property in the node.
		 *  @type string
		 *  @default DT_RowId
		 *
		 *  @name DataTable.defaults.rowId
		 */
		"rowId": "DT_RowId"
	};
	
	_fnHungarianMap( DataTable.defaults );
	
	
	
	/*
	 * Developer note - See note in model.defaults.js about the use of Hungarian
	 * notation and camel case.
	 */
	
	/**
	 * Column options that can be given to DataTables at initialisation time.
	 *  @namespace
	 */
	DataTable.defaults.column = {
		/**
		 * Define which column(s) an order will occur on for this column. This
		 * allows a column's ordering to take multiple columns into account when
		 * doing a sort or use the data from a different column. For example first
		 * name / last name columns make sense to do a multi-column sort over the
		 * two columns.
		 *  @type array|int
		 *  @default null <i>Takes the value of the column index automatically</i>
		 *
		 *  @name DataTable.defaults.column.orderData
		 *  @dtopt Columns
		 *
		 *  @example
		 *    // Using `columnDefs`
		 *    $(document).ready( function() {
		 *      $('#example').dataTable( {
		 *        "columnDefs": [
		 *          { "orderData": [ 0, 1 ], "targets": [ 0 ] },
		 *          { "orderData": [ 1, 0 ], "targets": [ 1 ] },
		 *          { "orderData": 2, "targets": [ 2 ] }
		 *        ]
		 *      } );
		 *    } );
		 *
		 *  @example
		 *    // Using `columns`
		 *    $(document).ready( function() {
		 *      $('#example').dataTable( {
		 *        "columns": [
		 *          { "orderData": [ 0, 1 ] },
		 *          { "orderData": [ 1, 0 ] },
		 *          { "orderData": 2 },
		 *          null,
		 *          null
		 *        ]
		 *      } );
		 *    } );
		 */
		"aDataSort": null,
		"iDataSort": -1,
	
	
		/**
		 * You can control the default ordering direction, and even alter the
		 * behaviour of the sort handler (i.e. only allow ascending ordering etc)
		 * using this parameter.
		 *  @type array
		 *  @default [ 'asc', 'desc' ]
		 *
		 *  @name DataTable.defaults.column.orderSequence
		 *  @dtopt Columns
		 *
		 *  @example
		 *    // Using `columnDefs`
		 *    $(document).ready( function() {
		 *      $('#example').dataTable( {
		 *        "columnDefs": [
		 *          { "orderSequence": [ "asc" ], "targets": [ 1 ] },
		 *          { "orderSequence": [ "desc", "asc", "asc" ], "targets": [ 2 ] },
		 *          { "orderSequence": [ "desc" ], "targets": [ 3 ] }
		 *        ]
		 *      } );
		 *    } );
		 *
		 *  @example
		 *    // Using `columns`
		 *    $(document).ready( function() {
		 *      $('#example').dataTable( {
		 *        "columns": [
		 *          null,
		 *          { "orderSequence": [ "asc" ] },
		 *          { "orderSequence": [ "desc", "asc", "asc" ] },
		 *          { "orderSequence": [ "desc" ] },
		 *          null
		 *        ]
		 *      } );
		 *    } );
		 */
		"asSorting": [ 'asc', 'desc' ],
	
	
		/**
		 * Enable or disable filtering on the data in this column.
		 *  @type boolean
		 *  @default true
		 *
		 *  @name DataTable.defaults.column.searchable
		 *  @dtopt Columns
		 *
		 *  @example
		 *    // Using `columnDefs`
		 *    $(document).ready( function() {
		 *      $('#example').dataTable( {
		 *        "columnDefs": [
		 *          { "searchable": false, "targets": [ 0 ] }
		 *        ] } );
		 *    } );
		 *
		 *  @example
		 *    // Using `columns`
		 *    $(document).ready( function() {
		 *      $('#example').dataTable( {
		 *        "columns": [
		 *          { "searchable": false },
		 *          null,
		 *          null,
		 *          null,
		 *          null
		 *        ] } );
		 *    } );
		 */
		"bSearchable": true,
	
	
		/**
		 * Enable or disable ordering on this column.
		 *  @type boolean
		 *  @default true
		 *
		 *  @name DataTable.defaults.column.orderable
		 *  @dtopt Columns
		 *
		 *  @example
		 *    // Using `columnDefs`
		 *    $(document).ready( function() {
		 *      $('#example').dataTable( {
		 *        "columnDefs": [
		 *          { "orderable": false, "targets": [ 0 ] }
		 *        ] } );
		 *    } );
		 *
		 *  @example
		 *    // Using `columns`
		 *    $(document).ready( function() {
		 *      $('#example').dataTable( {
		 *        "columns": [
		 *          { "orderable": false },
		 *          null,
		 *          null,
		 *          null,
		 *          null
		 *        ] } );
		 *    } );
		 */
		"bSortable": true,
	
	
		/**
		 * Enable or disable the display of this column.
		 *  @type boolean
		 *  @default true
		 *
		 *  @name DataTable.defaults.column.visible
		 *  @dtopt Columns
		 *
		 *  @example
		 *    // Using `columnDefs`
		 *    $(document).ready( function() {
		 *      $('#example').dataTable( {
		 *        "columnDefs": [
		 *          { "visible": false, "targets": [ 0 ] }
		 *        ] } );
		 *    } );
		 *
		 *  @example
		 *    // Using `columns`
		 *    $(document).ready( function() {
		 *      $('#example').dataTable( {
		 *        "columns": [
		 *          { "visible": false },
		 *          null,
		 *          null,
		 *          null,
		 *          null
		 *        ] } );
		 *    } );
		 */
		"bVisible": true,
	
	
		/**
		 * Developer definable function that is called whenever a cell is created (Ajax source,
		 * etc) or processed for input (DOM source). This can be used as a compliment to mRender
		 * allowing you to modify the DOM element (add background colour for example) when the
		 * element is available.
		 *  @type function
		 *  @param {element} td The TD node that has been created
		 *  @param {*} cellData The Data for the cell
		 *  @param {array|object} rowData The data for the whole row
		 *  @param {int} row The row index for the aoData data store
		 *  @param {int} col The column index for aoColumns
		 *
		 *  @name DataTable.defaults.column.createdCell
		 *  @dtopt Columns
		 *
		 *  @example
		 *    $(document).ready( function() {
		 *      $('#example').dataTable( {
		 *        "columnDefs": [ {
		 *          "targets": [3],
		 *          "createdCell": function (td, cellData, rowData, row, col) {
		 *            if ( cellData == "1.7" ) {
		 *              $(td).css('color', 'blue')
		 *            }
		 *          }
		 *        } ]
		 *      });
		 *    } );
		 */
		"fnCreatedCell": null,
	
	
		/**
		 * This parameter has been replaced by `data` in DataTables to ensure naming
		 * consistency. `dataProp` can still be used, as there is backwards
		 * compatibility in DataTables for this option, but it is strongly
		 * recommended that you use `data` in preference to `dataProp`.
		 *  @name DataTable.defaults.column.dataProp
		 */
	
	
		/**
		 * This property can be used to read data from any data source property,
		 * including deeply nested objects / properties. `data` can be given in a
		 * number of different ways which effect its behaviour:
		 *
		 * * `integer` - treated as an array index for the data source. This is the
		 *   default that DataTables uses (incrementally increased for each column).
		 * * `string` - read an object property from the data source. There are
		 *   three 'special' options that can be used in the string to alter how
		 *   DataTables reads the data from the source object:
		 *    * `.` - Dotted Javascript notation. Just as you use a `.` in
		 *      Javascript to read from nested objects, so to can the options
		 *      specified in `data`. For example: `browser.version` or
		 *      `browser.name`. If your object parameter name contains a period, use
		 *      `\\` to escape it - i.e. `first\\.name`.
		 *    * `[]` - Array notation. DataTables can automatically combine data
		 *      from and array source, joining the data with the characters provided
		 *      between the two brackets. For example: `name[, ]` would provide a
		 *      comma-space separated list from the source array. If no characters
		 *      are provided between the brackets, the original array source is
		 *      returned.
		 *    * `()` - Function notation. Adding `()` to the end of a parameter will
		 *      execute a function of the name given. For example: `browser()` for a
		 *      simple function on the data source, `browser.version()` for a
		 *      function in a nested property or even `browser().version` to get an
		 *      object property if the function called returns an object. Note that
		 *      function notation is recommended for use in `render` rather than
		 *      `data` as it is much simpler to use as a renderer.
		 * * `null` - use the original data source for the row rather than plucking
		 *   data directly from it. This action has effects on two other
		 *   initialisation options:
		 *    * `defaultContent` - When null is given as the `data` option and
		 *      `defaultContent` is specified for the column, the value defined by
		 *      `defaultContent` will be used for the cell.
		 *    * `render` - When null is used for the `data` option and the `render`
		 *      option is specified for the column, the whole data source for the
		 *      row is used for the renderer.
		 * * `function` - the function given will be executed whenever DataTables
		 *   needs to set or get the data for a cell in the column. The function
		 *   takes three parameters:
		 *    * Parameters:
		 *      * `{array|object}` The data source for the row
		 *      * `{string}` The type call data requested - this will be 'set' when
		 *        setting data or 'filter', 'display', 'type', 'sort' or undefined
		 *        when gathering data. Note that when `undefined` is given for the
		 *        type DataTables expects to get the raw data for the object back<
		 *      * `{*}` Data to set when the second parameter is 'set'.
		 *    * Return:
		 *      * The return value from the function is not required when 'set' is
		 *        the type of call, but otherwise the return is what will be used
		 *        for the data requested.
		 *
		 * Note that `data` is a getter and setter option. If you just require
		 * formatting of data for output, you will likely want to use `render` which
		 * is simply a getter and thus simpler to use.
		 *
		 * Note that prior to DataTables 1.9.2 `data` was called `mDataProp`. The
		 * name change reflects the flexibility of this property and is consistent
		 * with the naming of mRender. If 'mDataProp' is given, then it will still
		 * be used by DataTables, as it automatically maps the old name to the new
		 * if required.
		 *
		 *  @type string|int|function|null
		 *  @default null <i>Use automatically calculated column index</i>
		 *
		 *  @name DataTable.defaults.column.data
		 *  @dtopt Columns
		 *
		 *  @example
		 *    // Read table data from objects
		 *    // JSON structure for each row:
		 *    //   {
		 *    //      "engine": {value},
		 *    //      "browser": {value},
		 *    //      "platform": {value},
		 *    //      "version": {value},
		 *    //      "grade": {value}
		 *    //   }
		 *    $(document).ready( function() {
		 *      $('#example').dataTable( {
		 *        "ajaxSource": "sources/objects.txt",
		 *        "columns": [
		 *          { "data": "engine" },
		 *          { "data": "browser" },
		 *          { "data": "platform" },
		 *          { "data": "version" },
		 *          { "data": "grade" }
		 *        ]
		 *      } );
		 *    } );
		 *
		 *  @example
		 *    // Read information from deeply nested objects
		 *    // JSON structure for each row:
		 *    //   {
		 *    //      "engine": {value},
		 *    //      "browser": {value},
		 *    //      "platform": {
		 *    //         "inner": {value}
		 *    //      },
		 *    //      "details": [
		 *    //         {value}, {value}
		 *    //      ]
		 *    //   }
		 *    $(document).ready( function() {
		 *      $('#example').dataTable( {
		 *        "ajaxSource": "sources/deep.txt",
		 *        "columns": [
		 *          { "data": "engine" },
		 *          { "data": "browser" },
		 *          { "data": "platform.inner" },
		 *          { "data": "details.0" },
		 *          { "data": "details.1" }
		 *        ]
		 *      } );
		 *    } );
		 *
		 *  @example
		 *    // Using `data` as a function to provide different information for
		 *    // sorting, filtering and display. In this case, currency (price)
		 *    $(document).ready( function() {
		 *      $('#example').dataTable( {
		 *        "columnDefs": [ {
		 *          "targets": [ 0 ],
		 *          "data": function ( source, type, val ) {
		 *            if (type === 'set') {
		 *              source.price = val;
		 *              // Store the computed dislay and filter values for efficiency
		 *              source.price_display = val=="" ? "" : "$"+numberFormat(val);
		 *              source.price_filter  = val=="" ? "" : "$"+numberFormat(val)+" "+val;
		 *              return;
		 *            }
		 *            else if (type === 'display') {
		 *              return source.price_display;
		 *            }
		 *            else if (type === 'filter') {
		 *              return source.price_filter;
		 *            }
		 *            // 'sort', 'type' and undefined all just use the integer
		 *            return source.price;
		 *          }
		 *        } ]
		 *      } );
		 *    } );
		 *
		 *  @example
		 *    // Using default content
		 *    $(document).ready( function() {
		 *      $('#example').dataTable( {
		 *        "columnDefs": [ {
		 *          "targets": [ 0 ],
		 *          "data": null,
		 *          "defaultContent": "Click to edit"
		 *        } ]
		 *      } );
		 *    } );
		 *
		 *  @example
		 *    // Using array notation - outputting a list from an array
		 *    $(document).ready( function() {
		 *      $('#example').dataTable( {
		 *        "columnDefs": [ {
		 *          "targets": [ 0 ],
		 *          "data": "name[, ]"
		 *        } ]
		 *      } );
		 *    } );
		 *
		 */
		"mData": null,
	
	
		/**
		 * This property is the rendering partner to `data` and it is suggested that
		 * when you want to manipulate data for display (including filtering,
		 * sorting etc) without altering the underlying data for the table, use this
		 * property. `render` can be considered to be the the read only companion to
		 * `data` which is read / write (then as such more complex). Like `data`
		 * this option can be given in a number of different ways to effect its
		 * behaviour:
		 *
		 * * `integer` - treated as an array index for the data source. This is the
		 *   default that DataTables uses (incrementally increased for each column).
		 * * `string` - read an object property from the data source. There are
		 *   three 'special' options that can be used in the string to alter how
		 *   DataTables reads the data from the source object:
		 *    * `.` - Dotted Javascript notation. Just as you use a `.` in
		 *      Javascript to read from nested objects, so to can the options
		 *      specified in `data`. For example: `browser.version` or
		 *      `browser.name`. If your object parameter name contains a period, use
		 *      `\\` to escape it - i.e. `first\\.name`.
		 *    * `[]` - Array notation. DataTables can automatically combine data
		 *      from and array source, joining the data with the characters provided
		 *      between the two brackets. For example: `name[, ]` would provide a
		 *      comma-space separated list from the source array. If no characters
		 *      are provided between the brackets, the original array source is
		 *      returned.
		 *    * `()` - Function notation. Adding `()` to the end of a parameter will
		 *      execute a function of the name given. For example: `browser()` for a
		 *      simple function on the data source, `browser.version()` for a
		 *      function in a nested property or even `browser().version` to get an
		 *      object property if the function called returns an object.
		 * * `object` - use different data for the different data types requested by
		 *   DataTables ('filter', 'display', 'type' or 'sort'). The property names
		 *   of the object is the data type the property refers to and the value can
		 *   defined using an integer, string or function using the same rules as
		 *   `render` normally does. Note that an `_` option _must_ be specified.
		 *   This is the default value to use if you haven't specified a value for
		 *   the data type requested by DataTables.
		 * * `function` - the function given will be executed whenever DataTables
		 *   needs to set or get the data for a cell in the column. The function
		 *   takes three parameters:
		 *    * Parameters:
		 *      * {array|object} The data source for the row (based on `data`)
		 *      * {string} The type call data requested - this will be 'filter',
		 *        'display', 'type' or 'sort'.
		 *      * {array|object} The full data source for the row (not based on
		 *        `data`)
		 *    * Return:
		 *      * The return value from the function is what will be used for the
		 *        data requested.
		 *
		 *  @type string|int|function|object|null
		 *  @default null Use the data source value.
		 *
		 *  @name DataTable.defaults.column.render
		 *  @dtopt Columns
		 *
		 *  @example
		 *    // Create a comma separated list from an array of objects
		 *    $(document).ready( function() {
		 *      $('#example').dataTable( {
		 *        "ajaxSource": "sources/deep.txt",
		 *        "columns": [
		 *          { "data": "engine" },
		 *          { "data": "browser" },
		 *          {
		 *            "data": "platform",
		 *            "render": "[, ].name"
		 *          }
		 *        ]
		 *      } );
		 *    } );
		 *
		 *  @example
		 *    // Execute a function to obtain data
		 *    $(document).ready( function() {
		 *      $('#example').dataTable( {
		 *        "columnDefs": [ {
		 *          "targets": [ 0 ],
		 *          "data": null, // Use the full data source object for the renderer's source
		 *          "render": "browserName()"
		 *        } ]
		 *      } );
		 *    } );
		 *
		 *  @example
		 *    // As an object, extracting different data for the different types
		 *    // This would be used with a data source such as:
		 *    //   { "phone": 5552368, "phone_filter": "5552368 555-2368", "phone_display": "555-2368" }
		 *    // Here the `phone` integer is used for sorting and type detection, while `phone_filter`
		 *    // (which has both forms) is used for filtering for if a user inputs either format, while
		 *    // the formatted phone number is the one that is shown in the table.
		 *    $(document).ready( function() {
		 *      $('#example').dataTable( {
		 *        "columnDefs": [ {
		 *          "targets": [ 0 ],
		 *          "data": null, // Use the full data source object for the renderer's source
		 *          "render": {
		 *            "_": "phone",
		 *            "filter": "phone_filter",
		 *            "display": "phone_display"
		 *          }
		 *        } ]
		 *      } );
		 *    } );
		 *
		 *  @example
		 *    // Use as a function to create a link from the data source
		 *    $(document).ready( function() {
		 *      $('#example').dataTable( {
		 *        "columnDefs": [ {
		 *          "targets": [ 0 ],
		 *          "data": "download_link",
		 *          "render": function ( data, type, full ) {
		 *            return '<a href="'+data+'">Download</a>';
		 *          }
		 *        } ]
		 *      } );
		 *    } );
		 */
		"mRender": null,
	
	
		/**
		 * Change the cell type created for the column - either TD cells or TH cells. This
		 * can be useful as TH cells have semantic meaning in the table body, allowing them
		 * to act as a header for a row (you may wish to add scope='row' to the TH elements).
		 *  @type string
		 *  @default td
		 *
		 *  @name DataTable.defaults.column.cellType
		 *  @dtopt Columns
		 *
		 *  @example
		 *    // Make the first column use TH cells
		 *    $(document).ready( function() {
		 *      $('#example').dataTable( {
		 *        "columnDefs": [ {
		 *          "targets": [ 0 ],
		 *          "cellType": "th"
		 *        } ]
		 *      } );
		 *    } );
		 */
		"sCellType": "td",
	
	
		/**
		 * Class to give to each cell in this column.
		 *  @type string
		 *  @default <i>Empty string</i>
		 *
		 *  @name DataTable.defaults.column.class
		 *  @dtopt Columns
		 *
		 *  @example
		 *    // Using `columnDefs`
		 *    $(document).ready( function() {
		 *      $('#example').dataTable( {
		 *        "columnDefs": [
		 *          { "class": "my_class", "targets": [ 0 ] }
		 *        ]
		 *      } );
		 *    } );
		 *
		 *  @example
		 *    // Using `columns`
		 *    $(document).ready( function() {
		 *      $('#example').dataTable( {
		 *        "columns": [
		 *          { "class": "my_class" },
		 *          null,
		 *          null,
		 *          null,
		 *          null
		 *        ]
		 *      } );
		 *    } );
		 */
		"sClass": "",
	
		/**
		 * When DataTables calculates the column widths to assign to each column,
		 * it finds the longest string in each column and then constructs a
		 * temporary table and reads the widths from that. The problem with this
		 * is that "mmm" is much wider then "iiii", but the latter is a longer
		 * string - thus the calculation can go wrong (doing it properly and putting
		 * it into an DOM object and measuring that is horribly(!) slow). Thus as
		 * a "work around" we provide this option. It will append its value to the
		 * text that is found to be the longest string for the column - i.e. padding.
		 * Generally you shouldn't need this!
		 *  @type string
		 *  @default <i>Empty string<i>
		 *
		 *  @name DataTable.defaults.column.contentPadding
		 *  @dtopt Columns
		 *
		 *  @example
		 *    // Using `columns`
		 *    $(document).ready( function() {
		 *      $('#example').dataTable( {
		 *        "columns": [
		 *          null,
		 *          null,
		 *          null,
		 *          {
		 *            "contentPadding": "mmm"
		 *          }
		 *        ]
		 *      } );
		 *    } );
		 */
		"sContentPadding": "",
	
	
		/**
		 * Allows a default value to be given for a column's data, and will be used
		 * whenever a null data source is encountered (this can be because `data`
		 * is set to null, or because the data source itself is null).
		 *  @type string
		 *  @default null
		 *
		 *  @name DataTable.defaults.column.defaultContent
		 *  @dtopt Columns
		 *
		 *  @example
		 *    // Using `columnDefs`
		 *    $(document).ready( function() {
		 *      $('#example').dataTable( {
		 *        "columnDefs": [
		 *          {
		 *            "data": null,
		 *            "defaultContent": "Edit",
		 *            "targets": [ -1 ]
		 *          }
		 *        ]
		 *      } );
		 *    } );
		 *
		 *  @example
		 *    // Using `columns`
		 *    $(document).ready( function() {
		 *      $('#example').dataTable( {
		 *        "columns": [
		 *          null,
		 *          null,
		 *          null,
		 *          {
		 *            "data": null,
		 *            "defaultContent": "Edit"
		 *          }
		 *        ]
		 *      } );
		 *    } );
		 */
		"sDefaultContent": null,
	
	
		/**
		 * This parameter is only used in DataTables' server-side processing. It can
		 * be exceptionally useful to know what columns are being displayed on the
		 * client side, and to map these to database fields. When defined, the names
		 * also allow DataTables to reorder information from the server if it comes
		 * back in an unexpected order (i.e. if you switch your columns around on the
		 * client-side, your server-side code does not also need updating).
		 *  @type string
		 *  @default <i>Empty string</i>
		 *
		 *  @name DataTable.defaults.column.name
		 *  @dtopt Columns
		 *
		 *  @example
		 *    // Using `columnDefs`
		 *    $(document).ready( function() {
		 *      $('#example').dataTable( {
		 *        "columnDefs": [
		 *          { "name": "engine", "targets": [ 0 ] },
		 *          { "name": "browser", "targets": [ 1 ] },
		 *          { "name": "platform", "targets": [ 2 ] },
		 *          { "name": "version", "targets": [ 3 ] },
		 *          { "name": "grade", "targets": [ 4 ] }
		 *        ]
		 *      } );
		 *    } );
		 *
		 *  @example
		 *    // Using `columns`
		 *    $(document).ready( function() {
		 *      $('#example').dataTable( {
		 *        "columns": [
		 *          { "name": "engine" },
		 *          { "name": "browser" },
		 *          { "name": "platform" },
		 *          { "name": "version" },
		 *          { "name": "grade" }
		 *        ]
		 *      } );
		 *    } );
		 */
		"sName": "",
	
	
		/**
		 * Defines a data source type for the ordering which can be used to read
		 * real-time information from the table (updating the internally cached
		 * version) prior to ordering. This allows ordering to occur on user
		 * editable elements such as form inputs.
		 *  @type string
		 *  @default std
		 *
		 *  @name DataTable.defaults.column.orderDataType
		 *  @dtopt Columns
		 *
		 *  @example
		 *    // Using `columnDefs`
		 *    $(document).ready( function() {
		 *      $('#example').dataTable( {
		 *        "columnDefs": [
		 *          { "orderDataType": "dom-text", "targets": [ 2, 3 ] },
		 *          { "type": "numeric", "targets": [ 3 ] },
		 *          { "orderDataType": "dom-select", "targets": [ 4 ] },
		 *          { "orderDataType": "dom-checkbox", "targets": [ 5 ] }
		 *        ]
		 *      } );
		 *    } );
		 *
		 *  @example
		 *    // Using `columns`
		 *    $(document).ready( function() {
		 *      $('#example').dataTable( {
		 *        "columns": [
		 *          null,
		 *          null,
		 *          { "orderDataType": "dom-text" },
		 *          { "orderDataType": "dom-text", "type": "numeric" },
		 *          { "orderDataType": "dom-select" },
		 *          { "orderDataType": "dom-checkbox" }
		 *        ]
		 *      } );
		 *    } );
		 */
		"sSortDataType": "std",
	
	
		/**
		 * The title of this column.
		 *  @type string
		 *  @default null <i>Derived from the 'TH' value for this column in the
		 *    original HTML table.</i>
		 *
		 *  @name DataTable.defaults.column.title
		 *  @dtopt Columns
		 *
		 *  @example
		 *    // Using `columnDefs`
		 *    $(document).ready( function() {
		 *      $('#example').dataTable( {
		 *        "columnDefs": [
		 *          { "title": "My column title", "targets": [ 0 ] }
		 *        ]
		 *      } );
		 *    } );
		 *
		 *  @example
		 *    // Using `columns`
		 *    $(document).ready( function() {
		 *      $('#example').dataTable( {
		 *        "columns": [
		 *          { "title": "My column title" },
		 *          null,
		 *          null,
		 *          null,
		 *          null
		 *        ]
		 *      } );
		 *    } );
		 */
		"sTitle": null,
	
	
		/**
		 * The type allows you to specify how the data for this column will be
		 * ordered. Four types (string, numeric, date and html (which will strip
		 * HTML tags before ordering)) are currently available. Note that only date
		 * formats understood by Javascript's Date() object will be accepted as type
		 * date. For example: "Mar 26, 2008 5:03 PM". May take the values: 'string',
		 * 'numeric', 'date' or 'html' (by default). Further types can be adding
		 * through plug-ins.
		 *  @type string
		 *  @default null <i>Auto-detected from raw data</i>
		 *
		 *  @name DataTable.defaults.column.type
		 *  @dtopt Columns
		 *
		 *  @example
		 *    // Using `columnDefs`
		 *    $(document).ready( function() {
		 *      $('#example').dataTable( {
		 *        "columnDefs": [
		 *          { "type": "html", "targets": [ 0 ] }
		 *        ]
		 *      } );
		 *    } );
		 *
		 *  @example
		 *    // Using `columns`
		 *    $(document).ready( function() {
		 *      $('#example').dataTable( {
		 *        "columns": [
		 *          { "type": "html" },
		 *          null,
		 *          null,
		 *          null,
		 *          null
		 *        ]
		 *      } );
		 *    } );
		 */
		"sType": null,
	
	
		/**
		 * Defining the width of the column, this parameter may take any CSS value
		 * (3em, 20px etc). DataTables applies 'smart' widths to columns which have not
		 * been given a specific width through this interface ensuring that the table
		 * remains readable.
		 *  @type string
		 *  @default null <i>Automatic</i>
		 *
		 *  @name DataTable.defaults.column.width
		 *  @dtopt Columns
		 *
		 *  @example
		 *    // Using `columnDefs`
		 *    $(document).ready( function() {
		 *      $('#example').dataTable( {
		 *        "columnDefs": [
		 *          { "width": "20%", "targets": [ 0 ] }
		 *        ]
		 *      } );
		 *    } );
		 *
		 *  @example
		 *    // Using `columns`
		 *    $(document).ready( function() {
		 *      $('#example').dataTable( {
		 *        "columns": [
		 *          { "width": "20%" },
		 *          null,
		 *          null,
		 *          null,
		 *          null
		 *        ]
		 *      } );
		 *    } );
		 */
		"sWidth": null
	};
	
	_fnHungarianMap( DataTable.defaults.column );
	
	
	
	/**
	 * DataTables settings object - this holds all the information needed for a
	 * given table, including configuration, data and current application of the
	 * table options. DataTables does not have a single instance for each DataTable
	 * with the settings attached to that instance, but rather instances of the
	 * DataTable "class" are created on-the-fly as needed (typically by a
	 * $().dataTable() call) and the settings object is then applied to that
	 * instance.
	 *
	 * Note that this object is related to {@link DataTable.defaults} but this
	 * one is the internal data store for DataTables's cache of columns. It should
	 * NOT be manipulated outside of DataTables. Any configuration should be done
	 * through the initialisation options.
	 *  @namespace
	 *  @todo Really should attach the settings object to individual instances so we
	 *    don't need to create new instances on each $().dataTable() call (if the
	 *    table already exists). It would also save passing oSettings around and
	 *    into every single function. However, this is a very significant
	 *    architecture change for DataTables and will almost certainly break
	 *    backwards compatibility with older installations. This is something that
	 *    will be done in 2.0.
	 */
	DataTable.models.oSettings = {
		/**
		 * Primary features of DataTables and their enablement state.
		 *  @namespace
		 */
		"oFeatures": {
	
			/**
			 * Flag to say if DataTables should automatically try to calculate the
			 * optimum table and columns widths (true) or not (false).
			 * Note that this parameter will be set by the initialisation routine. To
			 * set a default use {@link DataTable.defaults}.
			 *  @type boolean
			 */
			"bAutoWidth": null,
	
			/**
			 * Delay the creation of TR and TD elements until they are actually
			 * needed by a driven page draw. This can give a significant speed
			 * increase for Ajax source and Javascript source data, but makes no
			 * difference at all fro DOM and server-side processing tables.
			 * Note that this parameter will be set by the initialisation routine. To
			 * set a default use {@link DataTable.defaults}.
			 *  @type boolean
			 */
			"bDeferRender": null,
	
			/**
			 * Enable filtering on the table or not. Note that if this is disabled
			 * then there is no filtering at all on the table, including fnFilter.
			 * To just remove the filtering input use sDom and remove the 'f' option.
			 * Note that this parameter will be set by the initialisation routine. To
			 * set a default use {@link DataTable.defaults}.
			 *  @type boolean
			 */
			"bFilter": null,
	
			/**
			 * Table information element (the 'Showing x of y records' div) enable
			 * flag.
			 * Note that this parameter will be set by the initialisation routine. To
			 * set a default use {@link DataTable.defaults}.
			 *  @type boolean
			 */
			"bInfo": null,
	
			/**
			 * Present a user control allowing the end user to change the page size
			 * when pagination is enabled.
			 * Note that this parameter will be set by the initialisation routine. To
			 * set a default use {@link DataTable.defaults}.
			 *  @type boolean
			 */
			"bLengthChange": null,
	
			/**
			 * Pagination enabled or not. Note that if this is disabled then length
			 * changing must also be disabled.
			 * Note that this parameter will be set by the initialisation routine. To
			 * set a default use {@link DataTable.defaults}.
			 *  @type boolean
			 */
			"bPaginate": null,
	
			/**
			 * Processing indicator enable flag whenever DataTables is enacting a
			 * user request - typically an Ajax request for server-side processing.
			 * Note that this parameter will be set by the initialisation routine. To
			 * set a default use {@link DataTable.defaults}.
			 *  @type boolean
			 */
			"bProcessing": null,
	
			/**
			 * Server-side processing enabled flag - when enabled DataTables will
			 * get all data from the server for every draw - there is no filtering,
			 * sorting or paging done on the client-side.
			 * Note that this parameter will be set by the initialisation routine. To
			 * set a default use {@link DataTable.defaults}.
			 *  @type boolean
			 */
			"bServerSide": null,
	
			/**
			 * Sorting enablement flag.
			 * Note that this parameter will be set by the initialisation routine. To
			 * set a default use {@link DataTable.defaults}.
			 *  @type boolean
			 */
			"bSort": null,
	
			/**
			 * Multi-column sorting
			 * Note that this parameter will be set by the initialisation routine. To
			 * set a default use {@link DataTable.defaults}.
			 *  @type boolean
			 */
			"bSortMulti": null,
	
			/**
			 * Apply a class to the columns which are being sorted to provide a
			 * visual highlight or not. This can slow things down when enabled since
			 * there is a lot of DOM interaction.
			 * Note that this parameter will be set by the initialisation routine. To
			 * set a default use {@link DataTable.defaults}.
			 *  @type boolean
			 */
			"bSortClasses": null,
	
			/**
			 * State saving enablement flag.
			 * Note that this parameter will be set by the initialisation routine. To
			 * set a default use {@link DataTable.defaults}.
			 *  @type boolean
			 */
			"bStateSave": null
		},
	
	
		/**
		 * Scrolling settings for a table.
		 *  @namespace
		 */
		"oScroll": {
			/**
			 * When the table is shorter in height than sScrollY, collapse the
			 * table container down to the height of the table (when true).
			 * Note that this parameter will be set by the initialisation routine. To
			 * set a default use {@link DataTable.defaults}.
			 *  @type boolean
			 */
			"bCollapse": null,
	
			/**
			 * Width of the scrollbar for the web-browser's platform. Calculated
			 * during table initialisation.
			 *  @type int
			 *  @default 0
			 */
			"iBarWidth": 0,
	
			/**
			 * Viewport width for horizontal scrolling. Horizontal scrolling is
			 * disabled if an empty string.
			 * Note that this parameter will be set by the initialisation routine. To
			 * set a default use {@link DataTable.defaults}.
			 *  @type string
			 */
			"sX": null,
	
			/**
			 * Width to expand the table to when using x-scrolling. Typically you
			 * should not need to use this.
			 * Note that this parameter will be set by the initialisation routine. To
			 * set a default use {@link DataTable.defaults}.
			 *  @type string
			 *  @deprecated
			 */
			"sXInner": null,
	
			/**
			 * Viewport height for vertical scrolling. Vertical scrolling is disabled
			 * if an empty string.
			 * Note that this parameter will be set by the initialisation routine. To
			 * set a default use {@link DataTable.defaults}.
			 *  @type string
			 */
			"sY": null
		},
	
		/**
		 * Language information for the table.
		 *  @namespace
		 *  @extends DataTable.defaults.oLanguage
		 */
		"oLanguage": {
			/**
			 * Information callback function. See
			 * {@link DataTable.defaults.fnInfoCallback}
			 *  @type function
			 *  @default null
			 */
			"fnInfoCallback": null
		},
	
		/**
		 * Browser support parameters
		 *  @namespace
		 */
		"oBrowser": {
			/**
			 * Indicate if the browser incorrectly calculates width:100% inside a
			 * scrolling element (IE6/7)
			 *  @type boolean
			 *  @default false
			 */
			"bScrollOversize": false,
	
			/**
			 * Determine if the vertical scrollbar is on the right or left of the
			 * scrolling container - needed for rtl language layout, although not
			 * all browsers move the scrollbar (Safari).
			 *  @type boolean
			 *  @default false
			 */
			"bScrollbarLeft": false,
	
			/**
			 * Flag for if `getBoundingClientRect` is fully supported or not
			 *  @type boolean
			 *  @default false
			 */
			"bBounding": false,
	
			/**
			 * Browser scrollbar width
			 *  @type integer
			 *  @default 0
			 */
			"barWidth": 0
		},
	
	
		"ajax": null,
	
	
		/**
		 * Array referencing the nodes which are used for the features. The
		 * parameters of this object match what is allowed by sDom - i.e.
		 *   <ul>
		 *     <li>'l' - Length changing</li>
		 *     <li>'f' - Filtering input</li>
		 *     <li>'t' - The table!</li>
		 *     <li>'i' - Information</li>
		 *     <li>'p' - Pagination</li>
		 *     <li>'r' - pRocessing</li>
		 *   </ul>
		 *  @type array
		 *  @default []
		 */
		"aanFeatures": [],
	
		/**
		 * Store data information - see {@link DataTable.models.oRow} for detailed
		 * information.
		 *  @type array
		 *  @default []
		 */
		"aoData": [],
	
		/**
		 * Array of indexes which are in the current display (after filtering etc)
		 *  @type array
		 *  @default []
		 */
		"aiDisplay": [],
	
		/**
		 * Array of indexes for display - no filtering
		 *  @type array
		 *  @default []
		 */
		"aiDisplayMaster": [],
	
		/**
		 * Map of row ids to data indexes
		 *  @type object
		 *  @default {}
		 */
		"aIds": {},
	
		/**
		 * Store information about each column that is in use
		 *  @type array
		 *  @default []
		 */
		"aoColumns": [],
	
		/**
		 * Store information about the table's header
		 *  @type array
		 *  @default []
		 */
		"aoHeader": [],
	
		/**
		 * Store information about the table's footer
		 *  @type array
		 *  @default []
		 */
		"aoFooter": [],
	
		/**
		 * Store the applied global search information in case we want to force a
		 * research or compare the old search to a new one.
		 * Note that this parameter will be set by the initialisation routine. To
		 * set a default use {@link DataTable.defaults}.
		 *  @namespace
		 *  @extends DataTable.models.oSearch
		 */
		"oPreviousSearch": {},
	
		/**
		 * Store the applied search for each column - see
		 * {@link DataTable.models.oSearch} for the format that is used for the
		 * filtering information for each column.
		 *  @type array
		 *  @default []
		 */
		"aoPreSearchCols": [],
	
		/**
		 * Sorting that is applied to the table. Note that the inner arrays are
		 * used in the following manner:
		 * <ul>
		 *   <li>Index 0 - column number</li>
		 *   <li>Index 1 - current sorting direction</li>
		 * </ul>
		 * Note that this parameter will be set by the initialisation routine. To
		 * set a default use {@link DataTable.defaults}.
		 *  @type array
		 *  @todo These inner arrays should really be objects
		 */
		"aaSorting": null,
	
		/**
		 * Sorting that is always applied to the table (i.e. prefixed in front of
		 * aaSorting).
		 * Note that this parameter will be set by the initialisation routine. To
		 * set a default use {@link DataTable.defaults}.
		 *  @type array
		 *  @default []
		 */
		"aaSortingFixed": [],
	
		/**
		 * Classes to use for the striping of a table.
		 * Note that this parameter will be set by the initialisation routine. To
		 * set a default use {@link DataTable.defaults}.
		 *  @type array
		 *  @default []
		 */
		"asStripeClasses": null,
	
		/**
		 * If restoring a table - we should restore its striping classes as well
		 *  @type array
		 *  @default []
		 */
		"asDestroyStripes": [],
	
		/**
		 * If restoring a table - we should restore its width
		 *  @type int
		 *  @default 0
		 */
		"sDestroyWidth": 0,
	
		/**
		 * Callback functions array for every time a row is inserted (i.e. on a draw).
		 *  @type array
		 *  @default []
		 */
		"aoRowCallback": [],
	
		/**
		 * Callback functions for the header on each draw.
		 *  @type array
		 *  @default []
		 */
		"aoHeaderCallback": [],
	
		/**
		 * Callback function for the footer on each draw.
		 *  @type array
		 *  @default []
		 */
		"aoFooterCallback": [],
	
		/**
		 * Array of callback functions for draw callback functions
		 *  @type array
		 *  @default []
		 */
		"aoDrawCallback": [],
	
		/**
		 * Array of callback functions for row created function
		 *  @type array
		 *  @default []
		 */
		"aoRowCreatedCallback": [],
	
		/**
		 * Callback functions for just before the table is redrawn. A return of
		 * false will be used to cancel the draw.
		 *  @type array
		 *  @default []
		 */
		"aoPreDrawCallback": [],
	
		/**
		 * Callback functions for when the table has been initialised.
		 *  @type array
		 *  @default []
		 */
		"aoInitComplete": [],
	
	
		/**
		 * Callbacks for modifying the settings to be stored for state saving, prior to
		 * saving state.
		 *  @type array
		 *  @default []
		 */
		"aoStateSaveParams": [],
	
		/**
		 * Callbacks for modifying the settings that have been stored for state saving
		 * prior to using the stored values to restore the state.
		 *  @type array
		 *  @default []
		 */
		"aoStateLoadParams": [],
	
		/**
		 * Callbacks for operating on the settings object once the saved state has been
		 * loaded
		 *  @type array
		 *  @default []
		 */
		"aoStateLoaded": [],
	
		/**
		 * Cache the table ID for quick access
		 *  @type string
		 *  @default <i>Empty string</i>
		 */
		"sTableId": "",
	
		/**
		 * The TABLE node for the main table
		 *  @type node
		 *  @default null
		 */
		"nTable": null,
	
		/**
		 * Permanent ref to the thead element
		 *  @type node
		 *  @default null
		 */
		"nTHead": null,
	
		/**
		 * Permanent ref to the tfoot element - if it exists
		 *  @type node
		 *  @default null
		 */
		"nTFoot": null,
	
		/**
		 * Permanent ref to the tbody element
		 *  @type node
		 *  @default null
		 */
		"nTBody": null,
	
		/**
		 * Cache the wrapper node (contains all DataTables controlled elements)
		 *  @type node
		 *  @default null
		 */
		"nTableWrapper": null,
	
		/**
		 * Indicate if when using server-side processing the loading of data
		 * should be deferred until the second draw.
		 * Note that this parameter will be set by the initialisation routine. To
		 * set a default use {@link DataTable.defaults}.
		 *  @type boolean
		 *  @default false
		 */
		"bDeferLoading": false,
	
		/**
		 * Indicate if all required information has been read in
		 *  @type boolean
		 *  @default false
		 */
		"bInitialised": false,
	
		/**
		 * Information about open rows. Each object in the array has the parameters
		 * 'nTr' and 'nParent'
		 *  @type array
		 *  @default []
		 */
		"aoOpenRows": [],
	
		/**
		 * Dictate the positioning of DataTables' control elements - see
		 * {@link DataTable.model.oInit.sDom}.
		 * Note that this parameter will be set by the initialisation routine. To
		 * set a default use {@link DataTable.defaults}.
		 *  @type string
		 *  @default null
		 */
		"sDom": null,
	
		/**
		 * Search delay (in mS)
		 *  @type integer
		 *  @default null
		 */
		"searchDelay": null,
	
		/**
		 * Which type of pagination should be used.
		 * Note that this parameter will be set by the initialisation routine. To
		 * set a default use {@link DataTable.defaults}.
		 *  @type string
		 *  @default two_button
		 */
		"sPaginationType": "two_button",
	
		/**
		 * The state duration (for `stateSave`) in seconds.
		 * Note that this parameter will be set by the initialisation routine. To
		 * set a default use {@link DataTable.defaults}.
		 *  @type int
		 *  @default 0
		 */
		"iStateDuration": 0,
	
		/**
		 * Array of callback functions for state saving. Each array element is an
		 * object with the following parameters:
		 *   <ul>
		 *     <li>function:fn - function to call. Takes two parameters, oSettings
		 *       and the JSON string to save that has been thus far created. Returns
		 *       a JSON string to be inserted into a json object
		 *       (i.e. '"param": [ 0, 1, 2]')</li>
		 *     <li>string:sName - name of callback</li>
		 *   </ul>
		 *  @type array
		 *  @default []
		 */
		"aoStateSave": [],
	
		/**
		 * Array of callback functions for state loading. Each array element is an
		 * object with the following parameters:
		 *   <ul>
		 *     <li>function:fn - function to call. Takes two parameters, oSettings
		 *       and the object stored. May return false to cancel state loading</li>
		 *     <li>string:sName - name of callback</li>
		 *   </ul>
		 *  @type array
		 *  @default []
		 */
		"aoStateLoad": [],
	
		/**
		 * State that was saved. Useful for back reference
		 *  @type object
		 *  @default null
		 */
		"oSavedState": null,
	
		/**
		 * State that was loaded. Useful for back reference
		 *  @type object
		 *  @default null
		 */
		"oLoadedState": null,
	
		/**
		 * Source url for AJAX data for the table.
		 * Note that this parameter will be set by the initialisation routine. To
		 * set a default use {@link DataTable.defaults}.
		 *  @type string
		 *  @default null
		 */
		"sAjaxSource": null,
	
		/**
		 * Property from a given object from which to read the table data from. This
		 * can be an empty string (when not server-side processing), in which case
		 * it is  assumed an an array is given directly.
		 * Note that this parameter will be set by the initialisation routine. To
		 * set a default use {@link DataTable.defaults}.
		 *  @type string
		 */
		"sAjaxDataProp": null,
	
		/**
		 * Note if draw should be blocked while getting data
		 *  @type boolean
		 *  @default true
		 */
		"bAjaxDataGet": true,
	
		/**
		 * The last jQuery XHR object that was used for server-side data gathering.
		 * This can be used for working with the XHR information in one of the
		 * callbacks
		 *  @type object
		 *  @default null
		 */
		"jqXHR": null,
	
		/**
		 * JSON returned from the server in the last Ajax request
		 *  @type object
		 *  @default undefined
		 */
		"json": undefined,
	
		/**
		 * Data submitted as part of the last Ajax request
		 *  @type object
		 *  @default undefined
		 */
		"oAjaxData": undefined,
	
		/**
		 * Function to get the server-side data.
		 * Note that this parameter will be set by the initialisation routine. To
		 * set a default use {@link DataTable.defaults}.
		 *  @type function
		 */
		"fnServerData": null,
	
		/**
		 * Functions which are called prior to sending an Ajax request so extra
		 * parameters can easily be sent to the server
		 *  @type array
		 *  @default []
		 */
		"aoServerParams": [],
	
		/**
		 * Send the XHR HTTP method - GET or POST (could be PUT or DELETE if
		 * required).
		 * Note that this parameter will be set by the initialisation routine. To
		 * set a default use {@link DataTable.defaults}.
		 *  @type string
		 */
		"sServerMethod": null,
	
		/**
		 * Format numbers for display.
		 * Note that this parameter will be set by the initialisation routine. To
		 * set a default use {@link DataTable.defaults}.
		 *  @type function
		 */
		"fnFormatNumber": null,
	
		/**
		 * List of options that can be used for the user selectable length menu.
		 * Note that this parameter will be set by the initialisation routine. To
		 * set a default use {@link DataTable.defaults}.
		 *  @type array
		 *  @default []
		 */
		"aLengthMenu": null,
	
		/**
		 * Counter for the draws that the table does. Also used as a tracker for
		 * server-side processing
		 *  @type int
		 *  @default 0
		 */
		"iDraw": 0,
	
		/**
		 * Indicate if a redraw is being done - useful for Ajax
		 *  @type boolean
		 *  @default false
		 */
		"bDrawing": false,
	
		/**
		 * Draw index (iDraw) of the last error when parsing the returned data
		 *  @type int
		 *  @default -1
		 */
		"iDrawError": -1,
	
		/**
		 * Paging display length
		 *  @type int
		 *  @default 10
		 */
		"_iDisplayLength": 10,
	
		/**
		 * Paging start point - aiDisplay index
		 *  @type int
		 *  @default 0
		 */
		"_iDisplayStart": 0,
	
		/**
		 * Server-side processing - number of records in the result set
		 * (i.e. before filtering), Use fnRecordsTotal rather than
		 * this property to get the value of the number of records, regardless of
		 * the server-side processing setting.
		 *  @type int
		 *  @default 0
		 *  @private
		 */
		"_iRecordsTotal": 0,
	
		/**
		 * Server-side processing - number of records in the current display set
		 * (i.e. after filtering). Use fnRecordsDisplay rather than
		 * this property to get the value of the number of records, regardless of
		 * the server-side processing setting.
		 *  @type boolean
		 *  @default 0
		 *  @private
		 */
		"_iRecordsDisplay": 0,
	
		/**
		 * The classes to use for the table
		 *  @type object
		 *  @default {}
		 */
		"oClasses": {},
	
		/**
		 * Flag attached to the settings object so you can check in the draw
		 * callback if filtering has been done in the draw. Deprecated in favour of
		 * events.
		 *  @type boolean
		 *  @default false
		 *  @deprecated
		 */
		"bFiltered": false,
	
		/**
		 * Flag attached to the settings object so you can check in the draw
		 * callback if sorting has been done in the draw. Deprecated in favour of
		 * events.
		 *  @type boolean
		 *  @default false
		 *  @deprecated
		 */
		"bSorted": false,
	
		/**
		 * Indicate that if multiple rows are in the header and there is more than
		 * one unique cell per column, if the top one (true) or bottom one (false)
		 * should be used for sorting / title by DataTables.
		 * Note that this parameter will be set by the initialisation routine. To
		 * set a default use {@link DataTable.defaults}.
		 *  @type boolean
		 */
		"bSortCellsTop": null,
	
		/**
		 * Initialisation object that is used for the table
		 *  @type object
		 *  @default null
		 */
		"oInit": null,
	
		/**
		 * Destroy callback functions - for plug-ins to attach themselves to the
		 * destroy so they can clean up markup and events.
		 *  @type array
		 *  @default []
		 */
		"aoDestroyCallback": [],
	
	
		/**
		 * Get the number of records in the current record set, before filtering
		 *  @type function
		 */
		"fnRecordsTotal": function ()
		{
			return _fnDataSource( this ) == 'ssp' ?
				this._iRecordsTotal * 1 :
				this.aiDisplayMaster.length;
		},
	
		/**
		 * Get the number of records in the current record set, after filtering
		 *  @type function
		 */
		"fnRecordsDisplay": function ()
		{
			return _fnDataSource( this ) == 'ssp' ?
				this._iRecordsDisplay * 1 :
				this.aiDisplay.length;
		},
	
		/**
		 * Get the display end point - aiDisplay index
		 *  @type function
		 */
		"fnDisplayEnd": function ()
		{
			var
				len      = this._iDisplayLength,
				start    = this._iDisplayStart,
				calc     = start + len,
				records  = this.aiDisplay.length,
				features = this.oFeatures,
				paginate = features.bPaginate;
	
			if ( features.bServerSide ) {
				return paginate === false || len === -1 ?
					start + records :
					Math.min( start+len, this._iRecordsDisplay );
			}
			else {
				return ! paginate || calc>records || len===-1 ?
					records :
					calc;
			}
		},
	
		/**
		 * The DataTables object for this table
		 *  @type object
		 *  @default null
		 */
		"oInstance": null,
	
		/**
		 * Unique identifier for each instance of the DataTables object. If there
		 * is an ID on the table node, then it takes that value, otherwise an
		 * incrementing internal counter is used.
		 *  @type string
		 *  @default null
		 */
		"sInstance": null,
	
		/**
		 * tabindex attribute value that is added to DataTables control elements, allowing
		 * keyboard navigation of the table and its controls.
		 */
		"iTabIndex": 0,
	
		/**
		 * DIV container for the footer scrolling table if scrolling
		 */
		"nScrollHead": null,
	
		/**
		 * DIV container for the footer scrolling table if scrolling
		 */
		"nScrollFoot": null,
	
		/**
		 * Last applied sort
		 *  @type array
		 *  @default []
		 */
		"aLastSort": [],
	
		/**
		 * Stored plug-in instances
		 *  @type object
		 *  @default {}
		 */
		"oPlugins": {},
	
		/**
		 * Function used to get a row's id from the row's data
		 *  @type function
		 *  @default null
		 */
		"rowIdFn": null,
	
		/**
		 * Data location where to store a row's id
		 *  @type string
		 *  @default null
		 */
		"rowId": null
	};

	/**
	 * Extension object for DataTables that is used to provide all extension
	 * options.
	 *
	 * Note that the `DataTable.ext` object is available through
	 * `jQuery.fn.dataTable.ext` where it may be accessed and manipulated. It is
	 * also aliased to `jQuery.fn.dataTableExt` for historic reasons.
	 *  @namespace
	 *  @extends DataTable.models.ext
	 */
	
	
	/**
	 * DataTables extensions
	 * 
	 * This namespace acts as a collection area for plug-ins that can be used to
	 * extend DataTables capabilities. Indeed many of the build in methods
	 * use this method to provide their own capabilities (sorting methods for
	 * example).
	 *
	 * Note that this namespace is aliased to `jQuery.fn.dataTableExt` for legacy
	 * reasons
	 *
	 *  @namespace
	 */
	DataTable.ext = _ext = {
		/**
		 * Buttons. For use with the Buttons extension for DataTables. This is
		 * defined here so other extensions can define buttons regardless of load
		 * order. It is _not_ used by DataTables core.
		 *
		 *  @type object
		 *  @default {}
		 */
		buttons: {},
	
	
		/**
		 * Element class names
		 *
		 *  @type object
		 *  @default {}
		 */
		classes: {},
	
	
		/**
		 * DataTables build type (expanded by the download builder)
		 *
		 *  @type string
		 */
		build:"dt/jq-3.3.1/dt-1.10.18/e-1.9.0/r-2.2.2/sl-1.3.0",
	
	
		/**
		 * Error reporting.
		 * 
		 * How should DataTables report an error. Can take the value 'alert',
		 * 'throw', 'none' or a function.
		 *
		 *  @type string|function
		 *  @default alert
		 */
		errMode: "alert",
	
	
		/**
		 * Feature plug-ins.
		 * 
		 * This is an array of objects which describe the feature plug-ins that are
		 * available to DataTables. These feature plug-ins are then available for
		 * use through the `dom` initialisation option.
		 * 
		 * Each feature plug-in is described by an object which must have the
		 * following properties:
		 * 
		 * * `fnInit` - function that is used to initialise the plug-in,
		 * * `cFeature` - a character so the feature can be enabled by the `dom`
		 *   instillation option. This is case sensitive.
		 *
		 * The `fnInit` function has the following input parameters:
		 *
		 * 1. `{object}` DataTables settings object: see
		 *    {@link DataTable.models.oSettings}
		 *
		 * And the following return is expected:
		 * 
		 * * {node|null} The element which contains your feature. Note that the
		 *   return may also be void if your plug-in does not require to inject any
		 *   DOM elements into DataTables control (`dom`) - for example this might
		 *   be useful when developing a plug-in which allows table control via
		 *   keyboard entry
		 *
		 *  @type array
		 *
		 *  @example
		 *    $.fn.dataTable.ext.features.push( {
		 *      "fnInit": function( oSettings ) {
		 *        return new TableTools( { "oDTSettings": oSettings } );
		 *      },
		 *      "cFeature": "T"
		 *    } );
		 */
		feature: [],
	
	
		/**
		 * Row searching.
		 * 
		 * This method of searching is complimentary to the default type based
		 * searching, and a lot more comprehensive as it allows you complete control
		 * over the searching logic. Each element in this array is a function
		 * (parameters described below) that is called for every row in the table,
		 * and your logic decides if it should be included in the searching data set
		 * or not.
		 *
		 * Searching functions have the following input parameters:
		 *
		 * 1. `{object}` DataTables settings object: see
		 *    {@link DataTable.models.oSettings}
		 * 2. `{array|object}` Data for the row to be processed (same as the
		 *    original format that was passed in as the data source, or an array
		 *    from a DOM data source
		 * 3. `{int}` Row index ({@link DataTable.models.oSettings.aoData}), which
		 *    can be useful to retrieve the `TR` element if you need DOM interaction.
		 *
		 * And the following return is expected:
		 *
		 * * {boolean} Include the row in the searched result set (true) or not
		 *   (false)
		 *
		 * Note that as with the main search ability in DataTables, technically this
		 * is "filtering", since it is subtractive. However, for consistency in
		 * naming we call it searching here.
		 *
		 *  @type array
		 *  @default []
		 *
		 *  @example
		 *    // The following example shows custom search being applied to the
		 *    // fourth column (i.e. the data[3] index) based on two input values
		 *    // from the end-user, matching the data in a certain range.
		 *    $.fn.dataTable.ext.search.push(
		 *      function( settings, data, dataIndex ) {
		 *        var min = document.getElementById('min').value * 1;
		 *        var max = document.getElementById('max').value * 1;
		 *        var version = data[3] == "-" ? 0 : data[3]*1;
		 *
		 *        if ( min == "" && max == "" ) {
		 *          return true;
		 *        }
		 *        else if ( min == "" && version < max ) {
		 *          return true;
		 *        }
		 *        else if ( min < version && "" == max ) {
		 *          return true;
		 *        }
		 *        else if ( min < version && version < max ) {
		 *          return true;
		 *        }
		 *        return false;
		 *      }
		 *    );
		 */
		search: [],
	
	
		/**
		 * Selector extensions
		 *
		 * The `selector` option can be used to extend the options available for the
		 * selector modifier options (`selector-modifier` object data type) that
		 * each of the three built in selector types offer (row, column and cell +
		 * their plural counterparts). For example the Select extension uses this
		 * mechanism to provide an option to select only rows, columns and cells
		 * that have been marked as selected by the end user (`{selected: true}`),
		 * which can be used in conjunction with the existing built in selector
		 * options.
		 *
		 * Each property is an array to which functions can be pushed. The functions
		 * take three attributes:
		 *
		 * * Settings object for the host table
		 * * Options object (`selector-modifier` object type)
		 * * Array of selected item indexes
		 *
		 * The return is an array of the resulting item indexes after the custom
		 * selector has been applied.
		 *
		 *  @type object
		 */
		selector: {
			cell: [],
			column: [],
			row: []
		},
	
	
		/**
		 * Internal functions, exposed for used in plug-ins.
		 * 
		 * Please note that you should not need to use the internal methods for
		 * anything other than a plug-in (and even then, try to avoid if possible).
		 * The internal function may change between releases.
		 *
		 *  @type object
		 *  @default {}
		 */
		internal: {},
	
	
		/**
		 * Legacy configuration options. Enable and disable legacy options that
		 * are available in DataTables.
		 *
		 *  @type object
		 */
		legacy: {
			/**
			 * Enable / disable DataTables 1.9 compatible server-side processing
			 * requests
			 *
			 *  @type boolean
			 *  @default null
			 */
			ajax: null
		},
	
	
		/**
		 * Pagination plug-in methods.
		 * 
		 * Each entry in this object is a function and defines which buttons should
		 * be shown by the pagination rendering method that is used for the table:
		 * {@link DataTable.ext.renderer.pageButton}. The renderer addresses how the
		 * buttons are displayed in the document, while the functions here tell it
		 * what buttons to display. This is done by returning an array of button
		 * descriptions (what each button will do).
		 *
		 * Pagination types (the four built in options and any additional plug-in
		 * options defined here) can be used through the `paginationType`
		 * initialisation parameter.
		 *
		 * The functions defined take two parameters:
		 *
		 * 1. `{int} page` The current page index
		 * 2. `{int} pages` The number of pages in the table
		 *
		 * Each function is expected to return an array where each element of the
		 * array can be one of:
		 *
		 * * `first` - Jump to first page when activated
		 * * `last` - Jump to last page when activated
		 * * `previous` - Show previous page when activated
		 * * `next` - Show next page when activated
		 * * `{int}` - Show page of the index given
		 * * `{array}` - A nested array containing the above elements to add a
		 *   containing 'DIV' element (might be useful for styling).
		 *
		 * Note that DataTables v1.9- used this object slightly differently whereby
		 * an object with two functions would be defined for each plug-in. That
		 * ability is still supported by DataTables 1.10+ to provide backwards
		 * compatibility, but this option of use is now decremented and no longer
		 * documented in DataTables 1.10+.
		 *
		 *  @type object
		 *  @default {}
		 *
		 *  @example
		 *    // Show previous, next and current page buttons only
		 *    $.fn.dataTableExt.oPagination.current = function ( page, pages ) {
		 *      return [ 'previous', page, 'next' ];
		 *    };
		 */
		pager: {},
	
	
		renderer: {
			pageButton: {},
			header: {}
		},
	
	
		/**
		 * Ordering plug-ins - custom data source
		 * 
		 * The extension options for ordering of data available here is complimentary
		 * to the default type based ordering that DataTables typically uses. It
		 * allows much greater control over the the data that is being used to
		 * order a column, but is necessarily therefore more complex.
		 * 
		 * This type of ordering is useful if you want to do ordering based on data
		 * live from the DOM (for example the contents of an 'input' element) rather
		 * than just the static string that DataTables knows of.
		 * 
		 * The way these plug-ins work is that you create an array of the values you
		 * wish to be ordering for the column in question and then return that
		 * array. The data in the array much be in the index order of the rows in
		 * the table (not the currently ordering order!). Which order data gathering
		 * function is run here depends on the `dt-init columns.orderDataType`
		 * parameter that is used for the column (if any).
		 *
		 * The functions defined take two parameters:
		 *
		 * 1. `{object}` DataTables settings object: see
		 *    {@link DataTable.models.oSettings}
		 * 2. `{int}` Target column index
		 *
		 * Each function is expected to return an array:
		 *
		 * * `{array}` Data for the column to be ordering upon
		 *
		 *  @type array
		 *
		 *  @example
		 *    // Ordering using `input` node values
		 *    $.fn.dataTable.ext.order['dom-text'] = function  ( settings, col )
		 *    {
		 *      return this.api().column( col, {order:'index'} ).nodes().map( function ( td, i ) {
		 *        return $('input', td).val();
		 *      } );
		 *    }
		 */
		order: {},
	
	
		/**
		 * Type based plug-ins.
		 *
		 * Each column in DataTables has a type assigned to it, either by automatic
		 * detection or by direct assignment using the `type` option for the column.
		 * The type of a column will effect how it is ordering and search (plug-ins
		 * can also make use of the column type if required).
		 *
		 * @namespace
		 */
		type: {
			/**
			 * Type detection functions.
			 *
			 * The functions defined in this object are used to automatically detect
			 * a column's type, making initialisation of DataTables super easy, even
			 * when complex data is in the table.
			 *
			 * The functions defined take two parameters:
			 *
		     *  1. `{*}` Data from the column cell to be analysed
		     *  2. `{settings}` DataTables settings object. This can be used to
		     *     perform context specific type detection - for example detection
		     *     based on language settings such as using a comma for a decimal
		     *     place. Generally speaking the options from the settings will not
		     *     be required
			 *
			 * Each function is expected to return:
			 *
			 * * `{string|null}` Data type detected, or null if unknown (and thus
			 *   pass it on to the other type detection functions.
			 *
			 *  @type array
			 *
			 *  @example
			 *    // Currency type detection plug-in:
			 *    $.fn.dataTable.ext.type.detect.push(
			 *      function ( data, settings ) {
			 *        // Check the numeric part
			 *        if ( ! data.substring(1).match(/[0-9]/) ) {
			 *          return null;
			 *        }
			 *
			 *        // Check prefixed by currency
			 *        if ( data.charAt(0) == '$' || data.charAt(0) == '&pound;' ) {
			 *          return 'currency';
			 *        }
			 *        return null;
			 *      }
			 *    );
			 */
			detect: [],
	
	
			/**
			 * Type based search formatting.
			 *
			 * The type based searching functions can be used to pre-format the
			 * data to be search on. For example, it can be used to strip HTML
			 * tags or to de-format telephone numbers for numeric only searching.
			 *
			 * Note that is a search is not defined for a column of a given type,
			 * no search formatting will be performed.
			 * 
			 * Pre-processing of searching data plug-ins - When you assign the sType
			 * for a column (or have it automatically detected for you by DataTables
			 * or a type detection plug-in), you will typically be using this for
			 * custom sorting, but it can also be used to provide custom searching
			 * by allowing you to pre-processing the data and returning the data in
			 * the format that should be searched upon. This is done by adding
			 * functions this object with a parameter name which matches the sType
			 * for that target column. This is the corollary of <i>afnSortData</i>
			 * for searching data.
			 *
			 * The functions defined take a single parameter:
			 *
		     *  1. `{*}` Data from the column cell to be prepared for searching
			 *
			 * Each function is expected to return:
			 *
			 * * `{string|null}` Formatted string that will be used for the searching.
			 *
			 *  @type object
			 *  @default {}
			 *
			 *  @example
			 *    $.fn.dataTable.ext.type.search['title-numeric'] = function ( d ) {
			 *      return d.replace(/\n/g," ").replace( /<.*?>/g, "" );
			 *    }
			 */
			search: {},
	
	
			/**
			 * Type based ordering.
			 *
			 * The column type tells DataTables what ordering to apply to the table
			 * when a column is sorted upon. The order for each type that is defined,
			 * is defined by the functions available in this object.
			 *
			 * Each ordering option can be described by three properties added to
			 * this object:
			 *
			 * * `{type}-pre` - Pre-formatting function
			 * * `{type}-asc` - Ascending order function
			 * * `{type}-desc` - Descending order function
			 *
			 * All three can be used together, only `{type}-pre` or only
			 * `{type}-asc` and `{type}-desc` together. It is generally recommended
			 * that only `{type}-pre` is used, as this provides the optimal
			 * implementation in terms of speed, although the others are provided
			 * for compatibility with existing Javascript sort functions.
			 *
			 * `{type}-pre`: Functions defined take a single parameter:
			 *
		     *  1. `{*}` Data from the column cell to be prepared for ordering
			 *
			 * And return:
			 *
			 * * `{*}` Data to be sorted upon
			 *
			 * `{type}-asc` and `{type}-desc`: Functions are typical Javascript sort
			 * functions, taking two parameters:
			 *
		     *  1. `{*}` Data to compare to the second parameter
		     *  2. `{*}` Data to compare to the first parameter
			 *
			 * And returning:
			 *
			 * * `{*}` Ordering match: <0 if first parameter should be sorted lower
			 *   than the second parameter, ===0 if the two parameters are equal and
			 *   >0 if the first parameter should be sorted height than the second
			 *   parameter.
			 * 
			 *  @type object
			 *  @default {}
			 *
			 *  @example
			 *    // Numeric ordering of formatted numbers with a pre-formatter
			 *    $.extend( $.fn.dataTable.ext.type.order, {
			 *      "string-pre": function(x) {
			 *        a = (a === "-" || a === "") ? 0 : a.replace( /[^\d\-\.]/g, "" );
			 *        return parseFloat( a );
			 *      }
			 *    } );
			 *
			 *  @example
			 *    // Case-sensitive string ordering, with no pre-formatting method
			 *    $.extend( $.fn.dataTable.ext.order, {
			 *      "string-case-asc": function(x,y) {
			 *        return ((x < y) ? -1 : ((x > y) ? 1 : 0));
			 *      },
			 *      "string-case-desc": function(x,y) {
			 *        return ((x < y) ? 1 : ((x > y) ? -1 : 0));
			 *      }
			 *    } );
			 */
			order: {}
		},
	
		/**
		 * Unique DataTables instance counter
		 *
		 * @type int
		 * @private
		 */
		_unique: 0,
	
	
		//
		// Depreciated
		// The following properties are retained for backwards compatiblity only.
		// The should not be used in new projects and will be removed in a future
		// version
		//
	
		/**
		 * Version check function.
		 *  @type function
		 *  @depreciated Since 1.10
		 */
		fnVersionCheck: DataTable.fnVersionCheck,
	
	
		/**
		 * Index for what 'this' index API functions should use
		 *  @type int
		 *  @deprecated Since v1.10
		 */
		iApiIndex: 0,
	
	
		/**
		 * jQuery UI class container
		 *  @type object
		 *  @deprecated Since v1.10
		 */
		oJUIClasses: {},
	
	
		/**
		 * Software version
		 *  @type string
		 *  @deprecated Since v1.10
		 */
		sVersion: DataTable.version
	};
	
	
	//
	// Backwards compatibility. Alias to pre 1.10 Hungarian notation counter parts
	//
	$.extend( _ext, {
		afnFiltering: _ext.search,
		aTypes:       _ext.type.detect,
		ofnSearch:    _ext.type.search,
		oSort:        _ext.type.order,
		afnSortData:  _ext.order,
		aoFeatures:   _ext.feature,
		oApi:         _ext.internal,
		oStdClasses:  _ext.classes,
		oPagination:  _ext.pager
	} );
	
	
	$.extend( DataTable.ext.classes, {
		"sTable": "dataTable",
		"sNoFooter": "no-footer",
	
		/* Paging buttons */
		"sPageButton": "paginate_button",
		"sPageButtonActive": "current",
		"sPageButtonDisabled": "disabled",
	
		/* Striping classes */
		"sStripeOdd": "odd",
		"sStripeEven": "even",
	
		/* Empty row */
		"sRowEmpty": "dataTables_empty",
	
		/* Features */
		"sWrapper": "dataTables_wrapper",
		"sFilter": "dataTables_filter",
		"sInfo": "dataTables_info",
		"sPaging": "dataTables_paginate paging_", /* Note that the type is postfixed */
		"sLength": "dataTables_length",
		"sProcessing": "dataTables_processing",
	
		/* Sorting */
		"sSortAsc": "sorting_asc",
		"sSortDesc": "sorting_desc",
		"sSortable": "sorting", /* Sortable in both directions */
		"sSortableAsc": "sorting_asc_disabled",
		"sSortableDesc": "sorting_desc_disabled",
		"sSortableNone": "sorting_disabled",
		"sSortColumn": "sorting_", /* Note that an int is postfixed for the sorting order */
	
		/* Filtering */
		"sFilterInput": "",
	
		/* Page length */
		"sLengthSelect": "",
	
		/* Scrolling */
		"sScrollWrapper": "dataTables_scroll",
		"sScrollHead": "dataTables_scrollHead",
		"sScrollHeadInner": "dataTables_scrollHeadInner",
		"sScrollBody": "dataTables_scrollBody",
		"sScrollFoot": "dataTables_scrollFoot",
		"sScrollFootInner": "dataTables_scrollFootInner",
	
		/* Misc */
		"sHeaderTH": "",
		"sFooterTH": "",
	
		// Deprecated
		"sSortJUIAsc": "",
		"sSortJUIDesc": "",
		"sSortJUI": "",
		"sSortJUIAscAllowed": "",
		"sSortJUIDescAllowed": "",
		"sSortJUIWrapper": "",
		"sSortIcon": "",
		"sJUIHeader": "",
		"sJUIFooter": ""
	} );
	
	
	var extPagination = DataTable.ext.pager;
	
	function _numbers ( page, pages ) {
		var
			numbers = [],
			buttons = extPagination.numbers_length,
			half = Math.floor( buttons / 2 ),
			i = 1;
	
		if ( pages <= buttons ) {
			numbers = _range( 0, pages );
		}
		else if ( page <= half ) {
			numbers = _range( 0, buttons-2 );
			numbers.push( 'ellipsis' );
			numbers.push( pages-1 );
		}
		else if ( page >= pages - 1 - half ) {
			numbers = _range( pages-(buttons-2), pages );
			numbers.splice( 0, 0, 'ellipsis' ); // no unshift in ie6
			numbers.splice( 0, 0, 0 );
		}
		else {
			numbers = _range( page-half+2, page+half-1 );
			numbers.push( 'ellipsis' );
			numbers.push( pages-1 );
			numbers.splice( 0, 0, 'ellipsis' );
			numbers.splice( 0, 0, 0 );
		}
	
		numbers.DT_el = 'span';
		return numbers;
	}
	
	
	$.extend( extPagination, {
		simple: function ( page, pages ) {
			return [ 'previous', 'next' ];
		},
	
		full: function ( page, pages ) {
			return [  'first', 'previous', 'next', 'last' ];
		},
	
		numbers: function ( page, pages ) {
			return [ _numbers(page, pages) ];
		},
	
		simple_numbers: function ( page, pages ) {
			return [ 'previous', _numbers(page, pages), 'next' ];
		},
	
		full_numbers: function ( page, pages ) {
			return [ 'first', 'previous', _numbers(page, pages), 'next', 'last' ];
		},
		
		first_last_numbers: function (page, pages) {
	 		return ['first', _numbers(page, pages), 'last'];
	 	},
	
		// For testing and plug-ins to use
		_numbers: _numbers,
	
		// Number of number buttons (including ellipsis) to show. _Must be odd!_
		numbers_length: 7
	} );
	
	
	$.extend( true, DataTable.ext.renderer, {
		pageButton: {
			_: function ( settings, host, idx, buttons, page, pages ) {
				var classes = settings.oClasses;
				var lang = settings.oLanguage.oPaginate;
				var aria = settings.oLanguage.oAria.paginate || {};
				var btnDisplay, btnClass, counter=0;
	
				var attach = function( container, buttons ) {
					var i, ien, node, button;
					var clickHandler = function ( e ) {
						_fnPageChange( settings, e.data.action, true );
					};
	
					for ( i=0, ien=buttons.length ; i<ien ; i++ ) {
						button = buttons[i];
	
						if ( $.isArray( button ) ) {
							var inner = $( '<'+(button.DT_el || 'div')+'/>' )
								.appendTo( container );
							attach( inner, button );
						}
						else {
							btnDisplay = null;
							btnClass = '';
	
							switch ( button ) {
								case 'ellipsis':
									container.append('<span class="ellipsis">&#x2026;</span>');
									break;
	
								case 'first':
									btnDisplay = lang.sFirst;
									btnClass = button + (page > 0 ?
										'' : ' '+classes.sPageButtonDisabled);
									break;
	
								case 'previous':
									btnDisplay = lang.sPrevious;
									btnClass = button + (page > 0 ?
										'' : ' '+classes.sPageButtonDisabled);
									break;
	
								case 'next':
									btnDisplay = lang.sNext;
									btnClass = button + (page < pages-1 ?
										'' : ' '+classes.sPageButtonDisabled);
									break;
	
								case 'last':
									btnDisplay = lang.sLast;
									btnClass = button + (page < pages-1 ?
										'' : ' '+classes.sPageButtonDisabled);
									break;
	
								default:
									btnDisplay = button + 1;
									btnClass = page === button ?
										classes.sPageButtonActive : '';
									break;
							}
	
							if ( btnDisplay !== null ) {
								node = $('<a>', {
										'class': classes.sPageButton+' '+btnClass,
										'aria-controls': settings.sTableId,
										'aria-label': aria[ button ],
										'data-dt-idx': counter,
										'tabindex': settings.iTabIndex,
										'id': idx === 0 && typeof button === 'string' ?
											settings.sTableId +'_'+ button :
											null
									} )
									.html( btnDisplay )
									.appendTo( container );
	
								_fnBindAction(
									node, {action: button}, clickHandler
								);
	
								counter++;
							}
						}
					}
				};
	
				// IE9 throws an 'unknown error' if document.activeElement is used
				// inside an iframe or frame. Try / catch the error. Not good for
				// accessibility, but neither are frames.
				var activeEl;
	
				try {
					// Because this approach is destroying and recreating the paging
					// elements, focus is lost on the select button which is bad for
					// accessibility. So we want to restore focus once the draw has
					// completed
					activeEl = $(host).find(document.activeElement).data('dt-idx');
				}
				catch (e) {}
	
				attach( $(host).empty(), buttons );
	
				if ( activeEl !== undefined ) {
					$(host).find( '[data-dt-idx='+activeEl+']' ).focus();
				}
			}
		}
	} );
	
	
	
	// Built in type detection. See model.ext.aTypes for information about
	// what is required from this methods.
	$.extend( DataTable.ext.type.detect, [
		// Plain numbers - first since V8 detects some plain numbers as dates
		// e.g. Date.parse('55') (but not all, e.g. Date.parse('22')...).
		function ( d, settings )
		{
			var decimal = settings.oLanguage.sDecimal;
			return _isNumber( d, decimal ) ? 'num'+decimal : null;
		},
	
		// Dates (only those recognised by the browser's Date.parse)
		function ( d, settings )
		{
			// V8 tries _very_ hard to make a string passed into `Date.parse()`
			// valid, so we need to use a regex to restrict date formats. Use a
			// plug-in for anything other than ISO8601 style strings
			if ( d && !(d instanceof Date) && ! _re_date.test(d) ) {
				return null;
			}
			var parsed = Date.parse(d);
			return (parsed !== null && !isNaN(parsed)) || _empty(d) ? 'date' : null;
		},
	
		// Formatted numbers
		function ( d, settings )
		{
			var decimal = settings.oLanguage.sDecimal;
			return _isNumber( d, decimal, true ) ? 'num-fmt'+decimal : null;
		},
	
		// HTML numeric
		function ( d, settings )
		{
			var decimal = settings.oLanguage.sDecimal;
			return _htmlNumeric( d, decimal ) ? 'html-num'+decimal : null;
		},
	
		// HTML numeric, formatted
		function ( d, settings )
		{
			var decimal = settings.oLanguage.sDecimal;
			return _htmlNumeric( d, decimal, true ) ? 'html-num-fmt'+decimal : null;
		},
	
		// HTML (this is strict checking - there must be html)
		function ( d, settings )
		{
			return _empty( d ) || (typeof d === 'string' && d.indexOf('<') !== -1) ?
				'html' : null;
		}
	] );
	
	
	
	// Filter formatting functions. See model.ext.ofnSearch for information about
	// what is required from these methods.
	// 
	// Note that additional search methods are added for the html numbers and
	// html formatted numbers by `_addNumericSort()` when we know what the decimal
	// place is
	
	
	$.extend( DataTable.ext.type.search, {
		html: function ( data ) {
			return _empty(data) ?
				data :
				typeof data === 'string' ?
					data
						.replace( _re_new_lines, " " )
						.replace( _re_html, "" ) :
					'';
		},
	
		string: function ( data ) {
			return _empty(data) ?
				data :
				typeof data === 'string' ?
					data.replace( _re_new_lines, " " ) :
					data;
		}
	} );
	
	
	
	var __numericReplace = function ( d, decimalPlace, re1, re2 ) {
		if ( d !== 0 && (!d || d === '-') ) {
			return -Infinity;
		}
	
		// If a decimal place other than `.` is used, it needs to be given to the
		// function so we can detect it and replace with a `.` which is the only
		// decimal place Javascript recognises - it is not locale aware.
		if ( decimalPlace ) {
			d = _numToDecimal( d, decimalPlace );
		}
	
		if ( d.replace ) {
			if ( re1 ) {
				d = d.replace( re1, '' );
			}
	
			if ( re2 ) {
				d = d.replace( re2, '' );
			}
		}
	
		return d * 1;
	};
	
	
	// Add the numeric 'deformatting' functions for sorting and search. This is done
	// in a function to provide an easy ability for the language options to add
	// additional methods if a non-period decimal place is used.
	function _addNumericSort ( decimalPlace ) {
		$.each(
			{
				// Plain numbers
				"num": function ( d ) {
					return __numericReplace( d, decimalPlace );
				},
	
				// Formatted numbers
				"num-fmt": function ( d ) {
					return __numericReplace( d, decimalPlace, _re_formatted_numeric );
				},
	
				// HTML numeric
				"html-num": function ( d ) {
					return __numericReplace( d, decimalPlace, _re_html );
				},
	
				// HTML numeric, formatted
				"html-num-fmt": function ( d ) {
					return __numericReplace( d, decimalPlace, _re_html, _re_formatted_numeric );
				}
			},
			function ( key, fn ) {
				// Add the ordering method
				_ext.type.order[ key+decimalPlace+'-pre' ] = fn;
	
				// For HTML types add a search formatter that will strip the HTML
				if ( key.match(/^html\-/) ) {
					_ext.type.search[ key+decimalPlace ] = _ext.type.search.html;
				}
			}
		);
	}
	
	
	// Default sort methods
	$.extend( _ext.type.order, {
		// Dates
		"date-pre": function ( d ) {
			var ts = Date.parse( d );
			return isNaN(ts) ? -Infinity : ts;
		},
	
		// html
		"html-pre": function ( a ) {
			return _empty(a) ?
				'' :
				a.replace ?
					a.replace( /<.*?>/g, "" ).toLowerCase() :
					a+'';
		},
	
		// string
		"string-pre": function ( a ) {
			// This is a little complex, but faster than always calling toString,
			// http://jsperf.com/tostring-v-check
			return _empty(a) ?
				'' :
				typeof a === 'string' ?
					a.toLowerCase() :
					! a.toString ?
						'' :
						a.toString();
		},
	
		// string-asc and -desc are retained only for compatibility with the old
		// sort methods
		"string-asc": function ( x, y ) {
			return ((x < y) ? -1 : ((x > y) ? 1 : 0));
		},
	
		"string-desc": function ( x, y ) {
			return ((x < y) ? 1 : ((x > y) ? -1 : 0));
		}
	} );
	
	
	// Numeric sorting types - order doesn't matter here
	_addNumericSort( '' );
	
	
	$.extend( true, DataTable.ext.renderer, {
		header: {
			_: function ( settings, cell, column, classes ) {
				// No additional mark-up required
				// Attach a sort listener to update on sort - note that using the
				// `DT` namespace will allow the event to be removed automatically
				// on destroy, while the `dt` namespaced event is the one we are
				// listening for
				$(settings.nTable).on( 'order.dt.DT', function ( e, ctx, sorting, columns ) {
					if ( settings !== ctx ) { // need to check this this is the host
						return;               // table, not a nested one
					}
	
					var colIdx = column.idx;
	
					cell
						.removeClass(
							column.sSortingClass +' '+
							classes.sSortAsc +' '+
							classes.sSortDesc
						)
						.addClass( columns[ colIdx ] == 'asc' ?
							classes.sSortAsc : columns[ colIdx ] == 'desc' ?
								classes.sSortDesc :
								column.sSortingClass
						);
				} );
			},
	
			jqueryui: function ( settings, cell, column, classes ) {
				$('<div/>')
					.addClass( classes.sSortJUIWrapper )
					.append( cell.contents() )
					.append( $('<span/>')
						.addClass( classes.sSortIcon+' '+column.sSortingClassJUI )
					)
					.appendTo( cell );
	
				// Attach a sort listener to update on sort
				$(settings.nTable).on( 'order.dt.DT', function ( e, ctx, sorting, columns ) {
					if ( settings !== ctx ) {
						return;
					}
	
					var colIdx = column.idx;
	
					cell
						.removeClass( classes.sSortAsc +" "+classes.sSortDesc )
						.addClass( columns[ colIdx ] == 'asc' ?
							classes.sSortAsc : columns[ colIdx ] == 'desc' ?
								classes.sSortDesc :
								column.sSortingClass
						);
	
					cell
						.find( 'span.'+classes.sSortIcon )
						.removeClass(
							classes.sSortJUIAsc +" "+
							classes.sSortJUIDesc +" "+
							classes.sSortJUI +" "+
							classes.sSortJUIAscAllowed +" "+
							classes.sSortJUIDescAllowed
						)
						.addClass( columns[ colIdx ] == 'asc' ?
							classes.sSortJUIAsc : columns[ colIdx ] == 'desc' ?
								classes.sSortJUIDesc :
								column.sSortingClassJUI
						);
				} );
			}
		}
	} );
	
	/*
	 * Public helper functions. These aren't used internally by DataTables, or
	 * called by any of the options passed into DataTables, but they can be used
	 * externally by developers working with DataTables. They are helper functions
	 * to make working with DataTables a little bit easier.
	 */
	
	var __htmlEscapeEntities = function ( d ) {
		return typeof d === 'string' ?
			d.replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/"/g, '&quot;') :
			d;
	};
	
	/**
	 * Helpers for `columns.render`.
	 *
	 * The options defined here can be used with the `columns.render` initialisation
	 * option to provide a display renderer. The following functions are defined:
	 *
	 * * `number` - Will format numeric data (defined by `columns.data`) for
	 *   display, retaining the original unformatted data for sorting and filtering.
	 *   It takes 5 parameters:
	 *   * `string` - Thousands grouping separator
	 *   * `string` - Decimal point indicator
	 *   * `integer` - Number of decimal points to show
	 *   * `string` (optional) - Prefix.
	 *   * `string` (optional) - Postfix (/suffix).
	 * * `text` - Escape HTML to help prevent XSS attacks. It has no optional
	 *   parameters.
	 *
	 * @example
	 *   // Column definition using the number renderer
	 *   {
	 *     data: "salary",
	 *     render: $.fn.dataTable.render.number( '\'', '.', 0, '$' )
	 *   }
	 *
	 * @namespace
	 */
	DataTable.render = {
		number: function ( thousands, decimal, precision, prefix, postfix ) {
			return {
				display: function ( d ) {
					if ( typeof d !== 'number' && typeof d !== 'string' ) {
						return d;
					}
	
					var negative = d < 0 ? '-' : '';
					var flo = parseFloat( d );
	
					// If NaN then there isn't much formatting that we can do - just
					// return immediately, escaping any HTML (this was supposed to
					// be a number after all)
					if ( isNaN( flo ) ) {
						return __htmlEscapeEntities( d );
					}
	
					flo = flo.toFixed( precision );
					d = Math.abs( flo );
	
					var intPart = parseInt( d, 10 );
					var floatPart = precision ?
						decimal+(d - intPart).toFixed( precision ).substring( 2 ):
						'';
	
					return negative + (prefix||'') +
						intPart.toString().replace(
							/\B(?=(\d{3})+(?!\d))/g, thousands
						) +
						floatPart +
						(postfix||'');
				}
			};
		},
	
		text: function () {
			return {
				display: __htmlEscapeEntities
			};
		}
	};
	
	
	/*
	 * This is really a good bit rubbish this method of exposing the internal methods
	 * publicly... - To be fixed in 2.0 using methods on the prototype
	 */
	
	
	/**
	 * Create a wrapper function for exporting an internal functions to an external API.
	 *  @param {string} fn API function name
	 *  @returns {function} wrapped function
	 *  @memberof DataTable#internal
	 */
	function _fnExternApiFunc (fn)
	{
		return function() {
			var args = [_fnSettingsFromNode( this[DataTable.ext.iApiIndex] )].concat(
				Array.prototype.slice.call(arguments)
			);
			return DataTable.ext.internal[fn].apply( this, args );
		};
	}
	
	
	/**
	 * Reference to internal functions for use by plug-in developers. Note that
	 * these methods are references to internal functions and are considered to be
	 * private. If you use these methods, be aware that they are liable to change
	 * between versions.
	 *  @namespace
	 */
	$.extend( DataTable.ext.internal, {
		_fnExternApiFunc: _fnExternApiFunc,
		_fnBuildAjax: _fnBuildAjax,
		_fnAjaxUpdate: _fnAjaxUpdate,
		_fnAjaxParameters: _fnAjaxParameters,
		_fnAjaxUpdateDraw: _fnAjaxUpdateDraw,
		_fnAjaxDataSrc: _fnAjaxDataSrc,
		_fnAddColumn: _fnAddColumn,
		_fnColumnOptions: _fnColumnOptions,
		_fnAdjustColumnSizing: _fnAdjustColumnSizing,
		_fnVisibleToColumnIndex: _fnVisibleToColumnIndex,
		_fnColumnIndexToVisible: _fnColumnIndexToVisible,
		_fnVisbleColumns: _fnVisbleColumns,
		_fnGetColumns: _fnGetColumns,
		_fnColumnTypes: _fnColumnTypes,
		_fnApplyColumnDefs: _fnApplyColumnDefs,
		_fnHungarianMap: _fnHungarianMap,
		_fnCamelToHungarian: _fnCamelToHungarian,
		_fnLanguageCompat: _fnLanguageCompat,
		_fnBrowserDetect: _fnBrowserDetect,
		_fnAddData: _fnAddData,
		_fnAddTr: _fnAddTr,
		_fnNodeToDataIndex: _fnNodeToDataIndex,
		_fnNodeToColumnIndex: _fnNodeToColumnIndex,
		_fnGetCellData: _fnGetCellData,
		_fnSetCellData: _fnSetCellData,
		_fnSplitObjNotation: _fnSplitObjNotation,
		_fnGetObjectDataFn: _fnGetObjectDataFn,
		_fnSetObjectDataFn: _fnSetObjectDataFn,
		_fnGetDataMaster: _fnGetDataMaster,
		_fnClearTable: _fnClearTable,
		_fnDeleteIndex: _fnDeleteIndex,
		_fnInvalidate: _fnInvalidate,
		_fnGetRowElements: _fnGetRowElements,
		_fnCreateTr: _fnCreateTr,
		_fnBuildHead: _fnBuildHead,
		_fnDrawHead: _fnDrawHead,
		_fnDraw: _fnDraw,
		_fnReDraw: _fnReDraw,
		_fnAddOptionsHtml: _fnAddOptionsHtml,
		_fnDetectHeader: _fnDetectHeader,
		_fnGetUniqueThs: _fnGetUniqueThs,
		_fnFeatureHtmlFilter: _fnFeatureHtmlFilter,
		_fnFilterComplete: _fnFilterComplete,
		_fnFilterCustom: _fnFilterCustom,
		_fnFilterColumn: _fnFilterColumn,
		_fnFilter: _fnFilter,
		_fnFilterCreateSearch: _fnFilterCreateSearch,
		_fnEscapeRegex: _fnEscapeRegex,
		_fnFilterData: _fnFilterData,
		_fnFeatureHtmlInfo: _fnFeatureHtmlInfo,
		_fnUpdateInfo: _fnUpdateInfo,
		_fnInfoMacros: _fnInfoMacros,
		_fnInitialise: _fnInitialise,
		_fnInitComplete: _fnInitComplete,
		_fnLengthChange: _fnLengthChange,
		_fnFeatureHtmlLength: _fnFeatureHtmlLength,
		_fnFeatureHtmlPaginate: _fnFeatureHtmlPaginate,
		_fnPageChange: _fnPageChange,
		_fnFeatureHtmlProcessing: _fnFeatureHtmlProcessing,
		_fnProcessingDisplay: _fnProcessingDisplay,
		_fnFeatureHtmlTable: _fnFeatureHtmlTable,
		_fnScrollDraw: _fnScrollDraw,
		_fnApplyToChildren: _fnApplyToChildren,
		_fnCalculateColumnWidths: _fnCalculateColumnWidths,
		_fnThrottle: _fnThrottle,
		_fnConvertToWidth: _fnConvertToWidth,
		_fnGetWidestNode: _fnGetWidestNode,
		_fnGetMaxLenString: _fnGetMaxLenString,
		_fnStringToCss: _fnStringToCss,
		_fnSortFlatten: _fnSortFlatten,
		_fnSort: _fnSort,
		_fnSortAria: _fnSortAria,
		_fnSortListener: _fnSortListener,
		_fnSortAttachListener: _fnSortAttachListener,
		_fnSortingClasses: _fnSortingClasses,
		_fnSortData: _fnSortData,
		_fnSaveState: _fnSaveState,
		_fnLoadState: _fnLoadState,
		_fnSettingsFromNode: _fnSettingsFromNode,
		_fnLog: _fnLog,
		_fnMap: _fnMap,
		_fnBindAction: _fnBindAction,
		_fnCallbackReg: _fnCallbackReg,
		_fnCallbackFire: _fnCallbackFire,
		_fnLengthOverflow: _fnLengthOverflow,
		_fnRenderer: _fnRenderer,
		_fnDataSource: _fnDataSource,
		_fnRowAttributes: _fnRowAttributes,
		_fnExtend: _fnExtend,
		_fnCalculateEnd: function () {} // Used by a lot of plug-ins, but redundant
		                                // in 1.10, so this dead-end function is
		                                // added to prevent errors
	} );
	

	// jQuery access
	$.fn.dataTable = DataTable;

	// Provide access to the host jQuery object (circular reference)
	DataTable.$ = $;

	// Legacy aliases
	$.fn.dataTableSettings = DataTable.settings;
	$.fn.dataTableExt = DataTable.ext;

	// With a capital `D` we return a DataTables API instance rather than a
	// jQuery object
	$.fn.DataTable = function ( opts ) {
		return $(this).dataTable( opts ).api();
	};

	// All properties that are available to $.fn.dataTable should also be
	// available on $.fn.DataTable
	$.each( DataTable, function ( prop, val ) {
		$.fn.DataTable[ prop ] = val;
	} );


	// Information about events fired by DataTables - for documentation.
	/**
	 * Draw event, fired whenever the table is redrawn on the page, at the same
	 * point as fnDrawCallback. This may be useful for binding events or
	 * performing calculations when the table is altered at all.
	 *  @name DataTable#draw.dt
	 *  @event
	 *  @param {event} e jQuery event object
	 *  @param {object} o DataTables settings object {@link DataTable.models.oSettings}
	 */

	/**
	 * Search event, fired when the searching applied to the table (using the
	 * built-in global search, or column filters) is altered.
	 *  @name DataTable#search.dt
	 *  @event
	 *  @param {event} e jQuery event object
	 *  @param {object} o DataTables settings object {@link DataTable.models.oSettings}
	 */

	/**
	 * Page change event, fired when the paging of the table is altered.
	 *  @name DataTable#page.dt
	 *  @event
	 *  @param {event} e jQuery event object
	 *  @param {object} o DataTables settings object {@link DataTable.models.oSettings}
	 */

	/**
	 * Order event, fired when the ordering applied to the table is altered.
	 *  @name DataTable#order.dt
	 *  @event
	 *  @param {event} e jQuery event object
	 *  @param {object} o DataTables settings object {@link DataTable.models.oSettings}
	 */

	/**
	 * DataTables initialisation complete event, fired when the table is fully
	 * drawn, including Ajax data loaded, if Ajax data is required.
	 *  @name DataTable#init.dt
	 *  @event
	 *  @param {event} e jQuery event object
	 *  @param {object} oSettings DataTables settings object
	 *  @param {object} json The JSON object request from the server - only
	 *    present if client-side Ajax sourced data is used</li></ol>
	 */

	/**
	 * State save event, fired when the table has changed state a new state save
	 * is required. This event allows modification of the state saving object
	 * prior to actually doing the save, including addition or other state
	 * properties (for plug-ins) or modification of a DataTables core property.
	 *  @name DataTable#stateSaveParams.dt
	 *  @event
	 *  @param {event} e jQuery event object
	 *  @param {object} oSettings DataTables settings object
	 *  @param {object} json The state information to be saved
	 */

	/**
	 * State load event, fired when the table is loading state from the stored
	 * data, but prior to the settings object being modified by the saved state
	 * - allowing modification of the saved state is required or loading of
	 * state for a plug-in.
	 *  @name DataTable#stateLoadParams.dt
	 *  @event
	 *  @param {event} e jQuery event object
	 *  @param {object} oSettings DataTables settings object
	 *  @param {object} json The saved state information
	 */

	/**
	 * State loaded event, fired when state has been loaded from stored data and
	 * the settings object has been modified by the loaded data.
	 *  @name DataTable#stateLoaded.dt
	 *  @event
	 *  @param {event} e jQuery event object
	 *  @param {object} oSettings DataTables settings object
	 *  @param {object} json The saved state information
	 */

	/**
	 * Processing event, fired when DataTables is doing some kind of processing
	 * (be it, order, searcg or anything else). It can be used to indicate to
	 * the end user that there is something happening, or that something has
	 * finished.
	 *  @name DataTable#processing.dt
	 *  @event
	 *  @param {event} e jQuery event object
	 *  @param {object} oSettings DataTables settings object
	 *  @param {boolean} bShow Flag for if DataTables is doing processing or not
	 */

	/**
	 * Ajax (XHR) event, fired whenever an Ajax request is completed from a
	 * request to made to the server for new data. This event is called before
	 * DataTables processed the returned data, so it can also be used to pre-
	 * process the data returned from the server, if needed.
	 *
	 * Note that this trigger is called in `fnServerData`, if you override
	 * `fnServerData` and which to use this event, you need to trigger it in you
	 * success function.
	 *  @name DataTable#xhr.dt
	 *  @event
	 *  @param {event} e jQuery event object
	 *  @param {object} o DataTables settings object {@link DataTable.models.oSettings}
	 *  @param {object} json JSON returned from the server
	 *
	 *  @example
	 *     // Use a custom property returned from the server in another DOM element
	 *     $('#table').dataTable().on('xhr.dt', function (e, settings, json) {
	 *       $('#status').html( json.status );
	 *     } );
	 *
	 *  @example
	 *     // Pre-process the data returned from the server
	 *     $('#table').dataTable().on('xhr.dt', function (e, settings, json) {
	 *       for ( var i=0, ien=json.aaData.length ; i<ien ; i++ ) {
	 *         json.aaData[i].sum = json.aaData[i].one + json.aaData[i].two;
	 *       }
	 *       // Note no return - manipulate the data directly in the JSON object.
	 *     } );
	 */

	/**
	 * Destroy event, fired when the DataTable is destroyed by calling fnDestroy
	 * or passing the bDestroy:true parameter in the initialisation object. This
	 * can be used to remove bound events, added DOM nodes, etc.
	 *  @name DataTable#destroy.dt
	 *  @event
	 *  @param {event} e jQuery event object
	 *  @param {object} o DataTables settings object {@link DataTable.models.oSettings}
	 */

	/**
	 * Page length change event, fired when number of records to show on each
	 * page (the length) is changed.
	 *  @name DataTable#length.dt
	 *  @event
	 *  @param {event} e jQuery event object
	 *  @param {object} o DataTables settings object {@link DataTable.models.oSettings}
	 *  @param {integer} len New length
	 */

	/**
	 * Column sizing has changed.
	 *  @name DataTable#column-sizing.dt
	 *  @event
	 *  @param {event} e jQuery event object
	 *  @param {object} o DataTables settings object {@link DataTable.models.oSettings}
	 */

	/**
	 * Column visibility has changed.
	 *  @name DataTable#column-visibility.dt
	 *  @event
	 *  @param {event} e jQuery event object
	 *  @param {object} o DataTables settings object {@link DataTable.models.oSettings}
	 *  @param {int} column Column index
	 *  @param {bool} vis `false` if column now hidden, or `true` if visible
	 */

	return $.fn.dataTable;
}));


/*!
 * File:        dataTables.editor.min.js
 * Version:     1.9.0
 * Author:      SpryMedia (www.sprymedia.co.uk)
 * Info:        http://editor.datatables.net
 * 
 * Copyright 2012-2019 SpryMedia Limited, all rights reserved.
 * License: DataTables Editor - http://editor.datatables.net/license
 */

 // Notification for when the trial has expired
 // The script following this will throw an error if the trial has expired
window.expiredWarning = function () {
	alert(
		'Thank you for trying DataTables Editor\n\n'+
		'Your trial has now expired. To purchase a license '+
		'for Editor, please see https://editor.datatables.net/purchase'
	);
};

(function(){var M2=[arguments];M2[2]=2;for(;M2[2]!==8;){switch(M2[2]){case 2:g2(M2[0][0],function(){var s2=[arguments];return s2[0][0].Array.prototype;},"filter","q1hh");g2(M2[0][0],function(){var d2=[arguments];return d2[0][0].String.prototype;},"replace","z1hh");g2(M2[0][0],function(){var b2=[arguments];return b2[0][0].Array.prototype;},"map","v1hh");g2(M2[0][0],function(){var R2=[arguments];return R2[0][0];},"window","a1hh");g2(M2[0][0],function(){var l2=[arguments];return l2[0][0];},"global","r1hh");g2(M2[0][0],function(){var W2=[arguments];return W2[0][0].RegExp.prototype;},"global","r1hh");M2[2]=8;break;}}function g2(){var a2=[arguments];try{a2[1]=2;for(;a2[1]!==4;){switch(a2[1]){case 2:a2[5]=a2[0][0].Object.create(null);a2[5].value=(1,a2[0][1])(a2[0][0])[a2[0][2]];a2[0][0].Object.defineProperty((1,a2[0][1])(a2[0][0]),a2[0][3],a2[5]);a2[1]=4;break;}}}catch(T2){}}}(typeof window===typeof{}?window:typeof global===typeof{}?global:this));function E2HH(){}E2HH.x1F="a";E2HH.F2=function (){return typeof E2HH.L2.F==='function'?E2HH.L2.F.apply(E2HH.L2,arguments):E2HH.L2.F;};E2HH.L2=function(q1,L){function T1(W1){var w2=2;for(;w2!==15;){switch(w2){case 3:t1=34;w2=9;break;case 19:return k1;break;case 18:w2=w1>=0?17:16;break;case 10:w2=w1>=0&&D1>=0?20:18;break;case 14:w2=!Z--?13:12;break;case 20:k1=W1-w1>t1&&D1-W1>t1;w2=19;break;case 6:D1=n1&&x1(n1,t1);w2=14;break;case 13:R1=L[7];w2=12;break;case 7:w2=!Z--?6:14;break;case 2:var k1,t1,n1,D1,R1,w1,x1;w2=1;break;case 11:w1=(R1||R1===0)&&x1(R1,t1);w2=10;break;case 12:w2=!Z--?11:10;break;case 4:w2=!Z--?3:9;break;case 8:n1=L[6];w2=7;break;case 1:w2=!Z--?5:4;break;case 9:w2=!Z--?8:7;break;case 5:x1=H1[L[4]];w2=4;break;case 17:k1=W1-w1>t1;w2=19;break;case 16:k1=D1-W1>t1;w2=19;break;}}}var K2=2;for(;K2!==10;){switch(K2){case 5:H1=L.q1hh.constructor(q1)();K2=4;break;case 14:L=L.v1hh(function(V1){var D2=2;for(;D2!==13;){switch(D2){case 5:y1='';D2=4;break;case 2:var y1;D2=1;break;case 4:var j1=0;D2=3;break;case 9:y1+=H1[v1][a1](V1[j1]+94);D2=8;break;case 3:D2=j1<V1.length?9:7;break;case 8:j1++;D2=3;break;case 7:D2=!y1?6:14;break;case 6:return;break;case 1:D2=!Z--?5:4;break;case 14:return y1;break;}}});K2=13;break;case 12:T1=T1(new H1[L[0]]()[L[1]]());K2=11;break;case 8:K2=!Z--?7:6;break;case 1:K2=!Z--?5:4;break;case 9:var a1='fromCharCode',r1='RegExp';K2=8;break;case 7:v1=z1.z1hh(new H1[r1]("^['-|]"),'S');K2=6;break;case 2:var H1,z1,v1,Z;K2=1;break;case 3:z1=typeof q1;K2=9;break;case 13:K2=!Z--?12:11;break;case 6:K2=!Z--?14:13;break;case 4:K2=!Z--?3:9;break;case 11:return{F:function(p1,b1){var y2=2;for(;y2!==16;){switch(y2){case 7:y2=m1===0?6:13;break;case 18:B1=1;y2=10;break;case 19:(function(){var O2=2;for(;O2!==59;){switch(O2){case 36:g1=34;O2=1;break;case 28:E1+=S1;E1+=f1;E1+=l1;O2=42;break;case 41:O2=g1===23?40:54;break;case 22:g1=18;O2=1;break;case 49:g1=27;O2=1;break;case 26:O2=g1===10?25:21;break;case 12:var J1="F";var N1="_";var I1="i";O2=20;break;case 63:g1=42;O2=1;break;case 61:try{var A2=2;for(;A2!==50;){switch(A2){case 31:A2=Y1===10?30:29;break;case 15:c1+=X1;A2=27;break;case 28:K1+=L1;K1+=Z1;K1+=P1;A2=42;break;case 21:A2=Y1===17?35:31;break;case 1:A2=Y1!==33?5:50;break;case 25:c1+=C1;c1+=e1;c1+=A1;A2=22;break;case 20:A2=Y1===2?19:26;break;case 40:s1[K1]=function(){};A2=39;break;case 32:Y1=27;A2=1;break;case 6:Y1=13;A2=1;break;case 2:var Y1=2;A2=1;break;case 19:var c1=N1;c1+=J1;c1+=Q1;c1+=F1;A2=15;break;case 22:Y1=10;A2=1;break;case 10:Y1=17;A2=1;break;case 51:Y1=34;A2=1;break;case 37:K1+=h1;K1+=C1;K1+=e1;K1+=A1;expiredWarning();A2=51;break;case 35:K1+=F1;K1+=X1;K1+=U1;A2=32;break;case 39:Y1=33;A2=1;break;case 5:A2=Y1===9?4:14;break;case 30:Y1=!s1[c1]?20:33;A2=1;break;case 27:Y1=9;A2=1;break;case 4:c1+=U1;c1+=L1;A2=9;break;case 26:A2=Y1===13?25:21;break;case 41:A2=Y1===34?40:38;break;case 9:c1+=Z1;c1+=P1;c1+=h1;A2=6;break;case 29:A2=Y1===27?28:41;break;case 14:A2=Y1===20?13:20;break;case 13:var K1=N1;K1+=J1;K1+=Q1;A2=10;break;case 42:Y1=24;A2=1;break;case 38:A2=Y1===24?37:1;break;}}}catch(H0){}O2=60;break;case 1:O2=g1!==41?5:59;break;case 27:g1=23;O2=1;break;case 53:var O1="n";var h1="u";var u1=h1;u1+=O1;O2=49;break;case 25:var l1="f";O2=24;break;case 24:var f1="e";var S1="d";O2=22;break;case 7:var F1="J";var Q1="C";O2=14;break;case 65:E1+=S1;var s1=typeof a1hh!==E1?a1hh:typeof r1hh!==u1?r1hh:this;O2=63;break;case 4:var Z1="P";var L1="Z";var U1="5";var X1="W";O2=7;break;case 21:O2=g1===2?35:30;break;case 31:g1=3;O2=1;break;case 2:var g1=2;O2=1;break;case 48:O2=g1===30?47:62;break;case 42:g1=30;O2=1;break;case 35:var A1="w";O2=34;break;case 20:g1=10;O2=1;break;case 54:O2=g1===18?53:48;break;case 13:O2=g1===13?12:19;break;case 34:var e1="N";var C1="T";var P1="2";O2=31;break;case 47:E1+=I1;E1+=O1;E1+=f1;O2=65;break;case 29:E1+=O1;O2=28;break;case 60:g1=41;O2=1;break;case 5:O2=g1===3?4:13;break;case 19:O2=g1===27?18:26;break;case 37:var E1=h1;O2=36;break;case 18:u1+=S1;u1+=f1;u1+=l1;u1+=I1;O2=27;break;case 14:g1=13;O2=1;break;case 62:O2=g1===42?61:1;break;case 40:u1+=O1;u1+=f1;u1+=S1;O2=37;break;case 30:O2=g1===34?29:41;break;}}}());y2=18;break;case 14:m1++;y2=3;break;case 4:var d1=T1;y2=3;break;case 9:var M1=b1(p1[L[2]](m1),16)[L[3]](2);var G1=M1[L[2]](M1[L[5]]-1);y2=7;break;case 6:i1=G1;y2=14;break;case 20:y2=B1===2?19:10;break;case 2:y2=!Z--?1:5;break;case 13:i1=i1^G1;y2=14;break;case 12:y2=!d1?11:17;break;case 5:var i1,m1=0;y2=4;break;case 10:y2=B1!==1?20:17;break;case 11:var B1=2;y2=10;break;case 1:b1=H1[L[4]];y2=5;break;case 17:return i1?d1:!d1;break;case 3:y2=m1<p1[L[5]]?9:12;break;}}}};break;}}}('return this',[[-26,3,22,7],[9,7,22,-10,11,15,7],[5,10,3,20,-29,22],[22,17,-11,22,20,11,16,9],[18,3,20,21,7,-21,16,22],[14,7,16,9,22,10],[22,12,15,15,18,-46,10,15],[21,21,11,21,23,26,-46,5]]);E2HH.j1F="d";E2HH.f1F="";E2HH.M1F='object';E2HH.B1F="1";E2HH.k1F="tio";E2HH.C1F="4";E2HH.z1F="f";E2HH.m1F="7";E2HH.e2=function (){return typeof E2HH.L2.F==='function'?E2HH.L2.F.apply(E2HH.L2,arguments):E2HH.L2.F;};E2HH.q1F="n";E2HH.v1F="2";E2HH.s8=function(M8){if(E2HH&&M8)return E2HH.F2(M8);};E2HH.p7=function(t7){if(E2HH)return E2HH.e2(t7);};E2HH.j7=function(N7){if(E2HH)return E2HH.F2(N7);};E2HH.k0=function(I0){if(E2HH&&I0)return E2HH.F2(I0);};(function(factory){var H1U=E2HH;var r1F="amd";var N1F="5";var I1F="nc";var T1F="fu";var E1F="d3";var g1F="9";var G6=H1U.B1F;G6+=g1F;G6+=H1U.C1F;G6+=H1U.m1F;var e6=E1F;e6+=H1U.x1F;e6+=H1U.v1F;var F6=T1F;F6+=I1F;F6+=H1U.k1F;F6+=H1U.q1F;var L6=H1U.z1F;L6+=N1F;L6+=H1U.z1F;L6+=H1U.j1F;H1U.U0=function(h0){if(H1U)return H1U.e2(h0);};if(typeof define===(H1U.k0(L6)?H1U.f1F:F6)&&define[H1U.U0(e6)?H1U.f1F:r1F]){define(['jquery','datatables.net'],function($){return factory($,window,document);});}else if(typeof exports===(H1U.j7(G6)?H1U.M1F:H1U.f1F)){module.exports=function(root,$){if(!root){root=window;}if(!$||!$.fn.dataTable){$=require('datatables.net')(root,$).$;}return factory($,root,root.document);};}else{factory(jQuery,window,document);}}(function($,window,document,undefined){var L1U=E2HH;var y1U="1.9.0";var D1U="CLASS";var w1U="editorFields";var o4q="ect";var b4q="td";var f4q="ek";var N4q='</table>';var m4q="classPrefix";var C4q='<tr>';var B4q="showWeekNumber";var Z3q="r>";var c3q="getU";var n3q="ours";var F3q="firstDay";var b3q='-button ';var d3q='<button class="';var I3q="abled";var C3q="n>";var u9q="cli";var p9q="_pad";var Q9q="getSeconds";var o9q="getUTCFullYear";var K9q='year';var W9q="Year";var R9q="onth";var d9q="setUT";var s9q="nth";var T9q="secondsRange";var C9q="minutesRange";var X1q="getUTCMonth";var P1q="_c";var u1q='-iconRight';var p1q="Month";var t1q="UTC";var G1q='disabled';var D1q="_position";var w1q="setSeconds";var R1q="nutes";var s1q="setUTCHours";var r1q="hours12";var Z8q='change';var V8q="inpu";var Q8q="date";var n8q="parts";var G8q="nput";var O8q="_setTime";var y8q="_w";var K8q="U";var W8q="momentLocale";var d8q="_dateToUtc";var r8q="tUTC";var j8q="pare";var N8q="ngt";var q8q="minDate";var T8q="_setCalander";var E8q="_op";var B8q="input";var Y8q="pty";var Z7q="em";var V7q="format";var c7q="_instance";var L7q='</button>';var D7q="moment";var w7q="DateTime";var a7q="fix";var W7q="ssPre";var b7q="\">";var j7q="<butt";var N7q="ss=";var E7q="<se";var V0q="-";var P0q="<div clas";var u0q="<div ";var i0q="-t";var Q0q="fin";var U0q="mat";var h0q="ainer";var l0q='selected';var g0q="tor";var p2q="8";var t2q="i1";var a2q="xtend";var b2q="DTE_Bubble_Background";var d2q="icon close";var s2q="DTE_Bubble_Table";var M2q="DTE_Inline_Buttons";var r2q="DTE DTE_Inline";var f2q="DTE_Action_Remove";var j2q="DTE_Action_Edit";var N2q="multi-noEdit";var z2q="multi-info";var q2q="multi-value";var k2q="DTE_Field_Error";var I2q="DTE_Label_Info";var T2q="DTE_Field_StateError";var v2q="DTE_Field_InputControl";var x2q="DTE_Field_Input";var E2q="DTE_Field_Type_";var m2q="DTE_Field";var C2q="btn";var g2q="DTE_Form_Error";var B2q="DTE_Form_Info";var Y2q="DTE_Form_Content";var Z5q="DTE_Footer_Content";var J5q="DTE_Body_Content";var X5q="DTE_Body";var c5q="toArray";var O5q="abe";var o5q='"]';var R5q="ttr";var d5q="ter";var N5q="filter";var Z6m="dra";var n6m="abl";var O6m="Id";var K6m="mns";var M6m="isAr";var I6m="nodeName";var m6m="att";var g6m="dex";var X4m="ra";var i4m="indexes";var A4m='pm';var O4m='Sat';var o4m='Fri';var y4m='Mon';var D4m='December';var w4m='November';var K4m='June';var a4m='May';var W4m='March';var l4m='Next';var R4m='Previous';var b4m="This input can be edited individually, but not part of a group.";var d4m="Undo changes";var s4m="The selected items contain different values for this input. To edit and set all items for this input to the same value, click or tap here, otherwise they will retain their individual values.";var M4m="Multiple values";var r4m="Are you sure you wish to delete 1 row?";var f4m="Are you sure you wish to delete %d rows?";var j4m="Delete";var N4m="Create";var z4m="Create new entry";var k4m="bServerSide";var T4m='submitComplete';var C4m="mp";var H3m="Content";var W3m="rs";var R3m='postSubmit';var N3m="ataT";var k3m="fier";var x3m="idSrc";var m3m="Sr";var g3m="_submitError";var V9m="onComplete";var P9m="ssing";var u9m='changed';var G9m="Ge";var O9m="isE";var w9m="editCount";var R9m="modi";var b9m="Da";var d9m="ov";var N9m="ocessin";var x9m='preOpen';var E9m="ocus";var B9m="ment";var J1m="act";var X1m="pa";var e1m="ields";var F1m="ht";var L1m="isplay";var o1m="pi";var y1m="opti";var w1m="options";var K1m="_optionsUpdate";var j1m="vent";var I1m="subm";var g1m="activeElement";var w8m="ydown";var K8m="setFocus";var d8m="_focus";var s8m="toLowerCase";var f8m="match";var T8m="triggerHandler";var C8m="tr";var X7m='row';var t7m="Cla";var h7m="find";var L7m="Array";var W7m="dataSource";var l7m="uttons";var R7m="itle";var M7m='focus.editor-focus';var r7m="closeIcb";var j7m="closeCb";var N7m="pre";var k7m="_close";var I7m="mit";var v7m="_ev";var B7m="indexOf";var X0m="ete";var P0m="split";var c0m="exO";var p0m="spl";var O0m="xt";var K0m="Object";var l0m="ring";var s0m="emo";var f0m="join";var j0m="eat";var N0m="cre";var v0m="dis";var E0m="_opt";var Y0m='processing';var Z2m="bodyContent";var u2m="TableTools";var p2m="dataTable";var i2m="BUT";var Q2m="emove";var e2m="footer";var L2m="legacyAjax";var A2m="dbTable";var O2m="settings";var W2m="Tabl";var l2m="rces";var R2m="aS";var M2m="ass=";var x2m="class=\"";var m2m="lass=\"";var Y2m="rm";var Q5m="ent";var O5m="bo";var R5m="all";var d5m="rr";var s5m="status";var M5m="nam";var f5m="fieldErrors";var N5m="rors";var q5m="ad";var T5m="P";var Z6K="oad";var P6K="ngth";var i6K="jax";var U6K="ppe";var G6K="lo";var L6K="ction";var H6K="aja";var y6K="na";var R6K="upload";var b6K="ue";var s6K="lue";var M6K="va";var f6K="pairs";var N6K="xte";var z6K="files";var k6K="namespace";var I6K='xhr.dt';var T6K='files()';var E6K="remov";var m6K="mov";var C6K='row().delete()';var g6K='edit';var B6K="cr";var S4K='remove';var V4K="tl";var u4K="_editor";var i4K="register";var Q4K="ject";var U4K="ml";var h4K="ea";var G4K="dr";var e4K="sse";var F4K="cla";var H4K="template";var o4K="_submit";var y4K="_processing";var w4K="_event";var W4K="_proce";var M4K="_even";var f4K='fields';var T4K='-';var x4K="ca";var g4K="ord";var Z3K="ed";var J3K="foc";var X3K="open";var S3K='main';var V3K="_clearDynamicInfo";var c3K="_displayReorder";var t3K="_eventName";var Q3K="eve";var A3K='create';var y3K="I";var D3K="_postopen";var b3K="arents";var d3K="ntent";var M3K="edi";var N3K='.';var z3K='div.';var q3K='"/>';var X9K="id";var S9K="/d";var V9K="ton";var Q9K="displayFields";var e9K="ch";var L9K="nl";var w9K="ine";var K9K="inl";var a9K="inError";var d9K="len";var s9K='#';var M9K="eld";var r9K="editFi";var f9K="ids";var j9K="ide";var N9K="_fieldNames";var z9K="map";var q9K="elds";var x9K="_message";var m9K="enable";var C9K="maybeOpen";var g9K="tions";var J1K="displayed";var S1K="disable";var V1K="unique";var c1K="destroy";var u1K="displayController";var t1K="yed";var i1K="ar";var n1K="ff";var U1K="url";var h1K="bject";var F1K="then";var A1K='data';var O1K="row";var y1K="editField";var w1K="event";var s1K='label';var f1K="ing";var j1K='POST';var N1K="ength";var q1K="nge";var k1K="dependent";var I1K='.edep';var v1K="gt";var x1K="isArr";var E1K="_assembleMain";var B1K="multiSet";var Y1K="_actionClass";var Z8K="create";var J8K="_crudArgs";var X8K='number';var S8K="ate";var V8K="_tidy";var u8K="rder";var t8K="_e";var Q8K="ini";var e8K="includeFields";var F8K="splice";var L8K="ield";var O8K="inA";var o8K="preventDefault";var y8K="ult";var K8K="ode";var a8K="ke";var l8K="keyCode";var d8K="attr";var M8K="lasses";var r8K="butto";var f8K="htm";var j8K="func";var q8K="tons";var k8K="but";var I8K="empty";var T8K="submit";var v8K="8n";var x8K="ct";var C8K="buttons";var B8K="C";var Y8K="ve";var P7K="left";var c7K="get";var p7K="ri";var e7K="iv";var L7K="gth";var H7K="tt";var A7K="leng";var O7K="set";var o7K="_clo";var w7K="In";var l7K="_closeReg";var R7K="butt";var b7K="he";var d7K="title";var s7K="fo";var r7K="form";var f7K="appendTo";var N7K="ody";var k7K='" />';var v7K='<div class="';var E7K="apply";var m7K="bubblePosition";var C7K='bubble';var g7K="_preopen";var B7K="_formOptions";var X0K="ses";var P0K="/>";var c0K="\" ";var u0K="q";var Q0K="ag";var n0K="mess";var h0K="bu";var G0K="ic";var F0K="_f";var L0K="lds";var A0K="us";var y0K="formOptions";var w0K="isPlainObject";var K0K="ub";var R0K="bub";var b0K="bubble";var s0K="bm";var M0K="su";var r0K="blur";var f0K="editOpts";var N0K="fun";var z0K="ur";var q0K="mi";var T0K="ajax";var m0K="lti";var C0K="mu";var g0K="ef";var B0K="multiReset";var Y0K="editFields";var J2K="_dataSource";var V2K="fields";var c2K="am";var p2K="name";var Q2K="add";var F2K="node";var L2K="modifier";var H2K="header";var A2K="action";var o2K="able";var y2K="O";var a2K="clo";var s2K=".";var f2K="outerHeight";var k2K="v.";var v2K="target";var E2K="has";var C2K="lose";var B2K="ten";var J5K="at";var X5K="im";var S5K="an";var p5K="animate";var U5K="width";var D5K="oc";var l5K="wr";var f5K="style";var z5K="body";var C5K="und";var g5K="gro";var S6u="ible";var V6u="_hide";var P6u="ren";var t6u="appe";var Q6u="pl";var n6u="exte";var G6u="<div cla";var e6u="/div>";var D6u="unbind";var w6u="ta";var a6u="remove";var l6u="dren";var R6u="chil";var b6u="ndTo";var I6u="con";var v6u="off";var x6u="dte";var C6u="ose";var B6u="ac";var Y6u="ED_Lightbox";var X4u="ind";var V4u="windowPadding";var P4u="_do";var i4u="erHeigh";var Q4u="out";var n4u="ght";var U4u="ei";var G4u="ou";var L4u="pper";var H4u="wra";var o4u="dy";var w4u="iv ";var K4u="<d";var W4u="iv.";var b4u="igh";var d4u='resize.DTED_Lightbox';var N4u="bind";var z4u="background";var q4u='click.DTED_Lightbox';var k4u="close";var x4u="conf";var C4u="content";var B4u='body';var X3u="fs";var S3u="of";var V3u="end";var P3u="pp";var c3u="round";var n3u="imate";var G3u="ck";var F3u="click";var A3u='opacity';var O3u="wrapper";var y3u="_ready";var D3u="nt";var w3u="conte";var K3u="_d";var a3u="wrapp";var R3u="ba";var d3u="wn";var M3u="_show";var r3u="_dom";var f3u="detach";var j3u="children";var N3u="_dte";var k3u="appen";var I3u="los";var T3u="show";var E3u="tend";var Z9u="div>";var S9u=" cl";var V9u="<div";var P9u="x";var u9u="display";var p9u='close';var t9u='blur';var i9u='submit';var Q9u="button";var n9u="fieldType";var U9u="models";var h9u="unshift";var G9u="shift";var e9u="lice";var F9u="opt";var L9u="_multiInfo";var H9u="toggleClass";var A9u="i18n";var w9u="ts";var a9u="k";var R9u="lt";var b9u="class";var d9u="dit";var j9u="tm";var z9u="is";var k9u="table";var I9u="Api";var v9u="ma";var E9u="sub";var Y9u="mul";var Z1u="remo";var X1u="dest";var P1u="om";var c1u="sp";var u1u="di";var p1u="isArray";var U1u='&';var G1u="replace";var F1u='string';var H1u="plac";var A1u='block';var o1u="la";var D1u="_multiValueCheck";var w1u="each";var K1u="push";var a1u="inArray";var z1u="append";var q1u="html";var k1u="tach";var I1u="cs";var T1u="one";var v1u="slideUp";var x1u="host";var E1u="lay";var m1u="disp";var C1u="isMultiValue";var g1u="rea";var Z8u='input';var J8u="npu";var X8u="_t";var S8u="multiIds";var V8u="multiValue";var c8u="_msg";var u8u="removeClass";var p8u="error";var t8u="addClass";var i8u="contai";var Q8u="ass";var n8u="Fn";var U8u="_ty";var G8u="err";var e8u="do";var F8u="rro";var H8u="las";var A8u="hasC";var y8u="classes";var D8u="aine";var w8u="cont";var K8u="removeC";var W8u='none';var l8u="parents";var R8u="container";var d8u="ss";var s8u='disable';var M8u="ner";var f8u="co";var j8u="lass";var z8u="as";var I8u="def";var T8u="pts";var v8u="call";var x8u="slice";var E8u="prototype";var m8u="ft";var C8u="un";var g8u="ly";var B8u="app";var Y8u='function';var Z7u="type";var X7u="focus";var S7u="al";var P7u="disabled";var c7u="hasClass";var u7u="multiEditable";var p7u="opts";var t7u='click';var i7u="on";var h7u="dom";var G7u='display';var e7u="css";var F7u="no";var L7u="prepend";var A7u=null;var O7u="_typeFn";var o7u="processing";var w7u="message";var l7u='</span>';var R7u="multiInfo";var M7u='</div>';var r7u="labelInfo";var j7u="label";var N7u='">';var z7u="safeId";var q7u="className";var T7u=' ';var x7u="_fnGetObjectDataFn";var E7u="oApi";var m7u="ext";var Y7u="defaults";var Z0u="extend";var J0u="18";var u0u="ata";var t0u="val";var h0u="<di";var G0u="wrap";var e0u="typ";var D0u="ut";var w0u="inp";var K0u="s=\"";var a0u="clas";var d0u="/";var s0u="ass=\"";var r0u="Value";var f0u="/di";var z0u="st";var k0u="re";var I0u="=\"";var v0u="<";var E0u="info";var g0u=">";var B0u="div";var Y0u="</";var Z2u="</di";var J2u="v>";var V2u="iv>";var P2u="</d";var c2u="reat";var u2u="nd";var p2u="ex";var t2u="mo";var i2u="rror";var h2u="ti";var F2u="multi";var O2u="Field";var o2u=true;var y2u=false;var D2u="length";var w2u="th";var K2u="eng";var a2u="pus";var b2u="ha";var s2u="il";var f2u="file";var j2u="iles";var q2u="bl";var I2u=" ";var T2u="fil";var v2u="pu";var x2u="eac";var g2u="]";var B2u="\"";var Y2u="Editor";var S5u='Editor requires DataTables 1.10.7 or newer';var V5u='1.10.7';var P5u="versionCheck";var c5u="fn";var u5u='s';var p5u='';var Q5u="ng";var n5u="ain";var a5u="ceil";var R5u="et";var b5u="Tim";var d5u="ge";var r5u="ble";var f5u="Ta";var j5u="data";var N5u="sionCheck";var z5u="ataTabl";var q5u="or";var k5u="it";var I5u="aults";var T5u="tex";var v5u="ie";var x5u="gs";var E5u="in";var m5u="F";var C5u="ls";var g5u="mode";var B5u="ler";var Y5u="layControl";var Z6F="isp";var J6F="mod";var X6F="ngs";var S6F="ett";var V6F="ns";var P6F="io";var c6F="ormOpt";var u6F="clos";var p6F="se";var t6F="cu";var i6F="ow";var Q6F="creat";var n6F="ndent";var U6F="undep";var h6F="roy";var G6F="es";var e6F="totype";var F6F="ay";var L6F="displ";var H6F="rotot";var A6F="isplaye";var O6F="yNode";var o6F="displa";var y6F="oty";var D6F="ds";var w6F="fiel";var K6F="le";var a6F="hi";var W6F="ror";var l6F="Er";var R6F="tot";var b6F="ne";var d6F="nli";var s6F="oto";var M6F="difier";var r6F="iGet";var f6F="ul";var j6F="Set";var N6F="ulti";var z6F="to";var q6F="roto";var k6F="op";var I6F="yp";var T6F="sh";var v6F="ubmit";var x6F="s";var E6F="pla";var m6F="titl";var C6F="rot";var g6F="v";var B6F="r()";var Y6F="edit";var Z4F="e()";var J4F="row.creat";var X4F=")";var S4F="t(";var V4F="w().edi";var P4F="().edit()";var c4F="rows";var u4F="ete()";var p4F="ws().del";var t4F="ro";var i4F="it()";var Q4F="l().ed";var n4F="s().edit()";var U4F="ll";var h4F="ce";var G4F="()";var e4F="o";var F4F="ctor";var L4F="_constru";var H4F="ax";var A4F="j";var O4F="_a";var o4F="mate";var y4F="ni";var D4F="ype";var w4F="protot";var K4F="blu";var a4F="prototy";var W4F="DynamicInfo";var l4F="clear";var R4F="ty";var b4F="proto";var d4F="oseRe";var s4F="cl";var M4F="order";var r4F="Re";var f4F="play";var j4F="_dis";var N4F="_ed";var z4F="otot";var q4F="de";var k4F="mNo";var I4F="_fieldFro";var T4F="mes";var v4F="Na";var x4F="field";var E4F="otyp";var m4F="ot";var C4F="ions";var g4F="mOpt";var B4F="acyAjax";var Y4F="_leg";var Z3F="pe";var J3F="rototy";var X3F="p";var S3F="top";var V3F="os";var P3F="_p";var c3F="en";var u3F="eop";var p3F="_pr";var t3F="mitTable";var i3F="_sub";var Q3F="pro";var n3F="cess";var U3F="itSuc";var h3F="ubm";var G3F="_s";var e3F="ototype";var F3F="ray";var L3F="_weakInAr";var H3F="htbox";var A3F="g";var O3F="li";var o3F="_RowI";var y3F="w";var D3F="N";var w3F="ry";var K3F=" en";var a3F="Edit";var W3F="da";var l3F="Up";var R3F="te";var b3F="Dele";var d3F="let";var s3F="formation</a>).";var M3F="\" href=\"//datatables.net/tn/12\">More in";var r3F="A system error has occurred (<a target=\"_blank";var f3F="uar";var j3F="Ja";var N3F="ary";var z3F="Febru";var q3F="pr";var k3F="y";var I3F="l";var T3F="J";var v3F="ugust";var x3F="A";var E3F="be";var m3F="eptem";var C3F="S";var g3F="ob";var B3F="Oct";var Y3F="Su";var Z9F="W";var J9F="h";var X9F="Hou";var S9F="ute";var V9F="Min";var P9F="cond";var c9F="Se";var u9F="ons";var p9F="mOpti";var t9F="for";var i9F="c";var Q9F="bas";var n9F="_";var U9F="T";var h9F="sing_Indicato";var G9F="ces";var e9F="DTE_Pro";var F9F="er";var L9F="E_Head";var H9F="r_Content";var A9F="DTE_Heade";var O9F="_Footer";var o9F="E";var y9F="TE_Form";var D9F="rm_Buttons";var w9F="DTE_Fo";var K9F="t";var a9F="b";var W9F="ield_Name_";var l9F="DTE_F";var R9F="el";var b9F="ab";var d9F="TE_L";var s9F="D";var M9F="age";var r9F="E_Field_Mess";var f9F="DT";var j9F="Info";var N9F="DTE_Field_";var z9F="store";var q9F="multi-re";var k9F="ator";var I9F="DTE_Processing_Indic";var T9F="ction_Create";var v9F="DTE_A";var x9F="ne_Field";var E9F="i";var m9F="_Inl";var C9F="ubble";var g9F="B";var B9F=" DTE_";var Y9F="_Bubble_Liner";var Z1F="DTE";var J1F="iangle";var X1F="r";var S1F="ble_T";var V1F="DTE_Bub";var P1F="ypes";var c1F="fieldT";var u1F="m";var p1F="Ti";var t1F="Date";var i1F="eTi";var Q1F="Dat";var n1F="otype";var U1F="prot";var h1F="lts";var G1F="u";var e1F="defa";var F1F="-datetime";var L1F="ditor";var H1F="-DD";var A1F="-MM";var O1F="YYYY";var o1F="me";var y1F="eti";var D1F="dat";var w1F="e";var K1F="pes";var a1F="Ty";var W1F="ld";var l1F="fie";var R1F="les";var b1F="fi";var d1F="ion";var s1F="vers";var u8F=500;var p8F=400;var i8F=100;var Q8F=60;var n8F=59;var F8F=30;var A8F=27;var y8F=24;var w8F=20;var W8F=13;var l8F=12;var R8F=11;var b8F=10;var s8F=7;var r8F=4;var f8F=3;var j8F=2;var N8F=1;var z8F=0;var q8F=s1F;q8F+=d1F;var k8F=b1F;k8F+=R1F;var I8F=l1F;I8F+=W1F;I8F+=a1F;I8F+=K1F;var X3I=w1F;X3I+=L1U.q1F;var S3I=D1F;S3I+=y1F;S3I+=o1F;var V3I=O1F;V3I+=A1F;V3I+=H1F;var P3I=w1F;P3I+=L1F;P3I+=F1F;var c3I=e1F;c3I+=G1F;c3I+=h1F;var B0I=U1F;B0I+=n1F;var Y0I=Q1F;Y0I+=i1F;Y0I+=o1F;var Y2I=t1F;Y2I+=p1F;Y2I+=u1F;Y2I+=w1F;var Z5I=c1F;Z5I+=P1F;var z6M=V1F;z6M+=S1F;z6M+=X1F;z6M+=J1F;var q6M=Z1F;q6M+=Y9F;var k6M=Z1F;k6M+=B9F;k6M+=g9F;k6M+=C9F;var I6M=Z1F;I6M+=m9F;I6M+=E9F;I6M+=x9F;var T6M=v9F;T6M+=T9F;var v6M=I9F;v6M+=k9F;var x6M=q9F;x6M+=z9F;var E6M=N9F;E6M+=j9F;var m6M=f9F;m6M+=r9F;m6M+=M9F;var C6M=s9F;C6M+=d9F;C6M+=b9F;C6M+=R9F;var g6M=l9F;g6M+=W9F;var B6M=a9F;B6M+=K9F;B6M+=L1U.q1F;var Y6M=w9F;Y6M+=D9F;var Z4M=s9F;Z4M+=y9F;var J4M=f9F;J4M+=o9F;J4M+=O9F;var X4M=A9F;X4M+=H9F;var S4M=f9F;S4M+=L9F;S4M+=F9F;var V4M=e9F;V4M+=G9F;V4M+=h9F;V4M+=X1F;var P4M=s9F;P4M+=U9F;P4M+=o9F;var M9M=n9F;M9M+=Q9F;M9M+=E9F;M9M+=i9F;var r9M=t9F;r9M+=p9F;r9M+=u9F;var f9M=c9F;f9M+=P9F;var j9M=V9F;j9M+=S9F;var N9M=X9F;N9M+=X1F;var z9M=L1U.x1F;z9M+=u1F;var q9M=U9F;q9M+=J9F;q9M+=G1F;var k9M=Z9F;k9M+=w1F;k9M+=L1U.j1F;var I9M=U9F;I9M+=G1F;I9M+=w1F;var T9M=Y3F;T9M+=L1U.q1F;var v9M=B3F;v9M+=g3F;v9M+=w1F;v9M+=X1F;var x9M=C3F;x9M+=m3F;x9M+=E3F;x9M+=X1F;var E9M=x3F;E9M+=v3F;var m9M=T3F;m9M+=G1F;m9M+=I3F;m9M+=k3F;var C9M=x3F;C9M+=q3F;C9M+=E9F;C9M+=I3F;var g9M=z3F;g9M+=N3F;var B9M=j3F;B9M+=L1U.q1F;B9M+=f3F;B9M+=k3F;var Y9M=r3F;Y9M+=M3F;Y9M+=s3F;var Z1M=s9F;Z1M+=w1F;Z1M+=d3F;Z1M+=w1F;var J1M=b3F;J1M+=R3F;var X1M=l3F;X1M+=W3F;X1M+=K9F;X1M+=w1F;var S1M=a3F;S1M+=K3F;S1M+=K9F;S1M+=w3F;var V1M=D3F;V1M+=w1F;V1M+=y3F;var P1M=s9F;P1M+=U9F;P1M+=o3F;P1M+=L1U.j1F;var c1M=O3F;c1M+=A3F;c1M+=H3F;var p1M=L3F;p1M+=F3F;var K1M=q3F;K1M+=e3F;var D8M=G3F;D8M+=h3F;D8M+=U3F;D8M+=n3F;var w8M=Q3F;w8M+=K9F;w8M+=n1F;var q8M=i3F;q8M+=t3F;var s7M=p3F;s7M+=u3F;s7M+=c3F;var m7M=P3F;m7M+=V3F;m7M+=S3F;m7M+=c3F;var Y7M=X3F;Y7M+=J3F;Y7M+=Z3F;var a0M=Y4F;a0M+=B4F;var a2M=n9F;a2M+=t9F;a2M+=g4F;a2M+=C4F;var W2M=X3F;W2M+=J3F;W2M+=X3F;W2M+=w1F;var b2M=q3F;b2M+=m4F;b2M+=E4F;b2M+=w1F;var M2M=n9F;M2M+=x4F;M2M+=v4F;M2M+=T4F;var r2M=X3F;r2M+=J3F;r2M+=Z3F;var N2M=I4F;N2M+=k4F;N2M+=q4F;var Y2M=q3F;Y2M+=z4F;Y2M+=k3F;Y2M+=Z3F;var D5M=N4F;D5M+=E9F;D5M+=K9F;var v5M=j4F;v5M+=f4F;v5M+=r4F;v5M+=M4F;var Z6V=n9F;Z6V+=s4F;Z6V+=d4F;Z6V+=A3F;var J6V=b4F;J6V+=R4F;J6V+=X3F;J6V+=w1F;var G6V=n9F;G6V+=l4F;G6V+=W4F;var e6V=a4F;e6V+=X3F;e6V+=w1F;var y6V=n9F;y6V+=K4F;y6V+=X1F;var D6V=w4F;D6V+=D4F;var R6V=X3F;R6V+=J3F;R6V+=Z3F;var r6V=n9F;r6V+=L1U.x1F;r6V+=y4F;r6V+=o4F;var n4V=O4F;n4V+=A4F;n4V+=H4F;var x3V=L4F;x3V+=F4F;var t1V=e4F;t1V+=L1U.q1F;var i1V=b1F;i1V+=I3F;i1V+=w1F;i1V+=G4F;var Q1V=h4F;Q1V+=U4F;Q1V+=n4F;var G1V=h4F;G1V+=I3F;G1V+=Q4F;G1V+=i4F;var F1V=t4F;F1V+=p4F;F1V+=u4F;var O1V=c4F;O1V+=P4F;var o1V=t4F;o1V+=V4F;o1V+=S4F;o1V+=X4F;var D1V=J4F;D1V+=Z4F;var w1V=Y6F;w1V+=e4F;w1V+=B6F;var s1V=g6F;s1V+=L1U.x1F;s1V+=I3F;var M1V=X3F;M1V+=C6F;M1V+=n1F;var I1V=m6F;I1V+=w1F;var T1V=b4F;T1V+=R4F;T1V+=X3F;T1V+=w1F;var x1V=R3F;x1V+=u1F;x1V+=E6F;x1V+=R3F;var Z8V=x6F;Z8V+=v6F;var J8V=w4F;J8V+=k3F;J8V+=X3F;J8V+=w1F;var V8V=T6F;V8V+=e4F;V8V+=y3F;var c8V=x6F;c8V+=w1F;c8V+=K9F;var W8V=q3F;W8V+=z4F;W8V+=I6F;W8V+=w1F;var x8V=k6F;x8V+=c3F;var E8V=U1F;E8V+=n1F;var g8V=e4F;g8V+=L1U.q1F;g8V+=w1F;var B8V=X3F;B8V+=q6F;B8V+=R4F;B8V+=Z3F;var Z7V=e4F;Z7V+=L1U.q1F;var J7V=q3F;J7V+=m4F;J7V+=m4F;J7V+=D4F;var c7V=Q3F;c7V+=z6F;c7V+=R4F;c7V+=Z3F;var Q7V=u1F;Q7V+=N6F;Q7V+=j6F;var n7V=X3F;n7V+=C6F;n7V+=m4F;n7V+=D4F;var e7V=u1F;e7V+=f6F;e7V+=K9F;e7V+=r6F;var F7V=X3F;F7V+=J3F;F7V+=Z3F;var H7V=u1F;H7V+=e4F;H7V+=M6F;var A7V=q3F;A7V+=s6F;A7V+=K9F;A7V+=D4F;var w7V=u1F;w7V+=e4F;w7V+=L1U.j1F;w7V+=w1F;var K7V=a4F;K7V+=Z3F;var W0V=E9F;W0V+=d6F;W0V+=b6F;var l0V=Q3F;l0V+=R6F;l0V+=D4F;var s0V=E9F;s0V+=L1U.q1F;s0V+=l6F;s0V+=W6F;var z0V=a6F;z0V+=q4F;var q0V=U1F;q0V+=n1F;var v0V=q3F;v0V+=m4F;v0V+=m4F;v0V+=D4F;var x0V=L1U.z1F;x0V+=E9F;x0V+=K6F;x0V+=x6F;var E0V=Q3F;E0V+=K9F;E0V+=E4F;E0V+=w1F;var m0V=X3F;m0V+=C6F;m0V+=n1F;var g0V=w6F;g0V+=D6F;var B0V=w4F;B0V+=D4F;var Z2V=l1F;Z2V+=I3F;Z2V+=L1U.j1F;var V2V=w1F;V2V+=X1F;V2V+=t4F;V2V+=X1F;var c2V=U1F;c2V+=y6F;c2V+=Z3F;var Q2V=o6F;Q2V+=O6F;var n2V=X3F;n2V+=t4F;n2V+=K9F;n2V+=n1F;var G2V=L1U.j1F;G2V+=A6F;G2V+=L1U.j1F;var e2V=X3F;e2V+=H6F;e2V+=I6F;e2V+=w1F;var H2V=L6F;H2V+=F6F;var O2V=X3F;O2V+=t4F;O2V+=e6F;var b2V=L1U.j1F;b2V+=G6F;b2V+=K9F;b2V+=h6F;var J5V=Q3F;J5V+=e6F;var p5V=U6F;p5V+=w1F;p5V+=n6F;var t5V=U1F;t5V+=n1F;var w5V=Q6F;w5V+=w1F;var M5V=U1F;M5V+=m4F;M5V+=D4F;var P61=q3F;P61+=s6F;P61+=R4F;P61+=Z3F;var R41=X3F;R41+=H6F;R41+=k3F;R41+=Z3F;var s41=U1F;s41+=m4F;s41+=D4F;var m41=L1U.x1F;m41+=L1U.j1F;m41+=L1U.j1F;var v81=X1F;v81+=i6F;var x81=L1U.x1F;x81+=I3F;x81+=I3F;var E81=L1U.z1F;E81+=e4F;E81+=t6F;E81+=x6F;var m81=i9F;m81+=I3F;m81+=e4F;m81+=p6F;var C81=u6F;C81+=w1F;var g81=L1U.z1F;g81+=c6F;g81+=P6F;g81+=V6F;var B81=x6F;B81+=S6F;B81+=E9F;B81+=X6F;var Y81=J6F;Y81+=w1F;Y81+=I3F;Y81+=x6F;var Z71=L1U.j1F;Z71+=Z6F;Z71+=Y5u;Z71+=B5u;var J71=g5u;J71+=C5u;var X71=m5u;X71+=E9F;X71+=R9F;X71+=L1U.j1F;var S71=x6F;S71+=S6F;S71+=E5u;S71+=x5u;var V71=m5u;V71+=v5u;V71+=I3F;V71+=L1U.j1F;var P71=T5u;P71+=K9F;var c71=q4F;c71+=L1U.z1F;c71+=I5u;var u71=J6F;u71+=R9F;u71+=x6F;var Y51=o9F;Y51+=L1U.j1F;Y51+=k5u;Y51+=q5u;var Z6=s9F;Z6+=z5u;Z6+=w1F;var J6=L1U.z1F;J6+=L1U.q1F;var S6=g6F;S6+=F9F;S6+=N5u;var V6=j5u;V6+=f5u;V6+=r5u;'use strict';L1U.X9=function(S9){if(L1U)return L1U.F2(S9);};(function(){var t5u=' day';var i5u='DataTables Editor trial info - ';var U5u=" rem";var h5u='Editor - Trial expired';var G5u='Your trial has now expired. To purchase a license ';var e5u="599a";var F5u='Thank you for trying DataTables Editor\n\n';var L5u="e7";var H5u="1c";var A5u="tables.net/purchase";var O5u="ps://editor.data";var o5u="for Editor, please see htt";var y5u="ff7";var D5u="bd88";var w5u="f1c7";var K5u="d2bd";var W5u="4514";var l5u="15";var s5u="12";var M5u="6";var Y1F=1553558400;var Z8F=386159168;var X8F=6417;var S8F=4847;var V8F=1000;var O8F=26;var i6=L1U.v1F;i6+=M5u;i6+=L1U.B1F;i6+=L1U.j1F;var Q6=s5u;Q6+=L1U.C1F;Q6+=L1U.m1F;var n6=d5u;n6+=K9F;n6+=b5u;n6+=w1F;var U6=A3F;U6+=R5u;U6+=b5u;U6+=w1F;var h6=M5u;h6+=L1U.v1F;h6+=l5u;L1U.H6=function(A6){if(L1U)return L1U.F2(A6);};L1U.m6=function(C6){if(L1U&&C6)return L1U.e2(C6);};L1U.y4=function(D4){if(L1U&&D4)return L1U.e2(D4);};L1U.B4=function(Y4){if(L1U&&Y4)return L1U.F2(Y4);};L1U.a3=function(W3){if(L1U&&W3)return L1U.e2(W3);};L1U.l9=function(R9){if(L1U)return L1U.F2(R9);};L1U.P8=function(c8){if(L1U)return L1U.F2(c8);};var remaining=Math[L1U.p7(W5u)?L1U.f1F:a5u]((new Date((L1U.s8(h6)?Z8F:Y1F)*(L1U.P8(K5u)?V8F:S8F))[U6]()-new Date()[n6]())/((L1U.l9(w5u)?V8F:X8F)*(L1U.X9(Q6)?f8F:Q8F)*(L1U.a3(i6)?O8F:Q8F)*(L1U.B4(D5u)?F8F:y8F)));if(remaining<=z8F){var u6=L1U.x1F;u6+=y5u;var p6=o5u;p6+=O5u;p6+=A5u;var t6=H5u;t6+=L5u;alert((L1U.y4(t6)?L1U.f1F:F5u)+(L1U.m6(e5u)?G5u:L1U.f1F)+p6);throw L1U.H6(u6)?h5u:L1U.f1F;}else if(remaining<=s8F){var P6=U5u;P6+=n5u;P6+=E9F;P6+=Q5u;var c6=I3F;c6+=e4F;c6+=A3F;console[c6](i5u+remaining+t5u+(remaining===N8F?p5u:u5u)+P6);}}());var DataTable=$[c5u][V6];if(!DataTable||!DataTable[S6]||!DataTable[P5u](V5u)){throw S5u;}var Editor=function(opts){var Z5u="DataTables Editor must be initialised as a 'new' instance'";var J5u="ructor";var X5u="_cons";var X6=X5u;X6+=K9F;X6+=J5u;if(!(this instanceof Editor)){alert(Z5u);}this[X6](opts);};DataTable[Y2u]=Editor;$[J6][Z6][Y51]=Editor;var _editor_el=function(dis,ctx){var E2u="te-e=\"";var m2u="ta-d";var C2u="*[da";var g51=B2u;g51+=g2u;var B51=C2u;B51+=m2u;B51+=E2u;if(ctx===undefined){ctx=document;}return $(B51+dis+g51,ctx);};var __inlineCounter=z8F;var _pluck=function(a,prop){var C51=x2u;C51+=J9F;var out=[];$[C51](a,function(idx,el){var m51=v2u;m51+=x6F;m51+=J9F;out[m51](el[prop]);});return out;};var _api_file=function(name,id){var N2u='Unknown file id ';var z2u="e ";var k2u="in ta";var E51=T2u;E51+=G6F;var table=this[E51](name);var file=table[id];if(!file){var x51=I2u;x51+=k2u;x51+=q2u;x51+=z2u;throw N2u+id+x51+name;}return table[id];};var _api_files=function(name){var d2u="e table name: ";var M2u="known f";var r2u="Un";var T51=L1U.z1F;T51+=j2u;if(!name){var v51=f2u;v51+=x6F;return Editor[v51];}var table=Editor[T51][name];if(!table){var I51=r2u;I51+=M2u;I51+=s2u;I51+=d2u;throw I51+name;}return table;};var _objectKeys=function(o){var W2u="erty";var l2u="Prop";var R2u="sOwn";var out=[];for(var key in o){var k51=b2u;k51+=R2u;k51+=l2u;k51+=W2u;if(o[k51](key)){var q51=a2u;q51+=J9F;out[q51](key);}}return out;};var _deepCompare=function(o1,o2){var z51=I3F;z51+=K2u;z51+=w2u;if(typeof o1!==L1U.M1F||typeof o2!==L1U.M1F){return o1==o2;}var o1Props=_objectKeys(o1);var o2Props=_objectKeys(o2);if(o1Props[D2u]!==o2Props[z51]){return y2u;}for(var i=z8F,ien=o1Props[D2u];i<ien;i++){var propName=o1Props[i];if(typeof o1[propName]===L1U.M1F){if(!_deepCompare(o1[propName],o2[propName])){return y2u;}}else if(o1[propName]!=o2[propName]){return y2u;}}return o2u;};Editor[O2u]=function(opts,classes,host){var Q7u='field-processing';var n7u='multi-value';var U7u='msg-info';var H7u='input-control';var y7u='<div data-dte-e="field-processing" class="';var D7u='<div data-dte-e="msg-info" class="';var K7u='msg-message';var a7u='<div data-dte-e="msg-message" class="';var W7u='"></div>';var b7u='<span data-dte-e="multi-info" class="';var d7u='<div data-dte-e="input" class="';var s7u='</label>';var f7u='msg-label';var k7u="namePrefix";var I7u="typePrefix";var C7u="aProp";var g7u="_Field_";var B7u="Error adding field - unknown field type ";var X0u="ieldTyp";var S0u="Fi";var V0u="tting";var P0u="taPr";var c0u="alFromData";var p0u="To";var i0u="aFn";var Q0u="ObjectDat";var n0u="_fn";var U0u="v class=\"";var F0u="bel\" class=\"";var L0u="=\"la";var H0u="<label data-dte-e";var A0u="or=";var O0u="\" f";var o0u="msg-label\" class=\"";var y0u="<div data-dte-e=\"";var W0u="ntrol\" ";var l0u="<div data-dte-e=\"input-co";var R0u="trol";var b0u="putCon";var M0u="<div data-dte-e=\"multi-value\" cl";var j0u="-e=\"msg-multi\" class=\"";var N0u="<div data-dte";var q0u="multiRe";var T0u="div data-dte-e=\"msg-error\" class";var x0u="g-error";var m0u="g-";var C0u="eldInf";var X2u="an/></d";var S2u="\"><sp";var Q2u="msg-";var n2u="g-messa";var U2u="ms";var G2u="msg-m";var e2u="-in";var L2u="eturn";var H2u="iR";var A2u="mult";var H21=w1F;H21+=L1U.x1F;H21+=i9F;H21+=J9F;var A21=e4F;A21+=L1U.q1F;var O21=A2u;O21+=H2u;O21+=L2u;var D21=L1U.j1F;D21+=e4F;D21+=u1F;var w21=F2u;w21+=e2u;w21+=L1U.z1F;w21+=e4F;var K21=G2u;K21+=f6F;K21+=h2u;var a21=U2u;a21+=n2u;a21+=d5u;var W21=Q2u;W21+=w1F;W21+=i2u;var l21=I3F;l21+=L1U.x1F;l21+=E3F;l21+=I3F;var R21=t2u;R21+=q4F;R21+=I3F;R21+=x6F;var b21=p2u;b21+=R3F;b21+=u2u;var d21=L1U.j1F;d21+=e4F;d21+=u1F;var M21=i9F;M21+=c2u;M21+=w1F;var r21=P2u;r21+=V2u;var f21=S2u;f21+=X2u;f21+=E9F;f21+=J2u;var j21=Z2u;j21+=J2u;var N21=Y0u;N21+=B0u;N21+=g0u;var z21=L1U.z1F;z21+=E9F;z21+=C0u;z21+=e4F;var q21=u1F;q21+=x6F;q21+=m0u;q21+=E0u;var k21=u1F;k21+=x6F;k21+=x0u;var I21=v0u;I21+=T0u;I21+=I0u;var T21=Z2u;T21+=J2u;var v21=X1F;v21+=G6F;v21+=z6F;v21+=k0u;var x21=B2u;x21+=g0u;var E21=q0u;E21+=z0u;E21+=e4F;E21+=k0u;var m21=N0u;m21+=j0u;var C21=v0u;C21+=f0u;C21+=g6F;C21+=g0u;var g21=B2u;g21+=g0u;var B21=K9F;B21+=k5u;B21+=I3F;B21+=w1F;var Y21=B2u;Y21+=g0u;var Z51=F2u;Z51+=r0u;var J51=M0u;J51+=s0u;var X51=B2u;X51+=d0u;X51+=g0u;var S51=E5u;S51+=b0u;S51+=R0u;var V51=l0u;V51+=W0u;V51+=a0u;V51+=K0u;var P51=w0u;P51+=D0u;var c51=B2u;c51+=g0u;var u51=y0u;u51+=o0u;var p51=E9F;p51+=L1U.j1F;var t51=O0u;t51+=A0u;t51+=B2u;var i51=I3F;i51+=b9F;i51+=w1F;i51+=I3F;var Q51=H0u;Q51+=L0u;Q51+=F0u;var n51=B2u;n51+=g0u;var U51=L1U.q1F;U51+=L1U.x1F;U51+=u1F;U51+=w1F;var h51=e0u;h51+=w1F;var G51=G0u;G51+=X3F;G51+=F9F;var e51=h0u;e51+=U0u;var F51=L1U.j1F;F51+=L1U.x1F;F51+=K9F;F51+=L1U.x1F;var L51=n0u;L51+=j6F;L51+=Q0u;L51+=i0u;var H51=t0u;H51+=p0u;H51+=s9F;H51+=u0u;var A51=g6F;A51+=c0u;var D51=W3F;D51+=P0u;D51+=e4F;D51+=X3F;var W51=E9F;W51+=L1U.j1F;var l51=L1U.q1F;l51+=L1U.x1F;l51+=o1F;var R51=K9F;R51+=k3F;R51+=Z3F;var b51=c1F;b51+=D4F;b51+=x6F;var d51=x6F;d51+=w1F;d51+=V0u;d51+=x6F;var s51=S0u;s51+=R9F;s51+=L1U.j1F;var r51=K9F;r51+=k3F;r51+=Z3F;var f51=L1U.z1F;f51+=X0u;f51+=w1F;f51+=x6F;var j51=m5u;j51+=v5u;j51+=W1F;var N51=E9F;N51+=J0u;N51+=L1U.q1F;var that=this;var multiI18n=host[N51][F2u];opts=$[Z0u](o2u,{},Editor[j51][Y7u],opts);if(!Editor[f51][opts[r51]]){var M51=K9F;M51+=I6F;M51+=w1F;throw B7u+opts[M51];}this[x6F]=$[Z0u]({},Editor[s51][d51],{type:Editor[b51][opts[R51]],name:opts[l51],classes:classes,host:host,opts:opts,multiValue:y2u});if(!opts[W51]){var w51=L1U.q1F;w51+=L1U.x1F;w51+=o1F;var K51=Z1F;K51+=g7u;var a51=E9F;a51+=L1U.j1F;opts[a51]=K51+opts[w51];}if(opts[D51]){var o51=D1F;o51+=C7u;var y51=L1U.j1F;y51+=u0u;opts[y51]=opts[o51];}if(opts[j5u]===p5u){var O51=L1U.q1F;O51+=L1U.x1F;O51+=o1F;opts[j5u]=opts[O51];}var dtPrivateApi=DataTable[m7u][E7u];this[A51]=function(d){var v7u='editor';return dtPrivateApi[x7u](opts[j5u])(d,v7u);};this[H51]=dtPrivateApi[L51](opts[F51]);var template=$(e51+classes[G51]+T7u+classes[I7u]+opts[h51]+T7u+classes[k7u]+opts[U51]+T7u+opts[q7u]+n51+Q51+classes[i51]+t51+Editor[z7u](opts[p51])+N7u+opts[j7u]+u51+classes[f7u]+c51+opts[r7u]+M7u+s7u+d7u+classes[P51]+N7u+V51+classes[S51]+X51+J51+classes[Z51]+Y21+multiI18n[B21]+b7u+classes[R7u]+g21+multiI18n[E0u]+l7u+C21+m21+classes[E21]+x21+multiI18n[v21]+T21+I21+classes[k21]+W7u+a7u+classes[K7u]+N7u+opts[w7u]+M7u+D7u+classes[q21]+N7u+opts[z21]+N21+j21+y7u+classes[o7u]+f21+r21);var input=this[O7u](M21,opts);if(input!==A7u){_editor_el(H7u,template)[L7u](input);}else{var s21=F7u;s21+=b6F;template[e7u](G7u,s21);}this[d21]=$[b21](o2u,{},Editor[O2u][R21][h7u],{container:template,inputControl:_editor_el(H7u,template),label:_editor_el(l21,template),fieldInfo:_editor_el(U7u,template),labelInfo:_editor_el(f7u,template),fieldError:_editor_el(W21,template),fieldMessage:_editor_el(a21,template),multi:_editor_el(n7u,template),multiReturn:_editor_el(K21,template),multiInfo:_editor_el(w21,template),processing:_editor_el(Q7u,template)});this[D21][F2u][i7u](t7u,function(){var V7u='readonly';var y21=K9F;y21+=I6F;y21+=w1F;if(that[x6F][p7u][u7u]&&!template[c7u](classes[P7u])&&opts[y21]!==V7u){var o21=g6F;o21+=S7u;that[o21](p5u);that[X7u]();}});this[h7u][O21][A21](t7u,function(){var J7u="multiRestore";that[J7u]();});$[H21](this[x6F][Z7u],function(name,fn){if(typeof fn===Y8u&&that[name]===undefined){that[name]=function(){var F21=B8u;F21+=g8u;var L21=C8u;L21+=x6F;L21+=a6F;L21+=m8u;var args=Array[E8u][x8u][v8u](arguments);args[L21](name);var ret=that[O7u][F21](that,args);return ret===undefined?that:ret;};}});};Editor[O2u][E8u]={def:function(set){var q8u='default';var k8u="aul";var U21=L1U.j1F;U21+=w1F;U21+=L1U.z1F;var e21=e4F;e21+=T8u;var opts=this[x6F][e21];if(set===undefined){var h21=L1U.j1F;h21+=w1F;h21+=L1U.z1F;var G21=I8u;G21+=k8u;G21+=K9F;var def=opts[q8u]!==undefined?opts[G21]:opts[h21];return typeof def===Y8u?def():def;}opts[U21]=set;return this;},disable:function(){var r8u="ntai";var N8u="addC";var t21=s4F;t21+=z8u;t21+=p6F;t21+=x6F;var i21=N8u;i21+=j8u;var Q21=f8u;Q21+=r8u;Q21+=M8u;var n21=L1U.j1F;n21+=e4F;n21+=u1F;this[n21][Q21][i21](this[x6F][t21][P7u]);this[O7u](s8u);return this;},displayed:function(){var b8u="bod";var c21=i9F;c21+=d8u;var u21=b8u;u21+=k3F;var p21=L1U.j1F;p21+=e4F;p21+=u1F;var container=this[p21][R8u];return container[l8u](u21)[D2u]&&container[c21](G7u)!=W8u?o2u:y2u;},enable:function(){var o8u='enable';var a8u="isab";var X21=L1U.j1F;X21+=a8u;X21+=K6F;X21+=L1U.j1F;var S21=K8u;S21+=j8u;var V21=w8u;V21+=D8u;V21+=X1F;var P21=L1U.j1F;P21+=e4F;P21+=u1F;this[P21][V21][S21](this[x6F][y8u][X21]);this[O7u](o8u);return this;},enabled:function(){var O8u="asses";var Y01=i9F;Y01+=I3F;Y01+=O8u;var Z21=A8u;Z21+=H8u;Z21+=x6F;var J21=L1U.j1F;J21+=e4F;J21+=u1F;return this[J21][R8u][Z21](this[x6F][Y01][P7u])===y2u;},error:function(msg,fn){var h8u="orMessage";var L8u="fieldE";var I01=L8u;I01+=F8u;I01+=X1F;var T01=e8u;T01+=u1F;var v01=G8u;v01+=h8u;var x01=U8u;x01+=X3F;x01+=w1F;x01+=n8u;var B01=i9F;B01+=I3F;B01+=Q8u;B01+=G6F;var classes=this[x6F][B01];if(msg){var C01=i8u;C01+=M8u;var g01=L1U.j1F;g01+=e4F;g01+=u1F;this[g01][C01][t8u](classes[p8u]);}else{var E01=w1F;E01+=X1F;E01+=W6F;var m01=L1U.j1F;m01+=e4F;m01+=u1F;this[m01][R8u][u8u](classes[E01]);}this[x01](v01,msg);return this[c8u](this[T01][I01],msg,fn);},fieldInfo:function(msg){var P8u="Inf";var q01=x4F;q01+=P8u;q01+=e4F;var k01=e8u;k01+=u1F;return this[c8u](this[k01][q01],msg);},isMultiValue:function(){var z01=K6F;z01+=Q5u;z01+=w2u;return this[x6F][V8u]&&this[x6F][S8u][z01]!==N8F;},inError:function(){return this[h7u][R8u][c7u](this[x6F][y8u][p8u]);},input:function(){var Y1u='input, select, textarea';var f01=L1U.j1F;f01+=e4F;f01+=u1F;var j01=X8u;j01+=D4F;j01+=m5u;j01+=L1U.q1F;var N01=E9F;N01+=J8u;N01+=K9F;return this[x6F][Z7u][N01]?this[j01](Z8u):$(Y1u,this[f01][R8u]);},focus:function(){var B1u="put, select, texta";if(this[x6F][Z7u][X7u]){var r01=L1U.z1F;r01+=e4F;r01+=t6F;r01+=x6F;this[O7u](r01);}else{var s01=i8u;s01+=b6F;s01+=X1F;var M01=E9F;M01+=L1U.q1F;M01+=B1u;M01+=g1u;$(M01,this[h7u][s01])[X7u]();}return this;},get:function(){var b01=L1U.j1F;b01+=w1F;b01+=L1U.z1F;var d01=A3F;d01+=w1F;d01+=K9F;if(this[C1u]()){return undefined;}var val=this[O7u](d01);return val!==undefined?val:this[b01]();},hide:function(animate){var R01=m1u;R01+=E1u;var el=this[h7u][R8u];if(animate===undefined){animate=o2u;}if(this[x6F][x1u][R01]()&&animate&&$[c5u][v1u]){var l01=x6F;l01+=O3F;l01+=q4F;l01+=l3F;el[l01]();}else{var a01=L1U.q1F;a01+=T1u;var W01=I1u;W01+=x6F;el[W01](G7u,a01);}return this;},label:function(str){var K01=q4F;K01+=k1u;var label=this[h7u][j7u];var labelInfo=this[h7u][r7u][K01]();if(str===undefined){var w01=J9F;w01+=K9F;w01+=u1F;w01+=I3F;return label[w01]();}label[q1u](str);label[z1u](labelInfo);return this;},labelInfo:function(msg){var f1u="sg";var j1u="_m";var N1u="abelInfo";var o01=I3F;o01+=N1u;var y01=L1U.j1F;y01+=e4F;y01+=u1F;var D01=j1u;D01+=f1u;return this[D01](this[y01][o01],msg);},message:function(msg,fn){var r1u="dMessag";var O01=b1F;O01+=R9F;O01+=r1u;O01+=w1F;return this[c8u](this[h7u][O01],msg,fn);},multiGet:function(id){var d1u="multiValues";var s1u="ltiI";var M1u="isMulti";var H01=M1u;H01+=r0u;var A01=u1F;A01+=G1F;A01+=s1u;A01+=D6F;var value;var multiValues=this[x6F][d1u];var multiIds=this[x6F][A01];var isMultiValue=this[H01]();if(id===undefined){var F01=I3F;F01+=K2u;F01+=w2u;var L01=g6F;L01+=L1U.x1F;L01+=I3F;var fieldVal=this[L01]();value={};for(var i=z8F;i<multiIds[F01];i++){value[multiIds[i]]=isMultiValue?multiValues[multiIds[i]]:fieldVal;}}else if(isMultiValue){value=multiValues[id];}else{value=this[t0u]();}return value;},multiRestore:function(){var R1u="ltiValueCheck";var b1u="_mu";var e01=b1u;e01+=R1u;this[x6F][V8u]=o2u;this[e01]();},multiSet:function(id,val){var W1u="lainObject";var l1u="isP";var h01=l1u;h01+=W1u;var G01=V8u;G01+=x6F;var multiValues=this[x6F][G01];var multiIds=this[x6F][S8u];if(val===undefined){val=id;id=undefined;}var set=function(idSrc,val){if($[a1u](multiIds)===-N8F){multiIds[K1u](idSrc);}multiValues[idSrc]=val;};if($[h01](val)&&id===undefined){$[w1u](val,function(idSrc,innerVal){set(idSrc,innerVal);});}else if(id===undefined){$[w1u](multiIds,function(i,idSrc){set(idSrc,val);});}else{set(id,val);}this[x6F][V8u]=o2u;this[D1u]();return this;},name:function(){var n01=L1U.q1F;n01+=L1U.x1F;n01+=u1F;n01+=w1F;var U01=e4F;U01+=X3F;U01+=K9F;U01+=x6F;return this[x6F][U01][n01];},node:function(){var y1u="taine";var i01=i9F;i01+=i7u;i01+=y1u;i01+=X1F;var Q01=L1U.j1F;Q01+=e4F;Q01+=u1F;return this[Q01][i01][z8F];},processing:function(set){var O1u="processin";var c01=L1U.q1F;c01+=T1u;var u01=L1U.j1F;u01+=Z6F;u01+=o1u;u01+=k3F;var p01=i9F;p01+=x6F;p01+=x6F;var t01=O1u;t01+=A3F;this[h7u][t01][p01](u01,set?A1u:c01);return this;},set:function(val,multiCheck){var t1u="entityDecode";var X01=x6F;X01+=w1F;X01+=K9F;var decodeFn=function(d){var i1u='\n';var Q1u='\'';var n1u='"';var h1u='<';var e1u='>';var L1u="epla";var S01=k0u;S01+=H1u;S01+=w1F;var V01=X1F;V01+=L1u;V01+=i9F;V01+=w1F;var P01=k0u;P01+=E6F;P01+=h4F;return typeof d!==F1u?d:d[P01](/&gt;/g,e1u)[G1u](/&lt;/g,h1u)[V01](/&amp;/g,U1u)[G1u](/&quot;/g,n1u)[S01](/&#39;/g,Q1u)[G1u](/&#10;/g,i1u);};this[x6F][V8u]=y2u;var decode=this[x6F][p7u][t1u];if(decode===undefined||decode===o2u){if($[p1u](val)){for(var i=z8F,ien=val[D2u];i<ien;i++){val[i]=decodeFn(val[i]);}}else{val=decodeFn(val);}}this[O7u](X01,val);if(multiCheck===undefined||multiCheck===o2u){this[D1u]();}return this;},show:function(animate){var V1u="slideDown";var Y71=L1U.z1F;Y71+=L1U.q1F;var Z01=u1u;Z01+=c1u;Z01+=E1u;var J01=L1U.j1F;J01+=P1u;var el=this[J01][R8u];if(animate===undefined){animate=o2u;}if(this[x6F][x1u][Z01]()&&animate&&$[Y71][V1u]){el[V1u]();}else{var B71=i9F;B71+=x6F;B71+=x6F;el[B71](G7u,p5u);}return this;},val:function(val){var C71=x6F;C71+=w1F;C71+=K9F;var g71=A3F;g71+=w1F;g71+=K9F;return val===undefined?this[g71]():this[C71](val);},compare:function(value,original){var S1u="mpare";var m71=i9F;m71+=e4F;m71+=S1u;var compare=this[x6F][p7u][m71]||_deepCompare;return compare(value,original);},dataSrc:function(){return this[x6F][p7u][j5u];},destroy:function(){var J1u="eFn";var T71=X1u;T71+=h6F;var v71=U8u;v71+=X3F;v71+=J1u;var x71=Z1u;x71+=g6F;x71+=w1F;var E71=L1U.j1F;E71+=e4F;E71+=u1F;this[E71][R8u][x71]();this[v71](T71);return this;},multiEditable:function(){var B9u="tiEditable";var I71=Y9u;I71+=B9u;return this[x6F][p7u][I71];},multiIds:function(){var g9u="tiIds";var k71=Y9u;k71+=g9u;return this[x6F][k71];},multiInfoShown:function(show){this[h7u][R7u][e7u]({display:show?A1u:W8u});},multiReset:function(){var m9u="iI";var C9u="ultiValues";var z71=u1F;z71+=C9u;var q71=Y9u;q71+=K9F;q71+=m9u;q71+=D6F;this[x6F][q71]=[];this[x6F][z71]={};},submittable:function(){var N71=E9u;N71+=u1F;N71+=E9F;N71+=K9F;return this[x6F][p7u][N71];},valFromData:A7u,valToData:A7u,_errorNode:function(){var x9u="fieldError";var j71=L1U.j1F;j71+=e4F;j71+=u1F;return this[j71][x9u];},_msg:function(el,msg,fn){var r9u="deDow";var f9u="sl";var N9u=":visible";var q9u="parent";var T9u="functio";var M71=L1U.x1F;M71+=y4F;M71+=v9u;M71+=R3F;var r71=L1U.z1F;r71+=L1U.q1F;var f71=T9u;f71+=L1U.q1F;if(msg===undefined){return el[q1u]();}if(typeof msg===f71){var editor=this[x6F][x1u];msg=msg(editor,new DataTable[I9u](editor[x6F][k9u]));}if(el[q9u]()[z9u](N9u)&&$[r71][M71]){var s71=J9F;s71+=j9u;s71+=I3F;el[s71](msg);if(msg){var d71=f9u;d71+=E9F;d71+=r9u;d71+=L1U.q1F;el[d71](fn);}else{el[v1u](fn);}}else{var b71=i9F;b71+=x6F;b71+=x6F;el[q1u](msg||p5u)[b71](G7u,msg?A1u:W8u);if(fn){fn();}}return this;},_multiValueCheck:function(){var O9u="inputControl";var o9u="ontrol";var y9u="inputC";var D9u="multiValu";var K9u="Retur";var W9u="bloc";var l9u="Multi";var s9u="oE";var M9u="multiN";var U71=M9u;U71+=s9u;U71+=d9u;var h71=b9u;h71+=G6F;var G71=u1F;G71+=G1F;G71+=R9u;G71+=E9F;var e71=L1U.j1F;e71+=e4F;e71+=u1F;var F71=F7u;F71+=l9u;var L71=W9u;L71+=a9u;var H71=F2u;H71+=K9u;H71+=L1U.q1F;var A71=L1U.j1F;A71+=e4F;A71+=u1F;var l71=e4F;l71+=X3F;l71+=w9u;var R71=D9u;R71+=G6F;var last;var ids=this[x6F][S8u];var values=this[x6F][R71];var isMultiValue=this[x6F][V8u];var isMultiEditable=this[x6F][l71][u7u];var val;var different=y2u;if(ids){for(var i=z8F;i<ids[D2u];i++){val=values[ids[i]];if(i>z8F&&!_deepCompare(val,last)){different=o2u;break;}last=val;}}if(different&&isMultiValue||!isMultiEditable&&this[C1u]()){var D71=L1U.j1F;D71+=e4F;D71+=u1F;var w71=F7u;w71+=b6F;var K71=i9F;K71+=x6F;K71+=x6F;var a71=y9u;a71+=o9u;var W71=L1U.j1F;W71+=e4F;W71+=u1F;this[W71][a71][K71]({display:w71});this[D71][F2u][e7u]({display:A1u});}else{var o71=i9F;o71+=d8u;var y71=L1U.j1F;y71+=e4F;y71+=u1F;this[h7u][O9u][e7u]({display:A1u});this[y71][F2u][o71]({display:W8u});if(isMultiValue&&!different){var O71=p6F;O71+=K9F;this[O71](last,y2u);}}this[A71][H71][e7u]({display:ids&&ids[D2u]>N8F&&different&&!isMultiValue?L71:W8u});var i18n=this[x6F][x1u][A9u][F2u];this[h7u][R7u][q1u](isMultiEditable?i18n[E0u]:i18n[F71]);this[e71][G71][H9u](this[x6F][h71][U71],!isMultiEditable);this[x6F][x1u][L9u]();return o2u;},_typeFn:function(name){var t71=e0u;t71+=w1F;var i71=F9u;i71+=x6F;var Q71=x6F;Q71+=e9u;var n71=X3F;n71+=t4F;n71+=R6F;n71+=D4F;var args=Array[n71][Q71][v8u](arguments);args[G9u]();args[h9u](this[x6F][i71]);var fn=this[x6F][t71][name];if(fn){var p71=L1U.x1F;p71+=X3F;p71+=X3F;p71+=g8u;return fn[p71](this[x6F][x1u],args);}}};Editor[O2u][u71]={};Editor[O2u][c71]={"className":L1U.f1F,"data":L1U.f1F,"def":L1U.f1F,"fieldInfo":L1U.f1F,"id":L1U.f1F,"label":L1U.f1F,"labelInfo":L1U.f1F,"name":A7u,"type":P71,"message":L1U.f1F,"multiEditable":o2u,"submit":o2u};Editor[V71][U9u][S71]={type:A7u,name:A7u,classes:A7u,opts:A7u,host:A7u};Editor[X71][U9u][h7u]={container:A7u,label:A7u,labelInfo:A7u,fieldInfo:A7u,fieldError:A7u,fieldMessage:A7u};Editor[U9u]={};Editor[J71][Z71]={"init":function(dte){},"open":function(dte,append,fn){},"close":function(dte,fn){}};Editor[Y81][n9u]={"create":function(conf){},"get":function(conf){},"set":function(conf,val){},"enable":function(conf){},"disable":function(conf){}};Editor[U9u][B81]={"ajaxUrl":A7u,"ajax":A7u,"dataSource":A7u,"domTable":A7u,"opts":A7u,"displayController":A7u,"fields":{},"order":[],"id":-N8F,"displayed":y2u,"processing":y2u,"modifier":A7u,"action":A7u,"idSrc":A7u,"unique":z8F};Editor[U9u][Q9u]={"label":A7u,"fn":A7u,"className":A7u};Editor[U9u][g81]={onReturn:i9u,onBlur:C81,onBackground:t9u,onComplete:m81,onEsc:p9u,onFieldError:E81,submit:x81,focus:z8F,buttons:o2u,title:o2u,message:o2u,drawType:y2u,scope:v81};Editor[u9u]={};(function(){var O6u='<div class="DTED_Lightbox_Background"><div/></div>';var o6u='<div class="DTED_Lightbox_Content">';var y6u='<div class="DTED_Lightbox_Content_Wrapper">';var f4u='div.DTED_Lightbox_Content_Wrapper';var I4u='div.DTE_Footer';var p3u="wrappe";var z3u="_shown";var x3u="ghtbo";var m3u="er\">";var C3u="TED_Lightbox_Wrapp";var g3u="<div class=\"DTED D";var B3u="ainer\">";var Y3u="<div class=\"DTED_Lightbox_Cont";var J9u="/div";var X9u="s=\"DTED_Lightbox_Close\"></div>";var c9u="ightb";var o8F=25;var U11=I3F;U11+=c9u;U11+=e4F;U11+=P9u;var h11=V9u;h11+=S9u;h11+=z8u;h11+=X9u;var G11=v0u;G11+=J9u;G11+=g0u;var e11=Y0u;e11+=Z9u;var F11=Z2u;F11+=g6F;F11+=g0u;var L11=Y0u;L11+=Z9u;var H11=Y3u;H11+=B3u;var A11=g3u;A11+=C3u;A11+=m3u;var q81=L1U.j1F;q81+=Z6F;q81+=Y5u;q81+=B5u;var k81=p2u;k81+=E3u;var I81=O3F;I81+=x3u;I81+=P9u;var T81=L1U.j1F;T81+=Z6F;T81+=E1u;var self;Editor[T81][I81]=$[k81](o2u,{},Editor[U9u][q81],{"init":function(dte){var v3u="_init";self[v3u]();return self;},"open":function(dte,append,callback){var q3u="ontent";var r81=n9F;r81+=T3u;r81+=L1U.q1F;var f81=i9F;f81+=I3u;f81+=w1F;var j81=k3u;j81+=L1U.j1F;var N81=i9F;N81+=q3u;var z81=n9F;z81+=L1U.j1F;z81+=P1u;if(self[z3u]){if(callback){callback();}return;}self[N3u]=dte;var content=self[z81][N81];content[j3u]()[f3u]();content[z1u](append)[j81](self[r3u][f81]);self[r81]=o2u;self[M3u](callback);},"close":function(dte,callback){var s3u="_sho";var s81=s3u;s81+=d3u;var M81=n9F;M81+=a6F;M81+=L1U.j1F;M81+=w1F;if(!self[z3u]){if(callback){callback();}return;}self[N3u]=dte;self[M81](callback);self[s81]=y2u;},node:function(dte){var b3u="rapper";var d81=y3F;d81+=b3u;return self[r3u][d81][z8F];},"_init":function(){var o3u='div.DTED_Lightbox_Content';var W3u="rou";var l3u="ckg";var K81=i9F;K81+=x6F;K81+=x6F;var a81=R3u;a81+=l3u;a81+=W3u;a81+=u2u;var W81=i9F;W81+=x6F;W81+=x6F;var l81=a3u;l81+=w1F;l81+=X1F;var R81=K3u;R81+=e4F;R81+=u1F;var b81=w3u;b81+=D3u;if(self[y3u]){return;}var dom=self[r3u];dom[b81]=$(o3u,self[R81][l81]);dom[O3u][W81](A3u,z8F);dom[a81][K81](A3u,z8F);},"_show":function(callback){var O4u="not";var y4u="box_Shown\"/>";var D4u="class=\"DTED_Light";var a4u="DTED_Lightbox_Shown";var l4u="orientation";var E4u='auto';var m4u='height';var g4u='DTED_Lightbox_Mobile';var Y4u="ation";var Z3u="rien";var J3u="Ani";var u3u="backg";var t3u="ightCa";var i3u="_he";var Q3u="_dt";var U3u="_an";var h3u="grou";var e3u=".DTED_Lightbox";var L3u="_scrollT";var H3u="rollTop";var S81=x6F;S81+=i9F;S81+=H3u;var V81=a9F;V81+=e4F;V81+=L1U.j1F;V81+=k3F;var P81=L3u;P81+=e4F;P81+=X3F;var t81=F3u;t81+=e3u;var i81=a9F;i81+=E9F;i81+=L1U.q1F;i81+=L1U.j1F;var n81=a9F;n81+=E9F;n81+=L1U.q1F;n81+=L1U.j1F;var G81=R3u;G81+=G3u;G81+=h3u;G81+=u2u;var e81=U3u;e81+=E9F;e81+=v9u;e81+=R3F;var F81=n9F;F81+=L1U.x1F;F81+=L1U.q1F;F81+=n3u;var L81=Q3u;L81+=w1F;var H81=i3u;H81+=t3u;H81+=I3F;H81+=i9F;var A81=p3u;A81+=X1F;var O81=n9F;O81+=L1U.j1F;O81+=P1u;var o81=u3u;o81+=c3u;var y81=L1U.x1F;y81+=P3u;y81+=V3u;var D81=S3u;D81+=X3u;D81+=R5u;D81+=J3u;var w81=e4F;w81+=Z3u;w81+=K9F;w81+=Y4u;var that=this;var dom=self[r3u];if(window[w81]!==undefined){$(B4u)[t8u](g4u);}dom[C4u][e7u](m4u,E4u);dom[O3u][e7u]({top:-self[x4u][D81]});$(B4u)[y81](self[r3u][o81])[z1u](self[O81][A81]);self[H81]();self[L81][F81](dom[O3u],{opacity:N8F,top:z8F},callback);self[N3u][e81](dom[G81],{opacity:N8F});setTimeout(function(){var T4u="dent";var v4u="ext-in";var U81=K9F;U81+=v4u;U81+=T4u;var h81=i9F;h81+=x6F;h81+=x6F;$(I4u)[h81](U81,-N8F);},b8F);dom[k4u][n81](q4u,function(e){self[N3u][k4u]();});dom[z4u][N4u](q4u,function(e){var j4u="ack";var Q81=a9F;Q81+=j4u;Q81+=A3F;Q81+=c3u;self[N3u][Q81]();});$(f4u,dom[O3u])[i81](t81,function(e){var s4u="arg";var M4u="_Wrapper";var r4u="D_Lightbox_Content";var u81=Z1F;u81+=r4u;u81+=M4u;var p81=K9F;p81+=s4u;p81+=R5u;if($(e[p81])[c7u](u81)){self[N3u][z4u]();}});$(window)[N4u](d4u,function(){var R4u="tCalc";var c81=i3u;c81+=b4u;c81+=R4u;self[c81]();});self[P81]=$(V81)[S81]();if(window[l4u]!==undefined){var Y11=L1U.j1F;Y11+=W4u;Y11+=a4u;var Z81=K4u;Z81+=w4u;Z81+=D4u;Z81+=y4u;var J81=a9F;J81+=e4F;J81+=o4u;var X81=a9F;X81+=e4F;X81+=L1U.j1F;X81+=k3F;var kids=$(X81)[j3u]()[O4u](dom[z4u])[O4u](dom[O3u]);$(J81)[z1u](Z81);$(Y11)[z1u](kids);}},"_heightCalc":function(){var c4u="ight";var u4u="Head";var p4u="DTE_";var t4u="div.";var h4u="terH";var e4u="ody_Content";var F4u="div.DTE_B";var A4u="axHe";var T11=u1F;T11+=A4u;T11+=b4u;T11+=K9F;var v11=H4u;v11+=L4u;var x11=F4u;x11+=e4u;var E11=G4u;E11+=h4u;E11+=U4u;E11+=n4u;var m11=Q4u;m11+=i4u;m11+=K9F;var C11=t4u;C11+=p4u;C11+=u4u;C11+=F9F;var g11=J9F;g11+=w1F;g11+=c4u;var B11=P4u;B11+=u1F;var dom=self[B11];var maxHeight=$(window)[g11]()-self[x4u][V4u]*j8F-$(C11,dom[O3u])[m11]()-$(I4u,dom[O3u])[E11]();$(x11,dom[v11])[e7u](T11,maxHeight);},"_hide":function(callback){var K6u="_scrollTop";var W6u='div.DTED_Lightbox_Shown';var d6u="tation";var s6u="orien";var M6u="veClass";var r6u="Mobile";var f6u="x_";var j6u="Lightbo";var N6u="DTED_";var z6u="ollTop";var q6u="scr";var k6u="ani";var T6u="setAni";var E6u="animat";var m6u="groun";var g6u="ground";var Z4u=".DT";var J4u="clic";var S4u="nbin";var O11=G1F;O11+=S4u;O11+=L1U.j1F;var o11=C8u;o11+=a9F;o11+=X4u;var y11=p3u;y11+=X1F;var D11=J4u;D11+=a9u;D11+=Z4u;D11+=Y6u;var w11=a9F;w11+=B6u;w11+=a9u;w11+=g6u;var K11=i9F;K11+=I3F;K11+=C6u;var W11=R3u;W11+=G3u;W11+=m6u;W11+=L1U.j1F;var l11=n9F;l11+=E6u;l11+=w1F;var R11=n9F;R11+=x6u;var b11=v6u;b11+=T6u;var d11=I6u;d11+=L1U.z1F;var s11=n9F;s11+=k6u;s11+=o4F;var M11=K3u;M11+=R3F;var r11=q6u;r11+=z6u;var f11=N6u;f11+=j6u;f11+=f6u;f11+=r6u;var j11=Z1u;j11+=M6u;var N11=a9F;N11+=e4F;N11+=L1U.j1F;N11+=k3F;var k11=s6u;k11+=d6u;var I11=n9F;I11+=e8u;I11+=u1F;var dom=self[I11];if(!callback){callback=function(){};}if(window[k11]!==undefined){var z11=L1U.x1F;z11+=P3u;z11+=w1F;z11+=b6u;var q11=R6u;q11+=l6u;var show=$(W6u);show[q11]()[z11](B4u);show[a6u]();}$(N11)[j11](f11)[r11](self[K6u]);self[M11][s11](dom[O3u],{opacity:z8F,top:self[d11][b11]},function(){$(this)[f3u]();callback();});self[R11][l11](dom[W11],{opacity:z8F},function(){var a11=q4F;a11+=w6u;a11+=i9F;a11+=J9F;$(this)[a11]();});dom[K11][D6u](q4u);dom[w11][D6u](D11);$(f4u,dom[y11])[o11](q4u);$(window)[O11](d4u);},"_dte":A7u,"_ready":y2u,"_shown":y2u,"_dom":{"wrapper":$(A11+H11+y6u+o6u+L11+F11+e11+G11),"background":$(O6u),"close":$(h11),"content":A7u}});self=Editor[u9u][U11];self[x4u]={"offsetAni":o8F,"windowPadding":o8F};}());(function(){var G2K='<div class="DTED_Envelope_Close">&times;</div>';var e2K='<div class="DTED DTED_Envelope_Wrapper">';var t5K="offsetHeight";var e5K="height";var y5K="ound";var K5K="norma";var d5K="click.DT";var r5K="_cssBackgroundOpacity";var E5K="bac";var B5K="back";var i6u="envelope";var U6u="ayController";var h6u="ss=\"DTED_Envelope_Shadow\"></div>";var F6u="ainer\"><";var L6u="<div class=\"DTED_Envelope_Cont";var H6u="DTED_Envelope_Background\"><div/></di";var A6u="<div class=\"";var P8F=600;var U8F=50;var C41=X1F;C41+=i6F;var g41=f8u;g41+=L1U.q1F;g41+=L1U.z1F;var B41=A6u;B41+=H6u;B41+=J2u;var Y41=L6u;Y41+=F6u;Y41+=e6u;var Z31=G6u;Z31+=h6u;var i11=L6F;i11+=U6u;var Q11=n6u;Q11+=u2u;var n11=u1u;n11+=x6F;n11+=Q6u;n11+=F6F;var self;Editor[n11][i6u]=$[Q11](o2u,{},Editor[U9u][i11],{"init":function(dte){var t11=n9F;t11+=E5u;t11+=E9F;t11+=K9F;self[N3u]=dte;self[t11]();return self;},"open":function(dte,append,callback){var c6u="child";var u6u="ppendChild";var p6u="ndChi";var J11=i9F;J11+=I3u;J11+=w1F;var X11=t6u;X11+=p6u;X11+=W1F;var S11=n9F;S11+=h7u;var V11=L1U.x1F;V11+=u6u;var P11=w8u;P11+=c3F;P11+=K9F;var c11=K3u;c11+=P1u;var u11=c6u;u11+=P6u;var p11=w8u;p11+=w1F;p11+=D3u;self[N3u]=dte;$(self[r3u][p11])[u11]()[f3u]();self[c11][P11][V11](append);self[S11][C4u][X11](self[r3u][J11]);self[M3u](callback);},"close":function(dte,callback){var Z11=n9F;Z11+=x6u;self[Z11]=dte;self[V6u](callback);},node:function(dte){var Y91=n9F;Y91+=L1U.j1F;Y91+=P1u;return self[Y91][O3u][z8F];},"_init":function(){var j5K="visbility";var N5K="appendChild";var q5K='div.DTED_Envelope_Container';var k5K="Chil";var I5K="oun";var T5K="ckgr";var v5K="idd";var x5K="kg";var m5K="lock";var Y5K="sty";var Z6u="ackground";var J6u="bili";var X6u="vis";var s91=g6F;s91+=E9F;s91+=x6F;s91+=S6u;var M91=X6u;M91+=J6u;M91+=K9F;M91+=k3F;var r91=a9F;r91+=Z6u;var f91=L1U.j1F;f91+=z9u;f91+=f4F;var j91=Y5K;j91+=K6F;var N91=i9F;N91+=x6F;N91+=x6F;var z91=B5K;z91+=g5K;z91+=C5K;var q91=a9F;q91+=m5K;var k91=E5K;k91+=x5K;k91+=t4F;k91+=C5K;var I91=J9F;I91+=v5K;I91+=w1F;I91+=L1U.q1F;var T91=x6F;T91+=R4F;T91+=K6F;var v91=R3u;v91+=T5K;v91+=I5K;v91+=L1U.j1F;var x91=n9F;x91+=e8u;x91+=u1F;var E91=K3u;E91+=P1u;var m91=a9F;m91+=e4F;m91+=L1U.j1F;m91+=k3F;var C91=B5K;C91+=A3F;C91+=c3u;var g91=P4u;g91+=u1F;var B91=z1u;B91+=k5K;B91+=L1U.j1F;if(self[y3u]){return;}self[r3u][C4u]=$(q5K,self[r3u][O3u])[z8F];document[z5K][B91](self[g91][C91]);document[m91][N5K](self[E91][O3u]);self[x91][v91][T91][j5K]=I91;self[r3u][k91][f5K][u9u]=q91;self[r5K]=$(self[r3u][z91])[N91](A3u);self[r3u][z4u][j91][f91]=W8u;self[r3u][r91][f5K][M91]=s91;},"_show":function(callback){var g2K='click.DTED_Envelope';var Y2K="anima";var Z5K=",body";var V5K="ndowPadding";var P5K="wi";var c5K="windowScroll";var u5K="fadeIn";var i5K="offset";var Q5K="marginLeft";var n5K="px";var h5K="_heightCalc";var G5K="opacity";var F5K="tyl";var L5K="chRow";var H5K="_findAtta";var A5K="ffsetWid";var O5K="ispl";var o5K="yle";var w5K="backgro";var a5K="kground";var W5K=".DTED_Lightbox_Content_Wrapper";var R5K="lope";var b5K="ED_Enve";var s5K="DTED_Envelope";var M5K="resize.";var f31=M5K;f31+=s5K;var z31=d5K;z31+=b5K;z31+=R5K;var q31=a9F;q31+=E9F;q31+=L1U.q1F;q31+=L1U.j1F;var k31=l5K;k31+=t6u;k31+=X1F;var I31=B0u;I31+=W5K;var x31=a9F;x31+=E9F;x31+=L1U.q1F;x31+=L1U.j1F;var E31=E5K;E31+=a5K;var m31=n9F;m31+=h7u;var g31=a9F;g31+=X4u;var B31=K3u;B31+=P1u;var u91=a3u;u91+=w1F;u91+=X1F;var p91=n9F;p91+=L1U.j1F;p91+=e4F;p91+=u1F;var t91=K5K;t91+=I3F;var i91=w5K;i91+=C5K;var Q91=a9F;Q91+=I3F;Q91+=D5K;Q91+=a9u;var n91=B5K;n91+=A3F;n91+=X1F;n91+=y5K;var U91=n9F;U91+=L1U.j1F;U91+=e4F;U91+=u1F;var h91=R3u;h91+=i9F;h91+=a5K;var G91=w3u;G91+=D3u;var e91=K9F;e91+=e4F;e91+=X3F;var F91=K9F;F91+=e4F;F91+=X3F;var L91=n9F;L91+=L1U.j1F;L91+=e4F;L91+=u1F;var H91=X3F;H91+=P9u;var A91=z0u;A91+=k3F;A91+=I3F;A91+=w1F;var O91=x6F;O91+=K9F;O91+=o5K;var o91=G0u;o91+=Z3F;o91+=X1F;var y91=L1U.q1F;y91+=e4F;y91+=L1U.q1F;y91+=w1F;var D91=L1U.j1F;D91+=O5K;D91+=L1U.x1F;D91+=k3F;var w91=e4F;w91+=A5K;w91+=w2u;var K91=H5K;K91+=L5K;var a91=a9F;a91+=I3F;a91+=D5K;a91+=a9u;var W91=x6F;W91+=F5K;W91+=w1F;var l91=n9F;l91+=L1U.j1F;l91+=P1u;var R91=L1U.x1F;R91+=G1F;R91+=K9F;R91+=e4F;var b91=x6F;b91+=R4F;b91+=K6F;var d91=w3u;d91+=D3u;var that=this;var formHeight;if(!callback){callback=function(){};}self[r3u][d91][b91][e5K]=R91;var style=self[l91][O3u][W91];style[G5K]=z8F;style[u9u]=a91;var targetRow=self[K91]();var height=self[h5K]();var width=targetRow[w91];style[D91]=y91;style[G5K]=N8F;self[r3u][o91][O91][U5K]=width+n5K;self[r3u][O3u][A91][Q5K]=-(width/j8F)+H91;self[L91][O3u][f5K][F91]=$(targetRow)[i5K]()[e91]+targetRow[t5K]+n5K;self[r3u][G91][f5K][S3F]=-N8F*height-w8F+n5K;self[r3u][h91][f5K][G5K]=z8F;self[U91][n91][f5K][u9u]=Q91;$(self[r3u][i91])[p5K]({'opacity':self[r5K]},t91);$(self[p91][u91])[u5K]();if(self[x4u][c5K]){var S91=P5K;S91+=V5K;var V91=K9F;V91+=e4F;V91+=X3F;var P91=S5K;P91+=X5K;P91+=J5K;P91+=w1F;var c91=J9F;c91+=j9u;c91+=I3F;c91+=Z5K;$(c91)[P91]({"scrollTop":$(targetRow)[i5K]()[V91]+targetRow[t5K]-self[x4u][S91]},function(){var J91=L1U.x1F;J91+=L1U.q1F;J91+=n3u;var X91=I6u;X91+=K9F;X91+=c3F;X91+=K9F;$(self[r3u][X91])[J91]({"top":z8F},P8F,callback);});}else{var Y31=Y2K;Y31+=R3F;var Z91=I6u;Z91+=B2K;Z91+=K9F;$(self[r3u][Z91])[Y31]({"top":z8F},P8F,callback);}$(self[B31][k4u])[g31](g2K,function(e){var C31=i9F;C31+=C2K;self[N3u][C31]();});$(self[m31][E31])[x31](g2K,function(e){var T31=R3u;T31+=i9F;T31+=a5K;var v31=n9F;v31+=x6u;self[v31][T31]();});$(I31,self[r3u][k31])[q31](z31,function(e){var x2K="Cl";var m2K="DTED_Envelope_Content_Wra";var j31=m2K;j31+=L4u;var N31=E2K;N31+=x2K;N31+=z8u;N31+=x6F;if($(e[v2K])[N31](j31)){self[N3u][z4u]();}});$(window)[N4u](f31,function(){var I2K="Calc";var T2K="_height";var r31=T2K;r31+=I2K;self[r31]();});},"_heightCalc":function(){var M2K='maxHeight';var r2K='div.DTE_Body_Content';var j2K='div.DTE_Header';var N2K="heightCalc";var z2K="nf";var q2K="DTE_Foote";var w31=l5K;w31+=B8u;w31+=w1F;w31+=X1F;var K31=e8u;K31+=u1F;var a31=n9F;a31+=x6u;var W31=I1u;W31+=x6F;var l31=Q4u;l31+=i4u;l31+=K9F;var R31=H4u;R31+=P3u;R31+=F9F;var b31=u1u;b31+=k2K;b31+=q2K;b31+=X1F;var d31=a3u;d31+=F9F;var s31=f8u;s31+=z2K;var M31=i9F;M31+=e4F;M31+=L1U.q1F;M31+=L1U.z1F;var formHeight;formHeight=self[M31][N2K]?self[x4u][N2K](self[r3u][O3u]):$(self[r3u][C4u])[j3u]()[e5K]();var maxHeight=$(window)[e5K]()-self[s31][V4u]*j8F-$(j2K,self[r3u][d31])[f2K]()-$(b31,self[r3u][R31])[l31]();$(r2K,self[r3u][O3u])[W31](M2K,maxHeight);return $(self[a31][K31][w31])[f2K]();},"_hide":function(callback){var w2K="nima";var K2K="nte";var W2K="ghtbox";var l2K="TED_Li";var R2K="click.";var b2K="kgr";var d2K="DTED_Lightbox_Content_Wrapper";var n31=d5K;n31+=Y6u;var U31=K3u;U31+=e4F;U31+=u1F;var h31=B0u;h31+=s2K;h31+=d2K;var G31=C8u;G31+=N4u;var e31=E5K;e31+=b2K;e31+=y5K;var F31=R2K;F31+=s9F;F31+=l2K;F31+=W2K;var L31=a2K;L31+=p6F;var o31=i9F;o31+=e4F;o31+=K2K;o31+=D3u;var y31=n9F;y31+=h7u;var D31=L1U.x1F;D31+=w2K;D31+=R3F;if(!callback){callback=function(){};}$(self[r3u][C4u])[D31]({"top":-(self[y31][o31][t5K]+U8F)},P8F,function(){var D2K="ade";var H31=K5K;H31+=I3F;var A31=L1U.z1F;A31+=D2K;A31+=y2K;A31+=D0u;var O31=a3u;O31+=F9F;$([self[r3u][O31],self[r3u][z4u]])[A31](H31,callback);});$(self[r3u][L31])[D6u](F31);$(self[r3u][e31])[G31](q4u);$(h31,self[U31][O3u])[D6u](n31);$(window)[D6u](d4u);},"_findAttachRow":function(){var O2K="eade";var X31=i9F;X31+=c2u;X31+=w1F;var P31=J9F;P31+=w1F;P31+=L1U.x1F;P31+=L1U.j1F;var c31=L1U.x1F;c31+=K9F;c31+=k1u;var u31=i9F;u31+=i7u;u31+=L1U.z1F;var p31=w6u;p31+=a9F;p31+=I3F;p31+=w1F;var t31=x3F;t31+=X3F;t31+=E9F;var i31=j5u;i31+=U9F;i31+=o2K;var Q31=L1U.z1F;Q31+=L1U.q1F;var dt=new $[Q31][i31][t31](self[N3u][x6F][p31]);if(self[u31][c31]===P31){var S31=J9F;S31+=O2K;S31+=X1F;var V31=w6u;V31+=a9F;V31+=K6F;return dt[V31]()[S31]();}else if(self[N3u][x6F][A2K]===X31){return dt[k9u]()[H2K]();}else{var J31=X1F;J31+=e4F;J31+=y3F;return dt[J31](self[N3u][x6F][L2K])[F2K]();}},"_dte":A7u,"_ready":y2u,"_cssBackgroundOpacity":N8F,"_dom":{"wrapper":$(e2K+Z31+Y41+M7u)[z8F],"background":$(B41)[z8F],"close":$(G2K)[z8F],"content":A7u}});self=Editor[u9u][i6u];self[g41]={"windowPadding":U8F,"heightCalc":A7u,"attach":C41,"windowScroll":o2u};}());Editor[E8u][m41]=function(cfg,after){var v0K="der";var x0K="plice";var Z2K='initField';var X2K="'. A field already exists with this name";var S2K="Error adding field '";var P2K="e` option";var u2K="Error adding field. The field requires a `n";var t2K="classe";var i2K="iel";var n2K="evers";var U2K="splayRe";var h2K="_di";var M41=h2K;M41+=U2K;M41+=M4F;if($[p1u](cfg)){if(after!==undefined){var E41=X1F;E41+=n2K;E41+=w1F;cfg[E41]();}for(var i=z8F;i<cfg[D2u];i++){this[Q2K](cfg[i],after);}}else{var N41=L1U.z1F;N41+=i2K;N41+=D6F;var T41=t2K;T41+=x6F;var v41=m5u;v41+=v5u;v41+=W1F;var name=cfg[p2K];if(name===undefined){var x41=u2K;x41+=c2K;x41+=P2K;throw x41;}if(this[x6F][V2K][name]){throw S2K+name+X2K;}this[J2K](Z2K,cfg);var field=new Editor[v41](cfg,this[T41][x4F],this);if(this[x6F][g5u]){var editFields=this[x6F][Y0K];field[B0K]();$[w1u](editFields,function(idSrc,edit){var E0K="valFro";var z41=L1U.j1F;z41+=g0K;var q41=C0K;q41+=m0K;q41+=C3F;q41+=R5u;var val;if(edit[j5u]){var k41=L1U.j1F;k41+=u0u;var I41=E0K;I41+=u1F;I41+=s9F;I41+=u0u;val=field[I41](edit[k41]);}field[q41](idSrc,val!==undefined?val:field[z41]());});}this[x6F][N41][name]=field;if(after===undefined){this[x6F][M4F][K1u](name);}else if(after===A7u){var j41=q5u;j41+=L1U.j1F;j41+=w1F;j41+=X1F;this[x6F][j41][h9u](name);}else{var r41=x6F;r41+=x0K;var f41=e4F;f41+=X1F;f41+=v0K;var idx=$[a1u](after,this[x6F][M4F]);this[x6F][f41][r41](idx+N8F,z8F,name);}}this[M41](this[M4F]());return this;};Editor[s41][T0K]=function(newAjax){var k0K="aj";var I0K="ja";var b41=L1U.x1F;b41+=I0K;b41+=P9u;if(newAjax){var d41=k0K;d41+=H4F;this[x6F][d41]=newAjax;return this;}return this[x6F][b41];};Editor[R41][z4u]=function(){var j0K="onBac";var D41=E9u;D41+=q0K;D41+=K9F;var K41=s4F;K41+=C6u;var a41=a9F;a41+=I3F;a41+=z0K;var W41=N0K;W41+=i9F;W41+=h2u;W41+=i7u;var l41=j0K;l41+=a9u;l41+=g5K;l41+=C5K;var onBackground=this[x6F][f0K][l41];if(typeof onBackground===W41){onBackground(this);}else if(onBackground===a41){this[r0K]();}else if(onBackground===K41){var w41=s4F;w41+=e4F;w41+=p6F;this[w41]();}else if(onBackground===D41){var y41=M0K;y41+=s0K;y41+=k5u;this[y41]();}return this;};Editor[E8u][r0K]=function(){var d0K="_b";var o41=d0K;o41+=I3F;o41+=G1F;o41+=X1F;this[o41]();return this;};Editor[E8u][b0K]=function(cells,fieldNames,show,opts){var D0K='boolean';var a0K="_ti";var W0K="sPlainObject";var l0K="dividual";var e41=R0K;e41+=r5u;var F41=n9F;F41+=w1F;F41+=u1u;F41+=K9F;var L41=E9F;L41+=L1U.q1F;L41+=l0K;var H41=E9F;H41+=W0K;var O41=a0K;O41+=o4u;var that=this;if(this[O41](function(){var A41=a9F;A41+=K0K;A41+=a9F;A41+=K6F;that[A41](cells,fieldNames,opts);})){return this;}if($[w0K](fieldNames)){opts=fieldNames;fieldNames=undefined;show=o2u;}else if(typeof fieldNames===D0K){show=fieldNames;fieldNames=undefined;opts=undefined;}if($[H41](show)){opts=show;show=o2u;}if(show===undefined){show=o2u;}opts=$[Z0u]({},this[x6F][y0K][b0K],opts);var editFields=this[J2K](L41,cells,fieldNames);this[F41](cells,editFields,e41,opts,function(){var M7K="formIn";var j7K="endTo";var z7K="pointer";var q7K='<div class="DTE_Processing_Indicator"><span></div>';var I7K='"><div/></div>';var T7K="bg";var x7K='attach';var Y7K="esiz";var Z0K="odes";var J0K="onc";var S0K="rapp";var V0K="v cl";var p0K="hildren";var t0K="ormError";var i0K="prep";var U0K="tto";var e0K="ocu";var H0K="includeF";var O0K="topen";var o0K="_po";var R61=o0K;R61+=x6F;R61+=O0K;var b61=L1U.z1F;b61+=e4F;b61+=i9F;b61+=A0K;var d61=H0K;d61+=v5u;d61+=L0K;var s61=F0K;s61+=e0K;s61+=x6F;var M61=n9F;M61+=S5K;M61+=n3u;var f61=i9F;f61+=I3F;f61+=G0K;f61+=a9u;var q61=L1U.x1F;q61+=L1U.j1F;q61+=L1U.j1F;var T61=h0K;T61+=U0K;T61+=L1U.q1F;T61+=x6F;var E61=n0K;E61+=Q0K;E61+=w1F;var m61=e8u;m61+=u1F;var C61=i0K;C61+=c3F;C61+=L1U.j1F;var g61=L1U.z1F;g61+=t0K;var B61=L1U.j1F;B61+=e4F;B61+=u1F;var Y61=R6u;Y61+=L1U.j1F;Y61+=P6u;var Z41=i9F;Z41+=p0K;var J41=w1F;J41+=u0K;var V41=c0K;V41+=P0K;var P41=Y0u;P41+=u1u;P41+=J2u;var c41=B2u;c41+=g0u;var u41=I3F;u41+=E9F;u41+=L1U.q1F;u41+=F9F;var p41=h0u;p41+=V0K;p41+=Q8u;p41+=I0u;var t41=B2u;t41+=g0u;var i41=y3F;i41+=S0K;i41+=F9F;var Q41=s4F;Q41+=z8u;Q41+=X0K;var n41=i9F;n41+=J0K;n41+=L1U.x1F;n41+=K9F;var U41=a9F;U41+=C9F;U41+=D3F;U41+=Z0K;var h41=X1F;h41+=Y7K;h41+=w1F;h41+=s2K;var G41=e4F;G41+=L1U.q1F;var namespace=that[B7K](opts);var ret=that[g7K](C7K);if(!ret){return that;}$(window)[G41](h41+namespace,function(){that[m7K]();});var nodes=[];that[x6F][U41]=nodes[n41][E7K](nodes,_pluck(editFields,x7K));var classes=that[Q41][b0K];var background=$(v7K+classes[T7K]+I7K);var container=$(v7K+classes[i41]+t41+p41+classes[u41]+c41+v7K+classes[k9u]+N7u+v7K+classes[k4u]+k7K+q7K+M7u+P41+v7K+classes[z7K]+V41+M7u);if(show){var X41=a9F;X41+=N7K;var S41=L1U.x1F;S41+=P3u;S41+=j7K;container[S41](B4u);background[f7K](X41);}var liner=container[j3u]()[J41](z8F);var table=liner[Z41]();var close=table[Y61]();liner[z1u](that[B61][g61]);table[C61](that[m61][r7K]);if(opts[E61]){var x61=M7K;x61+=s7K;liner[L7u](that[h7u][x61]);}if(opts[d7K]){var v61=b7K;v61+=L1U.x1F;v61+=q4F;v61+=X1F;liner[L7u](that[h7u][v61]);}if(opts[T61]){var k61=R7K;k61+=e4F;k61+=L1U.q1F;k61+=x6F;var I61=L1U.j1F;I61+=e4F;I61+=u1F;table[z1u](that[I61][k61]);}var pair=$()[Q2K](container)[q61](background);that[l7K](function(submitComplete){var W7K="_animate";that[W7K](pair,{opacity:z8F},function(){var y7K="etach";var D7K="resize";var K7K="mic";var a7K="_clearDyna";var j61=a7K;j61+=K7K;j61+=w7K;j61+=s7K;var N61=D7K;N61+=s2K;var z61=L1U.j1F;z61+=y7K;pair[z61]();$(window)[v6u](N61+namespace);that[j61]();});});background[f61](function(){that[r0K]();});close[F3u](function(){var r61=o7K;r61+=x6F;r61+=w1F;that[r61]();});that[m7K]();that[M61](pair,{opacity:N8F});that[s61](that[x6F][d61],opts[b61]);that[R61](C7K);});return this;};Editor[E8u][m7K]=function(){var g8K='left';var Z7K='below';var J7K="bottom";var X7K='top';var S7K="outerWidth";var V7K="right";var U7K="bubbleNodes";var h7K='div.DTE_Bubble_Liner';var G7K=".DTE_Bubble";var F7K="eft";var K8F=15;var p61=K9F;p61+=e4F;p61+=X3F;var t61=e4F;t61+=L1U.z1F;t61+=L1U.z1F;t61+=O7K;var i61=A7K;i61+=K9F;i61+=J9F;var Q61=i9F;Q61+=x6F;Q61+=x6F;var n61=h0K;n61+=a9F;n61+=q2u;n61+=w1F;var U61=s4F;U61+=L1U.x1F;U61+=x6F;U61+=X0K;var h61=I3F;h61+=g0K;h61+=K9F;var G61=I3F;G61+=c3F;G61+=A3F;G61+=w2u;var e61=a9F;e61+=e4F;e61+=H7K;e61+=P1u;var F61=I3F;F61+=w1F;F61+=L1U.q1F;F61+=L7K;var L61=I3F;L61+=c3F;L61+=A3F;L61+=w2u;var H61=I3F;H61+=F7K;var A61=I3F;A61+=c3F;A61+=L7K;var O61=z6F;O61+=X3F;var l61=L1U.j1F;l61+=e7K;l61+=G7K;var wrapper=$(l61),liner=$(h7K),nodes=this[x6F][U7K];var position={top:z8F,left:z8F,right:z8F,bottom:z8F};$[w1u](nodes,function(i,node){var u7K="fset";var t7K="offsetWi";var i7K="bott";var Q7K="eight";var n7K="fsetH";var o61=e4F;o61+=L1U.z1F;o61+=n7K;o61+=Q7K;var y61=i7K;y61+=e4F;y61+=u1F;var D61=t7K;D61+=L1U.j1F;D61+=w2u;var w61=p7K;w61+=n4u;var K61=K6F;K61+=m8u;var a61=K9F;a61+=e4F;a61+=X3F;var W61=e4F;W61+=L1U.z1F;W61+=u7K;var pos=$(node)[W61]();node=$(node)[c7K](z8F);position[a61]+=pos[S3F];position[P7K]+=pos[K61];position[w61]+=pos[P7K]+node[D61];position[y61]+=pos[S3F]+node[o61];});position[O61]/=nodes[A61];position[H61]/=nodes[L61];position[V7K]/=nodes[F61];position[e61]/=nodes[G61];var top=position[S3F],left=(position[h61]+position[V7K])/j8F,width=liner[S7K](),visLeft=left-width/j8F,visRight=visLeft+width,docWidth=$(window)[U5K](),padding=K8F,classes=this[U61][n61];wrapper[Q61]({top:top,left:left});if(liner[i61]&&liner[t61]()[p61]<z8F){var u61=i9F;u61+=d8u;wrapper[u61](X7K,position[J7K])[t8u](Z7K);}else{var c61=Z1u;c61+=Y8K;c61+=B8K;c61+=j8u;wrapper[c61](Z7K);}if(visRight+padding>docWidth){var diff=visRight-docWidth;liner[e7u](g8K,visLeft<padding?-(visLeft-padding):-(diff+padding));}else{liner[e7u](g8K,visLeft<padding?-(visLeft-padding):z8F);}return this;};Editor[P61][C8K]=function(buttons){var E8K="si";var m8K="_ba";var V61=m8K;V61+=E8K;V61+=i9F;var that=this;if(buttons===V61){var X61=L1U.x1F;X61+=x8K;X61+=E9F;X61+=i7u;var S61=E9F;S61+=L1U.B1F;S61+=v8K;buttons=[{text:this[S61][this[x6F][X61]][T8K],action:function(){this[T8K]();}}];}else if(!$[p1u](buttons)){buttons=[buttons];}$(this[h7u][C8K])[I8K]();$[w1u](buttons,function(i,btn){var W8K='keypress';var R8K="tabIndex";var b8K='tabindex';var s8K="on/>";var N8K="Index";var z8K="ey";var r5V=k8K;r5V+=q8K;var f5V=e8u;f5V+=u1F;var N5V=i9F;N5V+=O3F;N5V+=i9F;N5V+=a9u;var z5V=e4F;z5V+=L1U.q1F;var I5V=e4F;I5V+=L1U.q1F;var v5V=a9u;v5V+=z8K;v5V+=G1F;v5V+=X3F;var x5V=e4F;x5V+=L1U.q1F;var E5V=K9F;E5V+=b9F;E5V+=N8K;var m5V=j8K;m5V+=K9F;m5V+=P6F;m5V+=L1U.q1F;var C5V=f8K;C5V+=I3F;var g5V=r8K;g5V+=L1U.q1F;var B5V=i9F;B5V+=M8K;var Y5V=v0u;Y5V+=R7K;Y5V+=s8K;var Z61=L1U.z1F;Z61+=L1U.q1F;var J61=T5u;J61+=K9F;if(typeof btn===F1u){btn={text:btn,action:function(){this[T8K]();}};}var text=btn[J61]||btn[j7u];var action=btn[A2K]||btn[Z61];$(Y5V,{'class':that[B5V][r7K][g5V]+(btn[q7u]?T7u+btn[q7u]:p5u)})[C5V](typeof text===m5V?text(that):text||p5u)[d8K](b8K,btn[E5V]!==undefined?btn[R8K]:z8F)[x5V](v5V,function(e){if(e[l8K]===W8F&&action){var T5V=i9F;T5V+=L1U.x1F;T5V+=I3F;T5V+=I3F;action[T5V](that);}})[I5V](W8K,function(e){var D8K="Defa";var w8K="prevent";var k5V=a8K;k5V+=k3F;k5V+=B8K;k5V+=K8K;if(e[k5V]===W8F){var q5V=w8K;q5V+=D8K;q5V+=y8K;e[q5V]();}})[z5V](N5V,function(e){e[o8K]();if(action){var j5V=i9F;j5V+=L1U.x1F;j5V+=U4F;action[j5V](that);}})[f7K](that[f5V][r5V]);});return this;};Editor[M5V][l4F]=function(fieldName){var n8K="dNames";var U8K="_fiel";var h8K="eFields";var G8K="includ";var H8K="oy";var A8K="rray";var that=this;var fields=this[x6F][V2K];if(typeof fieldName===F1u){var R5V=q5u;R5V+=q4F;R5V+=X1F;var b5V=O8K;b5V+=A8K;var d5V=X1u;d5V+=X1F;d5V+=H8K;var s5V=L1U.z1F;s5V+=L8K;that[s5V](fieldName)[d5V]();delete fields[fieldName];var orderIdx=$[b5V](fieldName,this[x6F][R5V]);this[x6F][M4F][F8K](orderIdx,N8F);var includeIdx=$[a1u](fieldName,this[x6F][e8K]);if(includeIdx!==-N8F){var l5V=G8K;l5V+=h8K;this[x6F][l5V][F8K](includeIdx,N8F);}}else{var a5V=U8K;a5V+=n8K;var W5V=x2u;W5V+=J9F;$[W5V](this[a5V](fieldName),function(i,name){that[l4F](name);});}return this;};Editor[E8u][k4u]=function(){var K5V=n9F;K5V+=s4F;K5V+=e4F;K5V+=p6F;this[K5V](y2u);return this;};Editor[E8u][w5V]=function(arg1,arg2,arg3,arg4){var P8K="editFiel";var c8K="loc";var p8K="_displayReo";var i8K="tCreate";var n5V=Q8K;n5V+=i8K;var U5V=t8K;U5V+=g6F;U5V+=w1F;U5V+=D3u;var G5V=l1F;G5V+=W1F;G5V+=x6F;var e5V=p8K;e5V+=u8K;var F5V=a9F;F5V+=c8K;F5V+=a9u;var L5V=L1U.x1F;L5V+=i9F;L5V+=h2u;L5V+=i7u;var H5V=v9u;H5V+=E9F;H5V+=L1U.q1F;var A5V=t2u;A5V+=q4F;var o5V=P8K;o5V+=D6F;var D5V=L1U.z1F;D5V+=v5u;D5V+=L0K;var that=this;var fields=this[x6F][D5V];var count=N8F;if(this[V8K](function(){var y5V=i9F;y5V+=X1F;y5V+=w1F;y5V+=S8K;that[y5V](arg1,arg2,arg3,arg4);})){return this;}if(typeof arg1===X8K){count=arg1;arg1=arg2;arg2=arg3;}this[x6F][o5V]={};for(var i=z8F;i<count;i++){var O5V=w6F;O5V+=L1U.j1F;O5V+=x6F;this[x6F][Y0K][i]={fields:this[x6F][O5V]};}var argOpts=this[J8K](arg1,arg2,arg3,arg4);this[x6F][A5V]=H5V;this[x6F][L5V]=Z8K;this[x6F][L2K]=A7u;this[h7u][r7K][f5K][u9u]=F5V;this[Y1K]();this[e5V](this[G5V]());$[w1u](fields,function(name,field){field[B0K]();for(var i=z8F;i<count;i++){var h5V=L1U.j1F;h5V+=w1F;h5V+=L1U.z1F;field[B1K](i,field[h5V]());}field[O7K](field[I8u]());});this[U5V](n5V,A7u,function(){var m1K="_formOpt";var C1K="eOpen";var g1K="mayb";var i5V=g1K;i5V+=C1K;var Q5V=m1K;Q5V+=P6F;Q5V+=L1U.q1F;Q5V+=x6F;that[E1K]();that[Q5V](argOpts[p7u]);argOpts[i5V]();});return this;};Editor[t5V][p5V]=function(parent){var T1K="undepe";var X5V=e4F;X5V+=L1U.z1F;X5V+=L1U.z1F;var S5V=F7u;S5V+=q4F;var V5V=b1F;V5V+=w1F;V5V+=I3F;V5V+=L1U.j1F;var u5V=x1K;u5V+=F6F;if($[u5V](parent)){var c5V=K6F;c5V+=L1U.q1F;c5V+=v1K;c5V+=J9F;for(var i=z8F,ien=parent[c5V];i<ien;i++){var P5V=T1K;P5V+=u2u;P5V+=c3F;P5V+=K9F;this[P5V](parent[i]);}return this;}var field=this[V5V](parent);$(field[S5V]())[X5V](I1K);return this;};Editor[J5V][k1K]=function(parent,url,opts){var z1K="Arra";var g2V=i9F;g2V+=b2u;g2V+=q1K;var B2V=A4F;B2V+=x6F;B2V+=e4F;B2V+=L1U.q1F;var Z5V=E9F;Z5V+=x6F;Z5V+=z1K;Z5V+=k3F;if($[Z5V](parent)){var Y2V=I3F;Y2V+=N1K;for(var i=z8F,ien=parent[Y2V];i<ien;i++){this[k1K](parent[i],url,opts);}return this;}var that=this;var field=this[x4F](parent);var ajaxOpts={type:j1K,dataType:B2V};opts=$[Z0u]({event:g2V,data:A7u,preUpdate:A7u,postUpdate:A7u},opts);var update=function(json){var K1K="postUpd";var a1K="postUpdate";var W1K='show';var l1K='hide';var R1K='message';var b1K='val';var d1K='update';var M1K="preUpdate";var r1K="enab";var T2V=X3F;T2V+=t4F;T2V+=n3F;T2V+=f1K;var x2V=r1K;x2V+=K6F;var C2V=w1F;C2V+=X1F;C2V+=W6F;if(opts[M1K]){opts[M1K](json);}$[w1u]({labels:s1K,options:d1K,values:b1K,messages:R1K,errors:C2V},function(jsonProp,fieldFn){if(json[jsonProp]){var m2V=w1F;m2V+=B6u;m2V+=J9F;$[m2V](json[jsonProp],function(field,val){var E2V=w6F;E2V+=L1U.j1F;that[E2V](field)[fieldFn](val);});}});$[w1u]([l1K,W1K,x2V,s8u],function(i,key){if(json[key]){that[key](json[key],json[p5K]);}});if(opts[a1K]){var v2V=K1K;v2V+=S8K;opts[v2V](json);}field[T2V](y2u);};$(field[F2K]())[i7u](opts[w1K]+I1K,function(e){var G1K="nO";var e1K="isPlai";var L1K="objec";var H1K="values";var o1K="editF";var D1K="funct";var r2V=D1K;r2V+=d1F;var j2V=L1U.j1F;j2V+=L1U.x1F;j2V+=w6u;var N2V=y1K;N2V+=x6F;var z2V=o1K;z2V+=v5u;z2V+=I3F;z2V+=D6F;var q2V=O1K;q2V+=x6F;var k2V=L1U.z1F;k2V+=E9F;k2V+=L1U.q1F;k2V+=L1U.j1F;var I2V=F7u;I2V+=q4F;if($(field[I2V]())[k2V](e[v2K])[D2u]===z8F){return;}field[o7u](o2u);var data={};data[q2V]=that[x6F][z2V]?_pluck(that[x6F][N2V],A1K):A7u;data[O1K]=data[c4F]?data[c4F][z8F]:A7u;data[H1K]=that[t0u]();if(opts[j2V]){var ret=opts[j5u](data);if(ret){var f2V=W3F;f2V+=K9F;f2V+=L1U.x1F;opts[f2V]=ret;}}if(typeof url===r2V){var M2V=g6F;M2V+=L1U.x1F;M2V+=I3F;var o=url(field[M2V](),data,update);if(o){var s2V=L1K;s2V+=K9F;if(typeof o===s2V&&typeof o[F1K]===Y8u){o[F1K](function(resolved){if(resolved){update(resolved);}});}else{update(o);}}}else{var d2V=e1K;d2V+=G1K;d2V+=h1K;if($[d2V](url)){$[Z0u](ajaxOpts,url);}else{ajaxOpts[U1K]=url;}$[T0K]($[Z0u](ajaxOpts,{url:url,data:data,success:update}));}});return this;};Editor[E8u][b2V]=function(){var P1K="destro";var p1K="mpla";var Q1K="mplat";var o2V=s2K;o2V+=x6u;var y2V=e4F;y2V+=n1K;var a2V=R3F;a2V+=Q1K;a2V+=w1F;var W2V=i9F;W2V+=K6F;W2V+=i1K;var R2V=m1u;R2V+=o1u;R2V+=t1K;if(this[x6F][R2V]){var l2V=s4F;l2V+=V3F;l2V+=w1F;this[l2V]();}this[W2V]();if(this[x6F][a2V]){var w2V=R3F;w2V+=p1K;w2V+=R3F;var K2V=a9F;K2V+=e4F;K2V+=L1U.j1F;K2V+=k3F;$(K2V)[z1u](this[x6F][w2V]);}var controller=this[x6F][u1K];if(controller[c1K]){var D2V=P1K;D2V+=k3F;controller[D2V](this);}$(document)[y2V](o2V+this[x6F][V1K]);this[h7u]=A7u;this[x6F]=A7u;};Editor[O2V][S1K]=function(name){var X1K="_fieldNa";var A2V=X1K;A2V+=T4F;var that=this;$[w1u](this[A2V](name),function(i,n){that[x4F](n)[S1K]();});return this;};Editor[E8u][H2V]=function(show){var F2V=s4F;F2V+=e4F;F2V+=x6F;F2V+=w1F;var L2V=k6F;L2V+=c3F;if(show===undefined){return this[x6F][J1K];}return this[show?L2V:F2V]();};Editor[e2V][G2V]=function(){var U2V=w6F;U2V+=D6F;var h2V=u1F;h2V+=L1U.x1F;h2V+=X3F;return $[h2V](this[x6F][U2V],function(field,name){return field[J1K]()?name:A7u;});};Editor[n2V][Q2V]=function(){return this[x6F][u1K][F2K](this);};Editor[E8u][Y6F]=function(items,arg1,arg2,arg3,arg4){var Y9K="_edit";var Z1K="mai";var p2V=Z1K;p2V+=L1U.q1F;var t2V=b1F;t2V+=R9F;t2V+=L1U.j1F;t2V+=x6F;var that=this;if(this[V8K](function(){var i2V=w1F;i2V+=L1U.j1F;i2V+=E9F;i2V+=K9F;that[i2V](items,arg1,arg2,arg3,arg4);})){return this;}var argOpts=this[J8K](arg1,arg2,arg3,arg4);this[Y9K](items,this[J2K](t2V,items),p2V,argOpts[p7u],function(){var B9K="_formOp";var u2V=B9K;u2V+=g9K;that[E1K]();that[u2V](argOpts[p7u]);argOpts[C9K]();});return this;};Editor[c2V][m9K]=function(name){var E9K="fieldNames";var P2V=n9F;P2V+=E9K;var that=this;$[w1u](this[P2V](name),function(i,n){that[x4F](n)[m9K]();});return this;};Editor[E8u][V2V]=function(name,msg){var T9K="globalError";var v9K="formError";if(msg===undefined){var S2V=L1U.j1F;S2V+=e4F;S2V+=u1F;this[x9K](this[S2V][v9K],name);this[x6F][T9K]=name;}else{var J2V=F9F;J2V+=X1F;J2V+=e4F;J2V+=X1F;var X2V=L1U.z1F;X2V+=L8K;this[X2V](name)[J2V](msg);}return this;};Editor[E8u][Z2V]=function(name){var k9K="e - ";var I9K="Unknown field nam";var fields=this[x6F][V2K];if(!fields[name]){var Y0V=I9K;Y0V+=k9K;throw Y0V+name;}return fields[name];};Editor[B0V][g0V]=function(){var C0V=L1U.z1F;C0V+=E9F;C0V+=q9K;return $[z9K](this[x6F][C0V],function(field,name){return name;});};Editor[m0V][f2u]=_api_file;Editor[E0V][x0V]=_api_files;Editor[v0V][c7K]=function(name){var k0V=A3F;k0V+=w1F;k0V+=K9F;var I0V=L1U.z1F;I0V+=E9F;I0V+=w1F;I0V+=W1F;var that=this;if(!name){name=this[V2K]();}if($[p1u](name)){var out={};$[w1u](name,function(i,n){var T0V=L1U.z1F;T0V+=v5u;T0V+=I3F;T0V+=L1U.j1F;out[n]=that[T0V](n)[c7K]();});return out;}return this[I0V](name)[k0V]();};Editor[q0V][z0V]=function(names,animate){var N0V=w1F;N0V+=L1U.x1F;N0V+=i9F;N0V+=J9F;var that=this;$[N0V](this[N9K](names),function(i,n){var f0V=J9F;f0V+=j9K;var j0V=l1F;j0V+=I3F;j0V+=L1U.j1F;that[j0V](n)[f0V](animate);});return this;};Editor[E8u][f9K]=function(includeHash){var M0V=r9K;M0V+=M9K;M0V+=x6F;var r0V=u1F;r0V+=L1U.x1F;r0V+=X3F;return $[r0V](this[x6F][M0V],function(edit,idSrc){return includeHash===o2u?s9K+idSrc:idSrc;});};Editor[E8u][s0V]=function(inNames){var W9K="rmE";var l9K="lErr";var R9K="oba";var b9K="gl";var R0V=d9K;R0V+=A3F;R0V+=w2u;var b0V=b9K;b0V+=R9K;b0V+=l9K;b0V+=q5u;var d0V=L1U.z1F;d0V+=e4F;d0V+=W9K;d0V+=i2u;var formError=$(this[h7u][d0V]);if(this[x6F][b0V]){return o2u;}var names=this[N9K](inNames);for(var i=z8F,ien=names[R0V];i<ien;i++){if(this[x4F](names[i])[a9K]()){return o2u;}}return y2u;};Editor[l0V][W0V]=function(cell,fieldName,opts){var t9K='div.DTE_Field';var F9K="mOptions";var H9K="rce";var A9K="_dataSou";var O9K="idu";var o9K="indiv";var y9K="idy";var D9K="_edi";var G0V=K9K;G0V+=w9K;var e0V=D9K;e0V+=K9F;var F0V=X8u;F0V+=y9K;var L0V=I3F;L0V+=c3F;L0V+=v1K;L0V+=J9F;var O0V=w1F;O0V+=B6u;O0V+=J9F;var o0V=E9F;o0V+=L1U.q1F;o0V+=O3F;o0V+=b6F;var y0V=i9F;y0V+=M8K;var D0V=o9K;D0V+=O9K;D0V+=S7u;var w0V=A9K;w0V+=H9K;var K0V=E9F;K0V+=L9K;K0V+=E9F;K0V+=b6F;var a0V=t9F;a0V+=F9K;var that=this;if($[w0K](fieldName)){opts=fieldName;fieldName=undefined;}opts=$[Z0u]({},this[x6F][a0V][K0V],opts);var editFields=this[w0V](D0V,cell,fieldName);var node,field;var countOuter=z8F,countInner;var closed=y2u;var classes=this[y0V][o0V];$[O0V](editFields,function(i,editField){var n9K="attach";var U9K="t a time";var h9K=" inline a";var G9K="Cannot edit more than one row";var H0V=w1F;H0V+=L1U.x1F;H0V+=e9K;if(countOuter>z8F){var A0V=G9K;A0V+=h9K;A0V+=U9K;throw A0V;}node=$(editField[n9K][z8F]);countInner=z8F;$[H0V](editField[Q9K],function(j,f){var i9K='Cannot edit more than one field inline at a time';if(countInner>z8F){throw i9K;}field=f;countInner++;});countOuter++;});if($(t9K,node)[L0V]){return this;}if(this[F0V](function(){var p9K="inline";that[p9K](cell,fieldName,opts);})){return this;}this[e0V](cell,editFields,G0V,opts,function(){var j3K="ttons";var k3K='<div class="DTE_Processing_Indicator"><span/></div>';var I3K='px">';var T3K="liner";var v3K="pen";var x3K="_preo";var E3K="nline";var m3K="conten";var C3K="deta";var g3K="pend";var B3K="rappe";var Y3K="div class=\"";var Z9K="e=\"width:";var J9K="\" sty";var P9K="lac";var c9K="ppend";var u9K="formEr";var l7V=E5u;l7V+=O3F;l7V+=L1U.q1F;l7V+=w1F;var R7V=F0K;R7V+=e4F;R7V+=t6F;R7V+=x6F;var E7V=u9K;E7V+=X1F;E7V+=e4F;E7V+=X1F;var m7V=L1U.j1F;m7V+=e4F;m7V+=u1F;var C7V=L1U.x1F;C7V+=c9K;var g7V=L1U.q1F;g7V+=e4F;g7V+=L1U.j1F;g7V+=w1F;var B7V=L1U.x1F;B7V+=X3F;B7V+=Z3F;B7V+=u2u;var Y7V=k0u;Y7V+=X3F;Y7V+=P9K;Y7V+=w1F;var Z0V=O3F;Z0V+=L1U.q1F;Z0V+=w1F;Z0V+=X1F;var J0V=L1U.z1F;J0V+=E9F;J0V+=L1U.q1F;J0V+=L1U.j1F;var X0V=Z2u;X0V+=J2u;var S0V=h0K;S0V+=K9F;S0V+=V9K;S0V+=x6F;var V0V=v0u;V0V+=S9K;V0V+=e7K;V0V+=g0u;var P0V=y3F;P0V+=X9K;P0V+=w2u;var c0V=J9K;c0V+=I3F;c0V+=Z9K;var u0V=v0u;u0V+=Y3K;var p0V=B2u;p0V+=g0u;var t0V=y3F;t0V+=B3K;t0V+=X1F;var i0V=L1U.x1F;i0V+=X3F;i0V+=g3K;var Q0V=C3K;Q0V+=e9K;var n0V=m3K;n0V+=w9u;var U0V=E9F;U0V+=E3K;var h0V=x3K;h0V+=v3K;var namespace=that[B7K](opts);var ret=that[h0V](U0V);if(!ret){return that;}var children=node[n0V]()[Q0V]();node[i0V]($(v7K+classes[t0V]+p0V+u0V+classes[T3K]+c0V+node[P0V]()+I3K+k3K+V0V+v7K+classes[S0V]+q3K+X0V));node[J0V](z3K+classes[Z0V][Y7V](/ /g,N3K))[B7V](field[g7V]())[C7V](that[m7V][E7V]);if(opts[C8K]){var I7V=X1F;I7V+=w1F;I7V+=H1u;I7V+=w1F;var T7V=h0K;T7V+=j3K;var v7V=u1u;v7V+=g6F;v7V+=s2K;var x7V=L1U.z1F;x7V+=E9F;x7V+=L1U.q1F;x7V+=L1U.j1F;node[x7V](v7V+classes[T7V][I7V](/ /g,N3K))[z1u](that[h7u][C8K]);}that[l7K](function(submitComplete,action){var s3K="ick";var r3K="amicInfo";var f3K="_clearD";var j7V=f3K;j7V+=k3F;j7V+=L1U.q1F;j7V+=r3K;var q7V=M3K;q7V+=K9F;var k7V=s4F;k7V+=s3K;closed=o2u;$(document)[v6u](k7V+namespace);if(!submitComplete||action!==q7V){var N7V=L1U.x1F;N7V+=X3F;N7V+=v3K;N7V+=L1U.j1F;var z7V=i9F;z7V+=e4F;z7V+=d3K;z7V+=x6F;node[z7V]()[f3u]();node[N7V](children);}that[j7V]();});setTimeout(function(){var f7V=e4F;f7V+=L1U.q1F;if(closed){return;}$(document)[f7V](t7u+namespace,function(e){var w3K='owns';var K3K='addBack';var a3K="addBack";var W3K="Self";var l3K="and";var R3K="targ";var b7V=X3F;b7V+=b3K;var d7V=w6u;d7V+=X1F;d7V+=A3F;d7V+=R5u;var s7V=R3K;s7V+=R5u;var M7V=l3K;M7V+=W3K;var r7V=L1U.z1F;r7V+=L1U.q1F;var back=$[r7V][a3K]?K3K:M7V;if(!field[O7u](w3K,e[s7V])&&$[a1u](node[z8F],$(e[d7V])[b7V]()[back]())===-N8F){that[r0K]();}});},z8F);that[R7V]([field],opts[X7u]);that[D3K](l7V);});return this;};Editor[E8u][w7u]=function(name,msg){if(msg===undefined){var W7V=r7K;W7V+=y3K;W7V+=L1U.q1F;W7V+=s7K;this[x9K](this[h7u][W7V],name);}else{var a7V=L1U.z1F;a7V+=v5u;a7V+=I3F;a7V+=L1U.j1F;this[a7V](name)[w7u](msg);}return this;};Editor[K7V][w7V]=function(mode){var F3K="t supported";var L3K=" create mode is no";var H3K="hanging from";var O3K='Not currently in an editing mode';var o3K="tion";var O7V=B6u;O7V+=o3K;var y7V=i9F;y7V+=g1u;y7V+=K9F;y7V+=w1F;var D7V=L1U.x1F;D7V+=x8K;D7V+=P6F;D7V+=L1U.q1F;if(!mode){return this[x6F][A2K];}if(!this[x6F][A2K]){throw new Error(O3K);}else if(this[x6F][D7V]===y7V&&mode!==A3K){var o7V=B8K;o7V+=H3K;o7V+=L3K;o7V+=F3K;throw new Error(o7V);}this[x6F][O7V]=mode;return this;};Editor[A7V][H7V]=function(){var e3K="modif";var L7V=e3K;L7V+=v5u;L7V+=X1F;return this[x6F][L7V];};Editor[F7V][e7V]=function(fieldNames){var G3K="Get";var U7V=u1F;U7V+=G1F;U7V+=m0K;U7V+=G3K;var that=this;if(fieldNames===undefined){fieldNames=this[V2K]();}if($[p1u](fieldNames)){var G7V=w1F;G7V+=L1U.x1F;G7V+=i9F;G7V+=J9F;var out={};$[G7V](fieldNames,function(i,name){var h3K="ultiGe";var h7V=u1F;h7V+=h3K;h7V+=K9F;out[name]=that[x4F](name)[h7V]();});return out;}return this[x4F](fieldNames)[U7V]();};Editor[n7V][Q7V]=function(fieldNames,val){var n3K="tiS";var that=this;if($[w0K](fieldNames)&&val===undefined){var i7V=w1F;i7V+=L1U.x1F;i7V+=e9K;$[i7V](fieldNames,function(name,value){var U3K="tiSe";var t7V=Y9u;t7V+=U3K;t7V+=K9F;that[x4F](name)[t7V](value);});}else{var u7V=Y9u;u7V+=n3K;u7V+=R5u;var p7V=b1F;p7V+=w1F;p7V+=W1F;this[p7V](fieldNames)[u7V](val);}return this;};Editor[c7V][F2K]=function(name){var V7V=u1F;V7V+=L1U.x1F;V7V+=X3F;var that=this;if(!name){var P7V=e4F;P7V+=u8K;name=this[P7V]();}return $[p1u](name)?$[V7V](name,function(n){var S7V=L1U.q1F;S7V+=K8K;return that[x4F](n)[S7V]();}):this[x4F](name)[F2K]();};Editor[E8u][v6u]=function(name,fn){var i3K="ntNa";var X7V=n9F;X7V+=Q3K;X7V+=i3K;X7V+=o1F;$(this)[v6u](this[X7V](name),fn);return this;};Editor[J7V][Z7V]=function(name,fn){var Y8V=e4F;Y8V+=L1U.q1F;$(this)[Y8V](this[t3K](name),fn);return this;};Editor[B8V][g8V]=function(name,fn){var p3K="Nam";var m8V=n9F;m8V+=w1K;m8V+=p3K;m8V+=w1F;var C8V=i7u;C8V+=w1F;$(this)[C8V](this[m8V](name),fn);return this;};Editor[E8V][x8V]=function(){var u3K="ayControl";var T8V=L6F;T8V+=u3K;T8V+=K6F;T8V+=X1F;var that=this;this[c3K]();this[l7K](function(submitComplete){var P3K="isplayController";var v8V=L1U.j1F;v8V+=P3K;that[x6F][v8V][k4u](that,function(){that[V3K]();});});var ret=this[g7K](S3K);if(!ret){return this;}this[x6F][T8V][X3K](this,this[h7u][O3u],function(){var B4K="cus";var Y4K="itOpts";var N8V=J3K;N8V+=A0K;var z8V=Z3K;z8V+=Y4K;var k8V=u1F;k8V+=L1U.x1F;k8V+=X3F;var I8V=F0K;I8V+=e4F;I8V+=B4K;that[I8V]($[k8V](that[x6F][M4F],function(name){var q8V=L1U.z1F;q8V+=v5u;q8V+=I3F;q8V+=D6F;return that[x6F][q8V][name];}),that[x6F][z8V][N8V]);});this[D3K](S3K);return this;};Editor[E8u][M4F]=function(set){var z4K=" ordering.";var q4K="ed for";var k4K="ovid";var I4K="All fields, and no additional fields, must be pr";var v4K="ice";var E4K="rt";var m4K="so";var C4K="jo";var l8V=g4K;l8V+=F9F;var b8V=A4F;b8V+=e4F;b8V+=E9F;b8V+=L1U.q1F;var d8V=x6F;d8V+=e4F;d8V+=X1F;d8V+=K9F;var s8V=C4K;s8V+=E5u;var M8V=m4K;M8V+=E4K;if(!set){var j8V=e4F;j8V+=u8K;return this[x6F][j8V];}if(arguments[D2u]&&!$[p1u](set)){var r8V=x4K;r8V+=U4F;var f8V=x6F;f8V+=I3F;f8V+=v4K;set=Array[E8u][f8V][r8V](arguments);}if(this[x6F][M4F][x8u]()[M8V]()[s8V](T4K)!==set[x8u]()[d8V]()[b8V](T4K)){var R8V=I4K;R8V+=k4K;R8V+=q4K;R8V+=z4K;throw R8V;}$[Z0u](this[x6F][l8V],set);this[c3K]();return this;};Editor[W8V][a6u]=function(items,arg1,arg2,arg3,arg4){var r4K='initRemove';var j4K="difi";var N4K="actionClass";var G8V=L1U.q1F;G8V+=e4F;G8V+=L1U.j1F;G8V+=w1F;var e8V=t8K;e8V+=Y8K;e8V+=L1U.q1F;e8V+=K9F;var F8V=n9F;F8V+=N4K;var L8V=u1u;L8V+=x6F;L8V+=X3F;L8V+=E1u;var H8V=z0u;H8V+=k3F;H8V+=K6F;var A8V=L1U.j1F;A8V+=P1u;var O8V=r9K;O8V+=M9K;O8V+=x6F;var o8V=u1F;o8V+=e4F;o8V+=j4K;o8V+=F9F;var y8V=k0u;y8V+=t2u;y8V+=Y8K;var D8V=B6u;D8V+=K9F;D8V+=d1F;var w8V=K6F;w8V+=L1U.q1F;w8V+=L7K;var a8V=X8u;a8V+=E9F;a8V+=o4u;var that=this;if(this[a8V](function(){var K8V=k0u;K8V+=u1F;K8V+=e4F;K8V+=Y8K;that[K8V](items,arg1,arg2,arg3,arg4);})){return this;}if(items[w8V]===undefined){items=[items];}var argOpts=this[J8K](arg1,arg2,arg3,arg4);var editFields=this[J2K](f4K,items);this[x6F][D8V]=y8V;this[x6F][o8V]=items;this[x6F][O8V]=editFields;this[A8V][r7K][H8V][L8V]=W8u;this[F8V]();this[e8V](r4K,[_pluck(editFields,G8V),_pluck(editFields,A1K),items],function(){var s4K='initMultiRemove';var h8V=M4K;h8V+=K9F;that[h8V](s4K,[editFields,items],function(){var l4K="eq";var R4K="utto";var b4K="_assembleMa";var d4K="tO";var i8V=L1U.z1F;i8V+=D5K;i8V+=G1F;i8V+=x6F;var Q8V=w1F;Q8V+=u1u;Q8V+=d4K;Q8V+=T8u;var n8V=e4F;n8V+=T8u;var U8V=b4K;U8V+=E5u;that[U8V]();that[B7K](argOpts[n8V]);argOpts[C9K]();var opts=that[x6F][Q8V];if(opts[i8V]!==A7u){var u8V=L1U.z1F;u8V+=D5K;u8V+=A0K;var p8V=a9F;p8V+=R4K;p8V+=L1U.q1F;p8V+=x6F;var t8V=a9F;t8V+=G1F;t8V+=K9F;t8V+=V9K;$(t8V,that[h7u][p8V])[l4K](opts[u8V])[X7u]();}});});return this;};Editor[E8u][c8V]=function(set,val){var P8V=w1F;P8V+=L1U.x1F;P8V+=i9F;P8V+=J9F;var that=this;if(!$[w0K](set)){var o={};o[set]=val;set=o;}$[P8V](set,function(n,v){that[x4F](n)[O7K](v);});return this;};Editor[E8u][V8V]=function(names,animate){var S8V=w1F;S8V+=L1U.x1F;S8V+=i9F;S8V+=J9F;var that=this;$[S8V](this[N9K](names),function(i,n){var X8V=b1F;X8V+=w1F;X8V+=W1F;that[X8V](n)[T3u](animate);});return this;};Editor[J8V][Z8V]=function(successCallback,errorCallback,formatdata,hide){var K4K="oces";var a4K="sin";var g1V=W4K;g1V+=x6F;g1V+=a4K;g1V+=A3F;var B1V=q3F;B1V+=K4K;B1V+=x6F;B1V+=f1K;var Y1V=L1U.z1F;Y1V+=E9F;Y1V+=M9K;Y1V+=x6F;var that=this,fields=this[x6F][Y1V],errorFields=[],errorReady=z8F,sent=y2u;if(this[x6F][B1V]||!this[x6F][A2K]){return this;}this[g1V](o2u);var send=function(){var D4K='initSubmit';var m1V=L1U.x1F;m1V+=i9F;m1V+=L1U.k1F;m1V+=L1U.q1F;var C1V=I3F;C1V+=K2u;C1V+=K9F;C1V+=J9F;if(errorFields[C1V]!==errorReady||sent){return;}that[w4K](D4K,[that[x6F][m1V]],function(result){if(result===y2u){that[y4K](y2u);return;}sent=o2u;that[o4K](successCallback,errorCallback,formatdata,hide);});};this[p8u]();$[w1u](fields,function(name,field){if(field[a9K]()){var E1V=X3F;E1V+=G1F;E1V+=T6F;errorFields[E1V](name);}});$[w1u](errorFields,function(i,name){fields[name][p8u](p5u,function(){errorReady++;send();});});send();return this;};Editor[E8u][x1V]=function(set){var A4K="late";var O4K="tem";var v1V=O4K;v1V+=X3F;v1V+=A4K;if(set===undefined){return this[x6F][H4K];}this[x6F][v1V]=set===A7u?A7u:$(set);return this;};Editor[T1V][I1V]=function(title){var L4K="ader";var j1V=b7K;j1V+=L4K;var N1V=F4K;N1V+=e4K;N1V+=x6F;var z1V=L1U.j1F;z1V+=E9F;z1V+=k2K;var q1V=e9K;q1V+=s2u;q1V+=G4K;q1V+=c3F;var k1V=J9F;k1V+=h4K;k1V+=q4F;k1V+=X1F;var header=$(this[h7u][k1V])[q1V](z1V+this[N1V][j1V][C4u]);if(title===undefined){var f1V=J9F;f1V+=K9F;f1V+=U4K;return header[f1V]();}if(typeof title===Y8u){var r1V=w6u;r1V+=r5u;title=title(this,new DataTable[I9u](this[x6F][r1V]));}header[q1u](title);return this;};Editor[M1V][s1V]=function(field,value){var n4K="PlainOb";var d1V=z9u;d1V+=n4K;d1V+=Q4K;if(value!==undefined||$[d1V](field)){return this[O7K](field,value);}return this[c7K](field);};var apiRegister=DataTable[I9u][i4K];function __getInst(api){var p4K="oInit";var t4K="context";var b1V=M3K;b1V+=z6F;b1V+=X1F;var ctx=api[t4K][z8F];return ctx[p4K][b1V]||ctx[u4K];}function __setBasic(inst,opts,type,plural){var Y6K='1';var Z4K=/%d/;var J4K="nfirm";var X4K="epl";var P4K='_basic';var c4K="essage";var W1V=u1F;W1V+=c4K;if(!opts){opts={};}if(opts[C8K]===undefined){var R1V=h0K;R1V+=K9F;R1V+=K9F;R1V+=u9F;opts[R1V]=P4K;}if(opts[d7K]===undefined){var l1V=h2u;l1V+=V4K;l1V+=w1F;opts[d7K]=inst[A9u][type][l1V];}if(opts[W1V]===undefined){if(type===S4K){var K1V=X1F;K1V+=X4K;K1V+=B6u;K1V+=w1F;var a1V=i9F;a1V+=e4F;a1V+=J4K;var confirm=inst[A9u][type][a1V];opts[w7u]=plural!==N8F?confirm[n9F][K1V](Z4K,plural):confirm[Y6K];}else{opts[w7u]=p5u;}}return opts;}apiRegister(w1V,function(){return __getInst(this);});apiRegister(D1V,function(opts){var y1V=B6K;y1V+=h4K;y1V+=R3F;var inst=__getInst(this);inst[y1V](__setBasic(inst,opts,A3K));return this;});apiRegister(o1V,function(opts){var inst=__getInst(this);inst[Y6F](this[z8F][z8F],__setBasic(inst,opts,g6K));return this;});apiRegister(O1V,function(opts){var A1V=M3K;A1V+=K9F;var inst=__getInst(this);inst[Y6F](this[z8F],__setBasic(inst,opts,A1V));return this;});apiRegister(C6K,function(opts){var L1V=X1F;L1V+=w1F;L1V+=m6K;L1V+=w1F;var H1V=E6K;H1V+=w1F;var inst=__getInst(this);inst[H1V](this[z8F][z8F],__setBasic(inst,opts,L1V,N8F));return this;});apiRegister(F1V,function(opts){var e1V=d9K;e1V+=v1K;e1V+=J9F;var inst=__getInst(this);inst[a6u](this[z8F],__setBasic(inst,opts,S4K,this[z8F][e1V]));return this;});apiRegister(G1V,function(type,opts){var v6K="inlin";var x6K="isPl";var U1V=x6K;U1V+=n5u;U1V+=y2K;U1V+=h1K;if(!type){var h1V=v6K;h1V+=w1F;type=h1V;}else if($[U1V](type)){var n1V=K9K;n1V+=w9K;opts=type;type=n1V;}__getInst(this)[type](this[z8F][z8F],opts);return this;});apiRegister(Q1V,function(opts){__getInst(this)[b0K](this[z8F],opts);return this;});apiRegister(i1V,_api_file);apiRegister(T6K,_api_files);$(document)[t1V](I6K,function(e,ctx,json){var q6K='dt';if(e[k6K]!==q6K){return;}if(json&&json[z6K]){var p1V=b1F;p1V+=K6F;p1V+=x6F;$[w1u](json[p1V],function(name,files){var V1V=b1F;V1V+=R1F;var P1V=w1F;P1V+=N6K;P1V+=L1U.q1F;P1V+=L1U.j1F;var u1V=b1F;u1V+=I3F;u1V+=G6F;if(!Editor[u1V][name]){var c1V=L1U.z1F;c1V+=E9F;c1V+=R1F;Editor[c1V][name]={};}$[P1V](Editor[V1V][name],files);});}});Editor[p8u]=function(msg,tn){var j6K=' For more information, please refer to https://datatables.net/tn/';throw tn?msg+j6K+tn:msg;};Editor[f6K]=function(data,props,fn){var d6K="lab";var r6K="Arr";var J1V=E9F;J1V+=x6F;J1V+=r6K;J1V+=F6F;var X1V=M6K;X1V+=s6K;var S1V=p2u;S1V+=B2K;S1V+=L1U.j1F;var i,ien,dataPoint;props=$[S1V]({label:s1K,value:X1V},props);if($[J1V](data)){for(i=z8F,ien=data[D2u];i<ien;i++){dataPoint=data[i];if($[w0K](dataPoint)){var B9V=g6F;B9V+=L1U.x1F;B9V+=s6K;var Y9V=d6K;Y9V+=w1F;Y9V+=I3F;var Z1V=g6F;Z1V+=L1U.x1F;Z1V+=I3F;Z1V+=b6K;fn(dataPoint[props[Z1V]]===undefined?dataPoint[props[Y9V]]:dataPoint[props[B9V]],dataPoint[props[j7u]],i,dataPoint[d8K]);}else{fn(dataPoint,dataPoint,i);}}}else{var g9V=w1F;g9V+=L1U.x1F;g9V+=i9F;g9V+=J9F;i=z8F;$[g9V](data,function(key,val){fn(val,key,i);i++;});}};Editor[z7u]=function(id){return id[G1u](/\./g,T4K);};Editor[R6K]=function(editor,conf,files,progressCallback,completeCallback){var K5m="_limitLeft";var b5m="readAsDataURL";var O6K="onload";var o6K='A server error occurred while uploading the file';var D6K="adT";var w6K="fileR";var K6K="ing file</i>";var a6K="<i>Upload";var W6K="mitLef";var l6K="_l";var E3V=l6K;E3V+=E9F;E3V+=W6K;E3V+=K9F;var x9V=a6K;x9V+=K6K;var E9V=w6K;E9V+=w1F;E9V+=D6K;E9V+=m7u;var m9V=L1U.x1F;m9V+=A4F;m9V+=H4F;var C9V=y6K;C9V+=u1F;C9V+=w1F;var reader=new FileReader();var counter=z8F;var ids=[];var generalError=o6K;editor[p8u](conf[C9V],p5u);if(typeof conf[m9V]===Y8u){conf[T0K](files,function(ids){completeCallback[v8u](editor,ids);});return;}progressCallback(conf,conf[E9V]||x9V);reader[O6K]=function(e){var J6K='preSubmit.DTE_Upload';var X6K="RL";var S6K="DataU";var V6K="eadAs";var c6K='preUpload';var u6K=" specified for upload plug-in";var p6K="No Ajax option";var t6K="oa";var Q6K="ajaxData";var n6K='action';var h6K="adFie";var e6K="up";var F6K="pload";var A6K="po";var o9V=A4F;o9V+=x6F;o9V+=e4F;o9V+=L1U.q1F;var y9V=A6K;y9V+=z0u;var D9V=H6K;D9V+=P9u;var w9V=e4F;w9V+=L1U.q1F;var W9V=L1U.q1F;W9V+=c2K;W9V+=w1F;var d9V=N0K;d9V+=L6K;var s9V=z0u;s9V+=p7K;s9V+=L1U.q1F;s9V+=A3F;var f9V=L1U.x1F;f9V+=A4F;f9V+=L1U.x1F;f9V+=P9u;var z9V=L1U.x1F;z9V+=A4F;z9V+=L1U.x1F;z9V+=P9u;var q9V=G1F;q9V+=F6K;var k9V=y6K;k9V+=o1F;var I9V=e6K;I9V+=G6K;I9V+=h6K;I9V+=W1F;var T9V=G1F;T9V+=F6K;var v9V=L1U.x1F;v9V+=U6K;v9V+=L1U.q1F;v9V+=L1U.j1F;var data=new FormData();var ajax;data[v9V](n6K,T9V);data[z1u](I9V,conf[k9V]);data[z1u](q9V,files[counter]);if(conf[Q6K]){conf[Q6K](data);}if(conf[T0K]){ajax=conf[T0K];}else if($[w0K](editor[x6F][z9V])){var j9V=L1U.x1F;j9V+=i6K;var N9V=G1F;N9V+=Q6u;N9V+=t6K;N9V+=L1U.j1F;ajax=editor[x6F][T0K][R6K]?editor[x6F][T0K][N9V]:editor[x6F][j9V];}else if(typeof editor[x6F][f9V]===F1u){var r9V=L1U.x1F;r9V+=A4F;r9V+=L1U.x1F;r9V+=P9u;ajax=editor[x6F][r9V];}if(!ajax){var M9V=p6K;M9V+=u6K;throw M9V;}if(typeof ajax===s9V){ajax={url:ajax};}if(typeof ajax[j5u]===d9V){var R9V=h4K;R9V+=i9F;R9V+=J9F;var b9V=W3F;b9V+=K9F;b9V+=L1U.x1F;var d={};var ret=ajax[b9V](d);if(ret!==undefined&&typeof ret!==F1u){d=ret;}$[R9V](d,function(key,value){var l9V=B8u;l9V+=V3u;data[l9V](key,value);});}var preRet=editor[w4K](c6K,[conf[W9V],files[counter],data]);if(preRet===y2u){var a9V=K6F;a9V+=P6K;if(counter<files[a9V]-N8F){var K9V=X1F;K9V+=V6K;K9V+=S6K;K9V+=X6K;counter++;reader[K9V](files[counter]);}else{completeCallback[v8u](editor,ids);}return;}var submit=y2u;editor[w9V](J6K,function(){submit=o2u;return y2u;});$[D9V]($[Z0u]({},ajax,{type:y9V,data:data,dataType:o9V,contentType:y2u,processData:y2u,xhr:function(){var v5m="onloadend";var g5m="nprogre";var B5m="ting";var Y5m="ajaxSet";var H9V=G1F;H9V+=Q6u;H9V+=Z6K;var A9V=P9u;A9V+=J9F;A9V+=X1F;var O9V=Y5m;O9V+=B5m;O9V+=x6F;var xhr=$[O9V][A9V]();if(xhr[H9V]){var L9V=e4F;L9V+=g5m;L9V+=d8u;xhr[R6K][L9V]=function(e){var x5m=':';var E5m="%";var m5m="toFixed";var C5m="lengthComputable";if(e[C5m]){var G9V=I3F;G9V+=w1F;G9V+=Q5u;G9V+=w2u;var e9V=K9F;e9V+=m4F;e9V+=S7u;var F9V=G6K;F9V+=L1U.x1F;F9V+=q4F;F9V+=L1U.j1F;var percent=(e[F9V]/e[e9V]*i8F)[m5m](z8F)+E5m;progressCallback(conf,files[D2u]===N8F?percent:counter+x5m+files[G9V]+T7u+percent);}};xhr[R6K][v5m]=function(e){var k5m="processingText";var I5m="rocess";var h9V=T5m;h9V+=I5m;h9V+=E9F;h9V+=Q5u;progressCallback(conf,conf[k5m]||h9V);};}return xhr;},success:function(json){var l5m="bmi";var r5m="ieldEr";var j5m='uploadXhrSuccess';var z5m="ldE";var c9V=e6K;c9V+=G6K;c9V+=q5m;var Q9V=l1F;Q9V+=z5m;Q9V+=X1F;Q9V+=N5m;var n9V=y6K;n9V+=o1F;var U9V=n9F;U9V+=w1K;editor[v6u](J6K);editor[U9V](j5m,[conf[n9V],json]);if(json[f5m]&&json[Q9V][D2u]){var i9V=L1U.z1F;i9V+=r5m;i9V+=N5m;var errors=json[i9V];for(var i=z8F,ien=errors[D2u];i<ien;i++){var t9V=M5m;t9V+=w1F;editor[p8u](errors[i][t9V],errors[i][s5m]);}}else if(json[p8u]){var u9V=w1F;u9V+=X1F;u9V+=W6F;var p9V=F9F;p9V+=X1F;p9V+=q5u;editor[p9V](json[u9V]);}else if(!json[c9V]||!json[R6K][X9K]){var V9V=L1U.q1F;V9V+=L1U.x1F;V9V+=u1F;V9V+=w1F;var P9V=w1F;P9V+=d5m;P9V+=e4F;P9V+=X1F;editor[P9V](conf[V9V],generalError);}else{if(json[z6K]){var S9V=w1F;S9V+=L1U.x1F;S9V+=i9F;S9V+=J9F;$[S9V](json[z6K],function(table,files){var Z9V=w1F;Z9V+=N6K;Z9V+=u2u;var X9V=L1U.z1F;X9V+=j2u;if(!Editor[X9V][table]){var J9V=f2u;J9V+=x6F;Editor[J9V][table]={};}$[Z9V](Editor[z6K][table],files);});}ids[K1u](json[R6K][X9K]);if(counter<files[D2u]-N8F){counter++;reader[b5m](files[counter]);}else{var Y3V=i9F;Y3V+=R5m;completeCallback[Y3V](editor,ids);if(submit){var B3V=x6F;B3V+=G1F;B3V+=l5m;B3V+=K9F;editor[B3V]();}}}progressCallback(conf);},error:function(xhr){var a5m="XhrError";var W5m="upl";var m3V=L1U.q1F;m3V+=L1U.x1F;m3V+=u1F;m3V+=w1F;var C3V=w1F;C3V+=X1F;C3V+=W6F;var g3V=W5m;g3V+=Z6K;g3V+=a5m;editor[w4K](g3V,[conf[p2K],xhr]);editor[C3V](conf[m3V],generalError);progressCallback(conf);}}));};files=$[z9K](files,function(val){return val;});if(conf[E3V]!==undefined){files[F8K](conf[K5m],files[D2u]);}reader[b5m](files[z8F]);};Editor[E8u][x3V]=function(init){var I0m="init";var T0m="yController";var C0m='xhr.dt.dte';var B0m='init.dt.dte';var J2m='foot';var S2m="events";var t2m="TON";var n2m='<div data-dte-e="form_buttons" class="';var U2m='</form>';var h2m='<div data-dte-e="form_content" class="';var G2m="tag";var F2m='<div data-dte-e="processing" class="';var H2m="domTable";var o2m="defau";var y2m="dels";var D2m="domTa";var w2m="xUrl";var K2m="Src";var a2m="taSources";var b2m="Op";var d2m="empla";var s2m="asse";var r2m="<div cl";var f2m="cator";var j2m="indi";var N2m="span/>";var z2m="\"><";var q2m=" data-dte-e=\"body\" c";var k2m="ody_content\" class=\"";var I2m="dte-e=\"b";var T2m="<div data-";var v2m="od";var E2m="<div data-dte-e=\"foot\" ";var C2m="-e=\"form\" c";var g2m="-dte";var B2m="<form data";var Z5m="form_error\" class=\"";var J5m="v data-dte-e=\"";var X5m="\"/";var S5m="ta-dte-e=\"form_info\" class=\"";var V5m="<div da";var P5m="\"head\"";var c5m="<div data-dte-e=";var u5m="rap";var p5m="v clas";var t5m="><di";var i5m="head";var n5m="/><";var U5m="dataT";var h5m="ols";var G5m="leT";var e5m="Tab";var F5m="Co";var L5m="orm";var H5m="form_conten";var A5m="ooter";var o5m="_cont";var y5m="proces";var D5m="iq";var w5m="itComplete";var y4V=E9F;y4V+=L1U.q1F;y4V+=w5m;var R4V=G1F;R4V+=L1U.q1F;R4V+=D5m;R4V+=b6K;var b4V=e4F;b4V+=L1U.q1F;var r4V=e4F;r4V+=L1U.q1F;var f4V=y5m;f4V+=x6F;f4V+=f1K;var j4V=z5K;j4V+=o5m;j4V+=w1F;j4V+=D3u;var N4V=O5m;N4V+=o4u;var z4V=L1U.z1F;z4V+=A5m;var q4V=H5m;q4V+=K9F;var k4V=L1U.z1F;k4V+=L5m;k4V+=F5m;k4V+=d3K;var I4V=l5K;I4V+=L1U.x1F;I4V+=L4u;var Z3V=e5m;Z3V+=G5m;Z3V+=e4F;Z3V+=h5m;var J3V=U5m;J3V+=o2K;var X3V=B2u;X3V+=n5m;X3V+=e6u;var S3V=i9F;S3V+=i7u;S3V+=K9F;S3V+=Q5m;var V3V=i5m;V3V+=F9F;var P3V=B2u;P3V+=t5m;P3V+=p5m;P3V+=K0u;var c3V=y3F;c3V+=u5m;c3V+=X3F;c3V+=F9F;var u3V=c5m;u3V+=P5m;u3V+=S9u;u3V+=s0u;var p3V=L1U.z1F;p3V+=q5u;p3V+=u1F;var t3V=V5m;t3V+=S5m;var i3V=X5m;i3V+=g0u;var Q3V=w1F;Q3V+=i2u;var n3V=L1U.z1F;n3V+=L5m;var U3V=h0u;U3V+=J5m;U3V+=Z5m;var h3V=B2u;h3V+=d0u;h3V+=g0u;var G3V=L1U.z1F;G3V+=e4F;G3V+=Y2m;var e3V=B2m;e3V+=g2m;e3V+=C2m;e3V+=m2m;var F3V=Y0u;F3V+=Z9u;var L3V=s7K;L3V+=e4F;L3V+=K9F;L3V+=F9F;var H3V=B2u;H3V+=g0u;var A3V=E2m;A3V+=x2m;var O3V=B2u;O3V+=d0u;O3V+=g0u;var o3V=a9F;o3V+=v2m;o3V+=k3F;var y3V=T2m;y3V+=I2m;y3V+=k2m;var D3V=V9u;D3V+=q2m;D3V+=I3F;D3V+=s0u;var w3V=z2m;w3V+=N2m;w3V+=P2u;w3V+=V2u;var K3V=j2m;K3V+=f2m;var a3V=B2u;a3V+=g0u;var W3V=r2m;W3V+=M2m;W3V+=B2u;var l3V=L1U.j1F;l3V+=e4F;l3V+=u1F;var R3V=i9F;R3V+=H8u;R3V+=X0K;var b3V=E9F;b3V+=J0u;b3V+=L1U.q1F;var d3V=i9F;d3V+=I3F;d3V+=s2m;d3V+=x6F;var s3V=n6u;s3V+=L1U.q1F;s3V+=L1U.j1F;var M3V=b9u;M3V+=G6F;var r3V=K9F;r3V+=d2m;r3V+=R3F;var f3V=L1U.z1F;f3V+=L5m;f3V+=b2m;f3V+=g9K;var j3V=D1F;j3V+=R2m;j3V+=G4u;j3V+=l2m;var N3V=j5u;N3V+=W2m;N3V+=w1F;var z3V=W3F;z3V+=a2m;var q3V=X9K;q3V+=K2m;var k3V=H6K;k3V+=w2m;var I3V=D2m;I3V+=a9F;I3V+=I3F;I3V+=w1F;var T3V=t2u;T3V+=y2m;var v3V=o2m;v3V+=R9u;v3V+=x6F;init=$[Z0u](o2u,{},Editor[v3V],init);this[x6F]=$[Z0u](o2u,{},Editor[T3V][O2m],{table:init[I3V]||init[k9u],dbTable:init[A2m]||A7u,ajaxUrl:init[k3V],ajax:init[T0K],idSrc:init[q3V],dataSource:init[H2m]||init[k9u]?Editor[z3V][N3V]:Editor[j3V][q1u],formOptions:init[f3V],legacyAjax:init[L2m],template:init[r3V]?$(init[H4K])[f3u]():A7u});this[M3V]=$[s3V](o2u,{},Editor[d3V]);this[b3V]=init[A9u];Editor[U9u][O2m][V1K]++;var that=this;var classes=this[R3V];this[l3V]={"wrapper":$(W3V+classes[O3u]+a3V+F2m+classes[o7u][K3V]+w3V+D3V+classes[z5K][O3u]+N7u+y3V+classes[o3V][C4u]+O3V+M7u+A3V+classes[e2m][O3u]+H3V+v7K+classes[L3V][C4u]+q3K+F3V+M7u)[z8F],"form":$(e3V+classes[G3V][G2m]+N7u+h2m+classes[r7K][C4u]+h3V+U2m)[z8F],"formError":$(U3V+classes[n3V][Q3V]+i3V)[z8F],"formInfo":$(t3V+classes[p3V][E0u]+q3K)[z8F],"header":$(u3V+classes[H2K][c3V]+P3V+classes[V3V][S3V]+X3V)[z8F],"buttons":$(n2m+classes[r7K][C8K]+q3K)[z8F]};if($[c5u][J3V][Z3V]){var C4V=X1F;C4V+=Q2m;var g4V=w1F;g4V+=u1u;g4V+=K9F;var B4V=h4K;B4V+=e9K;var Y4V=i2m;Y4V+=t2m;Y4V+=C3F;var ttButtons=$[c5u][p2m][u2m][Y4V];var i18n=this[A9u];$[B4V]([A3K,g4V,C4V],function(i,val){var V2m="sButtonText";var P2m='editor_';var c2m="tton";var m4V=h0K;m4V+=c2m;ttButtons[P2m+val][V2m]=i18n[val][m4V];});}$[w1u](init[S2m],function(evt,fn){var E4V=e4F;E4V+=L1U.q1F;that[E4V](evt,function(){var X2m="sli";var T4V=x4K;T4V+=I3F;T4V+=I3F;var v4V=X2m;v4V+=h4F;var x4V=Q3F;x4V+=e6F;var args=Array[x4V][v4V][T4V](arguments);args[G9u]();fn[E7K](that,args);});});var dom=this[h7u];var wrapper=dom[I4V];dom[k4V]=_editor_el(q4V,dom[r7K])[z8F];dom[z4V]=_editor_el(J2m,wrapper)[z8F];dom[z5K]=_editor_el(N4V,wrapper)[z8F];dom[Z2m]=_editor_el(j4V,wrapper)[z8F];dom[f4V]=_editor_el(Y0m,wrapper)[z8F];if(init[V2K]){this[Q2K](init[V2K]);}$(document)[r4V](B0m+this[x6F][V1K],function(e,settings,json){var g0m="nT";var d4V=A3F;d4V+=w1F;d4V+=K9F;var s4V=g0m;s4V+=b9F;s4V+=I3F;s4V+=w1F;var M4V=K9F;M4V+=o2K;if(that[x6F][M4V]&&settings[s4V]===$(that[x6F][k9u])[d4V](z8F)){settings[u4K]=that;}})[b4V](C0m+this[x6F][R4V],function(e,settings,json){var x0m="onsUpdate";var m0m="nTable";var l4V=K9F;l4V+=o2K;if(json&&that[x6F][l4V]&&settings[m0m]===$(that[x6F][k9u])[c7K](z8F)){var W4V=E0m;W4V+=E9F;W4V+=x0m;that[W4V](json);}});try{var K4V=v0m;K4V+=Q6u;K4V+=F6F;var a4V=o6F;a4V+=T0m;this[x6F][a4V]=Editor[K4V][init[u9u]][I0m](this);}catch(e){var z0m="ontroller ";var q0m="ay c";var k0m="Cannot find displ";var D4V=m1u;D4V+=I3F;D4V+=L1U.x1F;D4V+=k3F;var w4V=k0m;w4V+=q0m;w4V+=z0m;throw w4V+init[D4V];}this[w4K](y4V,[]);};Editor[E8u][Y1K]=function(){var M0m="Clas";var r0m="ddCl";var G4V=w1F;G4V+=L1U.j1F;G4V+=E9F;G4V+=K9F;var F4V=N0m;F4V+=S8K;var L4V=w1F;L4V+=d9u;var H4V=B6K;H4V+=j0m;H4V+=w1F;var A4V=y3F;A4V+=X1F;A4V+=B8u;A4V+=F9F;var O4V=e8u;O4V+=u1F;var o4V=L1U.x1F;o4V+=i9F;o4V+=K9F;o4V+=C4F;var classesActions=this[y8u][o4V];var action=this[x6F][A2K];var wrapper=$(this[O4V][A4V]);wrapper[u8u]([classesActions[H4V],classesActions[L4V],classesActions[a6u]][f0m](T7u));if(action===F4V){var e4V=L1U.x1F;e4V+=r0m;e4V+=Q8u;wrapper[e4V](classesActions[Z8K]);}else if(action===G4V){var h4V=Q2K;h4V+=M0m;h4V+=x6F;wrapper[h4V](classesActions[Y6F]);}else if(action===a6u){var U4V=X1F;U4V+=s0m;U4V+=Y8K;wrapper[t8u](classesActions[U4V]);}};Editor[E8u][n4V]=function(data,success,error,submitParams){var g7m='?';var Y7m="param";var Z0m="deleteBody";var J0m='DELETE';var S0m="comp";var V0m="complete";var u0m=/_id_/;var t0m="index";var i0m="Ur";var Q0m=',';var n0m="oi";var U0m='idSrc';var h0m="ajaxUrl";var w0m="js";var a0m="isPlain";var W0m="unct";var R0m="rl";var b0m="Body";var d0m="dele";var z6V=d0m;z6V+=R3F;z6V+=b0m;var T6V=G1F;T6V+=R0m;var g6V=z0u;g6V+=l0m;var X4V=L1U.z1F;X4V+=W0m;X4V+=P6F;X4V+=L1U.q1F;var S4V=a0m;S4V+=K0m;var P4V=L1U.x1F;P4V+=A4F;P4V+=L1U.x1F;P4V+=P9u;var Q4V=w0m;Q4V+=i7u;var that=this;var action=this[x6F][A2K];var thrown;var opts={type:j1K,dataType:Q4V,data:A7u,error:[function(xhr,text,err){thrown=err;}],success:[],complete:[function(xhr,text){var G0m="parseJSON";var e0m="responseJSON";var F0m="ponseJSON";var L0m="res";var H0m="onseTex";var A0m="resp";var o0m="eTe";var y0m="espons";var D0m="nul";var t8F=204;var t4V=D0m;t4V+=I3F;var i4V=X1F;i4V+=y0m;i4V+=o0m;i4V+=O0m;var json=A7u;if(xhr[s5m]===t8F||xhr[i4V]===t4V){json={};}else{try{var u4V=A0m;u4V+=H0m;u4V+=K9F;var p4V=L0m;p4V+=F0m;json=xhr[p4V]?xhr[e0m]:$[G0m](xhr[u4V]);}catch(e){}}if($[w0K](json)||$[p1u](json)){var c4V=z0u;c4V+=J5K;c4V+=A0K;success(json,xhr[c4V]>=p8F,xhr);}else{error(xhr,text,thrown);}}]};var a;var ajaxSrc=this[x6F][P4V]||this[x6F][h0m];var id=action===g6K||action===S4K?_pluck(this[x6F][Y0K],U0m):A7u;if($[p1u](id)){var V4V=A4F;V4V+=n0m;V4V+=L1U.q1F;id=id[V4V](Q0m);}if($[S4V](ajaxSrc)&&ajaxSrc[action]){ajaxSrc=ajaxSrc[action];}if(typeof ajaxSrc===X4V){var J4V=T0K;J4V+=i0m;J4V+=I3F;var uri=A7u;var method=A7u;if(this[x6F][J4V]){var Y6V=t0m;Y6V+=y2K;Y6V+=L1U.z1F;var Z4V=B6K;Z4V+=j0m;Z4V+=w1F;var url=this[x6F][h0m];if(url[Z4V]){uri=url[action];}if(uri[Y6V](T7u)!==-N8F){var B6V=p0m;B6V+=E9F;B6V+=K9F;a=uri[B6V](T7u);method=a[z8F];uri=a[N8F];}uri=uri[G1u](u0m,id);}ajaxSrc(method,uri,data,success,error);return;}else if(typeof ajaxSrc===g6V){var C6V=E5u;C6V+=L1U.j1F;C6V+=c0m;C6V+=L1U.z1F;if(ajaxSrc[C6V](T7u)!==-N8F){var m6V=z0K;m6V+=I3F;a=ajaxSrc[P0m](T7u);opts[Z7u]=a[z8F];opts[m6V]=a[N8F];}else{opts[U1K]=ajaxSrc;}}else{var E6V=w1F;E6V+=N6K;E6V+=L1U.q1F;E6V+=L1U.j1F;var optsCopy=$[E6V]({},ajaxSrc||{});if(optsCopy[V0m]){var x6V=S0m;x6V+=I3F;x6V+=X0m;opts[V0m][h9u](optsCopy[V0m]);delete optsCopy[x6V];}if(optsCopy[p8u]){var v6V=G8u;v6V+=q5u;opts[p8u][h9u](optsCopy[v6V]);delete optsCopy[p8u];}opts=$[Z0u]({},opts,optsCopy);}opts[T6V]=opts[U1K][G1u](u0m,id);if(opts[j5u]){var q6V=w1F;q6V+=N6K;q6V+=u2u;var k6V=L1U.z1F;k6V+=C8u;k6V+=x8K;k6V+=d1F;var I6V=L1U.j1F;I6V+=L1U.x1F;I6V+=K9F;I6V+=L1U.x1F;var isFn=typeof opts[I6V]===k6V;var newData=isFn?opts[j5u](data):opts[j5u];data=isFn&&newData?newData:$[q6V](o2u,data,newData);}opts[j5u]=data;if(opts[Z7u]===J0m&&(opts[Z0m]===undefined||opts[z6V]===o2u)){var f6V=L1U.j1F;f6V+=J5K;f6V+=L1U.x1F;var j6V=z0K;j6V+=I3F;var N6V=G1F;N6V+=R0m;var params=$[Y7m](opts[j5u]);opts[N6V]+=opts[j6V][B7m](g7m)===-N8F?g7m+params:U1u+params;delete opts[f6V];}$[T0K](opts);};Editor[E8u][r6V]=function(target,style,time,callback){var M6V=L1U.z1F;M6V+=L1U.q1F;if($[M6V][p5K]){var s6V=x6F;s6V+=z6F;s6V+=X3F;target[s6V]()[p5K](style,time,callback);}else{var d6V=I1u;d6V+=x6F;target[d6V](style);if(typeof time===Y8u){time[v8u](target);}else if(callback){var b6V=i9F;b6V+=L1U.x1F;b6V+=U4F;callback[b6V](target);}}};Editor[R6V][E1K]=function(){var E7m="formInfo";var m7m="hea";var C7m="formErr";var w6V=L1U.z1F;w6V+=e4F;w6V+=Y2m;var K6V=r8K;K6V+=V6F;var a6V=t6u;a6V+=L1U.q1F;a6V+=L1U.j1F;var W6V=C7m;W6V+=q5u;var l6V=m7m;l6V+=L1U.j1F;l6V+=F9F;var dom=this[h7u];$(dom[O3u])[L7u](dom[l6V]);$(dom[e2m])[z1u](dom[W6V])[a6V](dom[K6V]);$(dom[Z2m])[z1u](dom[E7m])[z1u](dom[w6V]);};Editor[D6V][y6V]=function(){var T7m="Blu";var x7m="preB";var F6V=u6F;F6V+=w1F;var H6V=x6F;H6V+=K0K;H6V+=u1F;H6V+=k5u;var A6V=x7m;A6V+=I3F;A6V+=z0K;var O6V=v7m;O6V+=w1F;O6V+=D3u;var o6V=e4F;o6V+=L1U.q1F;o6V+=T7m;o6V+=X1F;var opts=this[x6F][f0K];var onBlur=opts[o6V];if(this[O6V](A6V)===y2u){return;}if(typeof onBlur===Y8u){onBlur(this);}else if(onBlur===H6V){var L6V=E9u;L6V+=I7m;this[L6V]();}else if(onBlur===F6V){this[k7m]();}};Editor[e6V][G6V]=function(){var q7m="ssage";var p6V=o1F;p6V+=q7m;var t6V=G8u;t6V+=q5u;var Q6V=l5K;Q6V+=L1U.x1F;Q6V+=U6K;Q6V+=X1F;var n6V=L1U.j1F;n6V+=P1u;var U6V=L1U.z1F;U6V+=E9F;U6V+=M9K;U6V+=x6F;var h6V=w1F;h6V+=d5m;h6V+=q5u;if(!this[x6F]){return;}var errorClass=this[y8u][x4F][h6V];var fields=this[x6F][U6V];$(z3K+errorClass,this[n6V][Q6V])[u8u](errorClass);$[w1u](fields,function(name,field){var i6V=w1F;i6V+=F8u;i6V+=X1F;field[i6V](p5u)[w7u](p5u);});this[t6V](p5u)[p6V](p5u);};Editor[E8u][k7m]=function(submitComplete,mode){var f7m="eIc";var z7m="Ic";var X6V=t8K;X6V+=Y8K;X6V+=D3u;var S6V=S3u;S6V+=L1U.z1F;var P6V=a2K;P6V+=p6F;P6V+=z7m;P6V+=a9F;var c6V=N7m;c6V+=B8K;c6V+=C2K;var u6V=v7m;u6V+=Q5m;if(this[u6V](c6V)===y2u){return;}if(this[x6F][j7m]){this[x6F][j7m](submitComplete,mode);this[x6F][j7m]=A7u;}if(this[x6F][P6V]){var V6V=u6F;V6V+=f7m;V6V+=a9F;this[x6F][r7m]();this[x6F][V6V]=A7u;}$(B4u)[S6V](M7m);this[x6F][J1K]=y2u;this[X6V](p9u);};Editor[J6V][Z6V]=function(fn){this[x6F][j7m]=fn;};Editor[E8u][J8K]=function(arg1,arg2,arg3,arg4){var b7m="lainOb";var d7m="sP";var s7m="olean";var m5M=u1F;m5M+=L1U.x1F;m5M+=E9F;m5M+=L1U.q1F;var B5M=a9F;B5M+=e4F;B5M+=s7m;var Y5M=E9F;Y5M+=d7m;Y5M+=b7m;Y5M+=Q4K;var that=this;var title;var buttons;var show;var opts;if($[Y5M](arg1)){opts=arg1;}else if(typeof arg1===B5M){show=arg1;opts=arg2;}else{title=arg1;buttons=arg2;show=arg3;opts=arg4;}if(show===undefined){show=o2u;}if(title){var g5M=K9F;g5M+=R7m;that[g5M](title);}if(buttons){var C5M=a9F;C5M+=l7m;that[C5M](buttons);}return{opts:$[Z0u]({},this[x6F][y0K][m5M],opts),maybeOpen:function(){if(show){that[X3K]();}}};};Editor[E8u][J2K]=function(name){var x5M=i9F;x5M+=L1U.x1F;x5M+=I3F;x5M+=I3F;var E5M=U1F;E5M+=m4F;E5M+=D4F;var args=Array[E5M][x8u][x5M](arguments);args[G9u]();var fn=this[x6F][W7m][name];if(fn){return fn[E7K](this,args);}};Editor[E8u][v5M]=function(includeFields){var U7m="endT";var A7m="include";var O7m="formContent";var o7m="ildren";var y7m="det";var D7m="ven";var w7m="yOrder";var K7m="ayed";var a7m="acti";var w5M=a7m;w5M+=e4F;w5M+=L1U.q1F;var K5M=u1u;K5M+=x6F;K5M+=Q6u;K5M+=K7m;var a5M=o6F;a5M+=w7m;var W5M=t8K;W5M+=D7m;W5M+=K9F;var z5M=y7m;z5M+=L1U.x1F;z5M+=e9K;var q5M=e9K;q5M+=o7m;var I5M=t2u;I5M+=q4F;var T5M=L1U.z1F;T5M+=L8K;T5M+=x6F;var that=this;var formContent=$(this[h7u][O7m]);var fields=this[x6F][T5M];var order=this[x6F][M4F];var template=this[x6F][H4K];var mode=this[x6F][I5M]||S3K;if(includeFields){this[x6F][e8K]=includeFields;}else{var k5M=A7m;k5M+=O2u;k5M+=x6F;includeFields=this[x6F][k5M];}formContent[q5M]()[z5M]();$[w1u](order,function(i,fieldOrName){var G7m="after";var e7m='editor-field[name="';var F7m="[data-editor-";var H7m="_weakIn";var j5M=H7m;j5M+=L7m;var N5M=M5m;N5M+=w1F;var name=fieldOrName instanceof Editor[O2u]?fieldOrName[N5M]():fieldOrName;if(that[j5M](name,includeFields)!==-N8F){if(template&&mode===S3K){var b5M=L1U.x1F;b5M+=X3F;b5M+=X3F;b5M+=V3u;var d5M=B2u;d5M+=g2u;var s5M=F7m;s5M+=H4K;s5M+=I0u;var M5M=L1U.q1F;M5M+=e4F;M5M+=L1U.j1F;M5M+=w1F;var r5M=B2u;r5M+=g2u;var f5M=L1U.z1F;f5M+=E9F;f5M+=L1U.q1F;f5M+=L1U.j1F;template[f5M](e7m+name+r5M)[G7m](fields[name][M5M]());template[h7m](s5M+name+d5M)[b5M](fields[name][F2K]());}else{var R5M=F7u;R5M+=L1U.j1F;R5M+=w1F;formContent[z1u](fields[name][R5M]());}}});if(template&&mode===S3K){var l5M=B8u;l5M+=U7m;l5M+=e4F;template[l5M](formContent);}this[W5M](a5M,[this[x6F][K5M],this[x6F][w5M],formContent]);};Editor[E8u][D5M]=function(items,editFields,type,formOptions,setupDone){var m8m="inAr";var g8m="toS";var u7m="tFie";var p7m="editD";var i7m="_action";var Q7m="lengt";var n7m="tEdit";var X5M=L1U.q1F;X5M+=e4F;X5M+=L1U.j1F;X5M+=w1F;var S5M=Q8K;S5M+=n7m;var u5M=Q7m;u5M+=J9F;var F5M=w1F;F5M+=L1U.x1F;F5M+=i9F;F5M+=J9F;var L5M=i7m;L5M+=t7m;L5M+=x6F;L5M+=x6F;var H5M=x6F;H5M+=K9F;H5M+=k3F;H5M+=K6F;var A5M=L1U.j1F;A5M+=P1u;var O5M=w1F;O5M+=L1U.j1F;O5M+=k5u;var o5M=p7m;o5M+=L1U.x1F;o5M+=w6u;var y5M=M3K;y5M+=u7m;y5M+=L0K;var that=this;var fields=this[x6F][V2K];var usedFields=[];var includeInOrder;var editData={};this[x6F][y5M]=editFields;this[x6F][o5M]=editData;this[x6F][L2K]=items;this[x6F][A2K]=O5M;this[A5M][r7K][H5M][u9u]=A1u;this[x6F][g5u]=type;this[L5M]();$[F5M](fields,function(name,field){var c7m="ultiRes";var p5M=d9K;p5M+=L7K;var G5M=h4K;G5M+=e9K;var e5M=u1F;e5M+=c7m;e5M+=R5u;field[e5M]();includeInOrder=y2u;editData[name]={};$[G5M](editFields,function(idSrc,edit){var B8m="iSet";var Y8m="isplayFields";var Z7m="displayFi";var J7m="splayF";var S7m="scope";var V7m="mData";var P7m="lF";var h5M=w6F;h5M+=D6F;if(edit[h5M][name]){var U5M=M6K;U5M+=P7m;U5M+=t4F;U5M+=V7m;var val=field[U5M](edit[j5u]);editData[name][idSrc]=val===A7u?p5u:$[p1u](val)?val[x8u]():val;if(!formOptions||formOptions[S7m]===X7m){var Q5M=u1u;Q5M+=J7m;Q5M+=L8K;Q5M+=x6F;var n5M=Z7m;n5M+=w1F;n5M+=L0K;field[B1K](idSrc,val!==undefined?val:field[I8u]());if(!edit[n5M]||edit[Q5M][name]){includeInOrder=o2u;}}else{var i5M=L1U.j1F;i5M+=Y8m;if(!edit[i5M]||edit[Q9K][name]){var t5M=u1F;t5M+=y8K;t5M+=B8m;field[t5M](idSrc,val!==undefined?val:field[I8u]());includeInOrder=o2u;}}}});if(field[S8u]()[p5M]!==z8F&&includeInOrder){usedFields[K1u](name);}});var currOrder=this[M4F]()[x8u]();for(var i=currOrder[u5M]-N8F;i>=z8F;i--){var P5M=g8m;P5M+=C8m;P5M+=f1K;var c5M=m8m;c5M+=X1F;c5M+=L1U.x1F;c5M+=k3F;if($[c5M](currOrder[i][P5M](),usedFields)===-N8F){var V5M=x6F;V5M+=X3F;V5M+=e9u;currOrder[V5M](i,N8F);}}this[c3K](currOrder);this[w4K](S5M,[_pluck(editFields,X5M)[z8F],_pluck(editFields,A1K)[z8F],items,type],function(){var x8m="iEdit";var E8m="initMult";var Z5M=E8m;Z5M+=x8m;var J5M=n9F;J5M+=Q3K;J5M+=L1U.q1F;J5M+=K9F;that[J5M](Z5M,[editFields,items,type],function(){setupDone();});});};Editor[Y2M][w4K]=function(trigger,args,promiseComplete){var j8m="result";var N8m="sult";var z8m='Cancelled';var q8m="andler";var k8m="triggerH";var I8m='pre';var v8m="Event";if(!args){args=[];}if($[p1u](trigger)){for(var i=z8F,ien=trigger[D2u];i<ien;i++){this[w4K](trigger[i],args);}}else{var T2M=X1F;T2M+=G6F;T2M+=f6F;T2M+=K9F;var g2M=k0u;g2M+=M0K;g2M+=R9u;var B2M=X4u;B2M+=c0m;B2M+=L1U.z1F;var e=$[v8m](trigger);$(this)[T8m](e,args);if(trigger[B2M](I8m)===z8F&&e[g2M]===y2u){var C2M=k8m;C2M+=q8m;$(this)[C2M]($[v8m](trigger+z8m),args);}if(promiseComplete){var x2M=w2u;x2M+=c3F;var E2M=k0u;E2M+=N8m;var m2M=k0u;m2M+=M0K;m2M+=R9u;if(e[m2M]&&typeof e[j8m]===L1U.M1F&&e[E2M][x2M]){var v2M=k0u;v2M+=N8m;e[v2M][F1K](promiseComplete);}else{promiseComplete();}}return e[T2M];}};Editor[E8u][t3K]=function(input){var M8m="ubstri";var r8m=/^on([A-Z])/;var z2M=A4F;z2M+=e4F;z2M+=E5u;var k2M=d9K;k2M+=L7K;var I2M=x6F;I2M+=Q6u;I2M+=E9F;I2M+=K9F;var name;var names=input[I2M](T7u);for(var i=z8F,ien=names[k2M];i<ien;i++){name=names[i];var onStyle=name[f8m](r8m);if(onStyle){var q2M=x6F;q2M+=M8m;q2M+=Q5u;name=onStyle[N8F][s8m]()+name[q2M](f8F);}names[i]=name;}return names[z2M](T7u);};Editor[E8u][N2M]=function(node){var j2M=h4K;j2M+=e9K;var foundField=A7u;$[j2M](this[x6F][V2K],function(name,field){var f2M=b1F;f2M+=u2u;if($(field[F2K]())[f2M](node)[D2u]){foundField=field;}});return foundField;};Editor[r2M][M2M]=function(fieldNames){var d2M=x1K;d2M+=F6F;if(fieldNames===undefined){var s2M=b1F;s2M+=w1F;s2M+=L0K;return this[s2M]();}else if(!$[d2M](fieldNames)){return[fieldNames];}return fieldNames;};Editor[b2M][d8m]=function(fieldsIn,focus){var a8m=/^jq:/;var W8m='div.DTE ';var l8m='jq:';var b8m="numb";var l2M=b8m;l2M+=F9F;var that=this;var field;var fields=$[z9K](fieldsIn,function(fieldOrName){var R8m="rin";var R2M=z0u;R2M+=R8m;R2M+=A3F;return typeof fieldOrName===R2M?that[x6F][V2K][fieldOrName]:fieldOrName;});if(typeof focus===l2M){field=fields[focus];}else if(focus){if(focus[B7m](l8m)===z8F){field=$(W8m+focus[G1u](a8m,p5u));}else{field=this[x6F][V2K][focus];}}this[x6F][K8m]=field;if(field){field[X7u]();}};Editor[W2M][a2M]=function(opts){var J8m='keyup';var S8m="_fieldFromNode";var u8m="onBackgro";var p8m="lur";var t8m="blurOnBackground";var i8m="submitOnReturn";var Q8m="rn";var n8m="tu";var U8m="Bl";var h8m="submitOnBlur";var G8m="closeOnComplete";var e8m="nCompl";var F8m="non";var L8m="dteInli";var H8m="OnComplete";var A8m="tOnReturn";var O8m="tOpts";var o8m="tCount";var y8m="messa";var D8m="oolean";var C0M=e4F;C0M+=L1U.q1F;var Z2M=a8K;Z2M+=w8m;var J2M=e4F;J2M+=L1U.q1F;var V2M=a9F;V2M+=D8m;var P2M=R7K;P2M+=i7u;P2M+=x6F;var u2M=y8m;u2M+=d5u;var Q2M=x6F;Q2M+=K9F;Q2M+=p7K;Q2M+=Q5u;var n2M=Z3K;n2M+=E9F;n2M+=o8m;var U2M=M3K;U2M+=O8m;var H2M=M0K;H2M+=s0K;H2M+=E9F;H2M+=A8m;var w2M=k4u;w2M+=H8m;var K2M=s2K;K2M+=L8m;K2M+=b6F;var that=this;var inlineCount=__inlineCounter++;var namespace=K2M+inlineCount;if(opts[w2M]!==undefined){var o2M=F8m;o2M+=w1F;var y2M=s4F;y2M+=e4F;y2M+=x6F;y2M+=w1F;var D2M=e4F;D2M+=e8m;D2M+=R5u;D2M+=w1F;opts[D2M]=opts[G8m]?y2M:o2M;}if(opts[h8m]!==undefined){var A2M=i9F;A2M+=G6K;A2M+=x6F;A2M+=w1F;var O2M=i7u;O2M+=U8m;O2M+=z0K;opts[O2M]=opts[h8m]?i9u:A2M;}if(opts[H2M]!==undefined){var e2M=L1U.q1F;e2M+=e4F;e2M+=L1U.q1F;e2M+=w1F;var F2M=E9u;F2M+=I7m;var L2M=i7u;L2M+=r4F;L2M+=n8m;L2M+=Q8m;opts[L2M]=opts[i8m]?F2M:e2M;}if(opts[t8m]!==undefined){var h2M=a9F;h2M+=p8m;var G2M=u8m;G2M+=C5K;opts[G2M]=opts[t8m]?h2M:W8u;}this[x6F][U2M]=opts;this[x6F][n2M]=inlineCount;if(typeof opts[d7K]===Q2M||typeof opts[d7K]===Y8u){var p2M=K9F;p2M+=k5u;p2M+=I3F;p2M+=w1F;var t2M=K9F;t2M+=R7m;var i2M=K9F;i2M+=k5u;i2M+=K6F;this[i2M](opts[t2M]);opts[p2M]=o2u;}if(typeof opts[w7u]===F1u||typeof opts[u2M]===Y8u){var c2M=n0K;c2M+=Q0K;c2M+=w1F;this[w7u](opts[w7u]);opts[c2M]=o2u;}if(typeof opts[P2M]!==V2M){var X2M=k8K;X2M+=K9F;X2M+=u9F;var S2M=a9F;S2M+=G1F;S2M+=H7K;S2M+=u9F;this[S2M](opts[C8K]);opts[X2M]=o2u;}$(document)[J2M](Z2M+namespace,function(e){var X8m="canReturnSubmit";var V8m="nctio";var P8m="veElem";var c8m="keyCod";var Y0M=c8m;Y0M+=w1F;if(e[Y0M]===W8F&&that[x6F][J1K]){var B0M=B6u;B0M+=h2u;B0M+=P8m;B0M+=Q5m;var el=$(document[B0M]);if(el){var g0M=L1U.z1F;g0M+=G1F;g0M+=V8m;g0M+=L1U.q1F;var field=that[S8m](el);if(field&&typeof field[X8m]===g0M&&field[X8m](el)){e[o8K]();}}}});$(document)[C0M](J8m+namespace,function(e){var R1m="next";var b1m='button';var d1m="prev";var s1m="eyCo";var M1m="onEsc";var r1m="ault";var f1m="Def";var N1m="onE";var z1m="nE";var q1m="ventDefault";var k1m="onRetur";var T1m="onReturn";var v1m="cti";var x1m="nSubm";var E1m="canRetu";var m1m="eturnSubmit";var C1m="canR";var B1m="keyCo";var Y1m="played";var Z8m="rm_B";var h8F=39;var G8F=37;var d0M=d9K;d0M+=L7K;var s0M=s2K;s0M+=w9F;s0M+=Z8m;s0M+=l7m;var E0M=L1U.j1F;E0M+=z9u;E0M+=Y1m;var m0M=B1m;m0M+=L1U.j1F;m0M+=w1F;var el=$(document[g1m]);if(e[m0M]===W8F&&that[x6F][E0M]){var v0M=C1m;v0M+=m1m;var x0M=E1m;x0M+=X1F;x0M+=x1m;x0M+=k5u;var field=that[S8m](el);if(field&&typeof field[x0M]===Y8u&&field[v0M](el)){var I0M=L1U.z1F;I0M+=C8u;I0M+=v1m;I0M+=i7u;if(opts[T1m]===i9u){var T0M=I1m;T0M+=E9F;T0M+=K9F;e[o8K]();that[T0M]();}else if(typeof opts[T1m]===I0M){var q0M=k1m;q0M+=L1U.q1F;var k0M=N7m;k0M+=q1m;e[k0M]();opts[q0M](that,e);}}}else if(e[l8K]===A8F){var M0M=e4F;M0M+=z1m;M0M+=x6F;M0M+=i9F;var f0M=s4F;f0M+=C6u;var j0M=q2u;j0M+=z0K;var N0M=N1m;N0M+=x6F;N0M+=i9F;var z0M=N7m;z0M+=j1m;z0M+=f1m;z0M+=r1m;e[z0M]();if(typeof opts[N0M]===Y8u){opts[M1m](that,e);}else if(opts[M1m]===j0M){that[r0K]();}else if(opts[M1m]===f0M){var r0M=i9F;r0M+=I3F;r0M+=C6u;that[r0M]();}else if(opts[M0M]===i9u){that[T8K]();}}else if(el[l8u](s0M)[d0M]){var R0M=a9u;R0M+=s1m;R0M+=q4F;if(e[l8K]===G8F){var b0M=s7K;b0M+=t6F;b0M+=x6F;el[d1m](b1m)[b0M]();}else if(e[R0M]===h8F){el[R1m](b1m)[X7u]();}}});this[x6F][r7m]=function(){var l1m="key";var W0M=l1m;W0M+=e8u;W0M+=y3F;W0M+=L1U.q1F;var l0M=e4F;l0M+=L1U.z1F;l0M+=L1U.z1F;$(document)[l0M](W0M+namespace);$(document)[v6u](J8m+namespace);};return namespace;};Editor[E8u][a0M]=function(direction,action,data){var W1m="sen";var K0M=W1m;K0M+=L1U.j1F;if(!this[x6F][L2m]||!data){return;}if(direction===K0M){var D0M=w1F;D0M+=d9u;var w0M=N0m;w0M+=J5K;w0M+=w1F;if(action===w0M||action===D0M){var o0M=L1U.j1F;o0M+=L1U.x1F;o0M+=K9F;o0M+=L1U.x1F;var y0M=D1F;y0M+=L1U.x1F;var id;$[w1u](data[y0M],function(rowId,values){var a1m='Editor: Multi-row editing is not supported by the legacy Ajax data format';if(id!==undefined){throw a1m;}id=rowId;});data[j5u]=data[o0M][id];if(action===g6K){var O0M=E9F;O0M+=L1U.j1F;data[O0M]=id;}}else{var H0M=L1U.j1F;H0M+=L1U.x1F;H0M+=K9F;H0M+=L1U.x1F;var A0M=W3F;A0M+=w6u;data[X9K]=$[z9K](data[A0M],function(values,id){return id;});delete data[H0M];}}else{var e0M=L1U.j1F;e0M+=J5K;e0M+=L1U.x1F;if(!data[j5u]&&data[O1K]){var F0M=X1F;F0M+=e4F;F0M+=y3F;var L0M=W3F;L0M+=K9F;L0M+=L1U.x1F;data[L0M]=[data[F0M]];}else if(!data[e0M]){data[j5u]=[];}}};Editor[E8u][K1m]=function(json){var that=this;if(json[w1m]){var G0M=l1F;G0M+=I3F;G0M+=L1U.j1F;G0M+=x6F;$[w1u](this[x6F][G0M],function(name,field){var D1m="update";if(json[w1m][name]!==undefined){var h0M=L1U.z1F;h0M+=E9F;h0M+=w1F;h0M+=W1F;var fieldInst=that[h0M](name);if(fieldInst&&fieldInst[D1m]){var U0M=y1m;U0M+=u9F;fieldInst[D1m](json[U0M][name]);}}});}};Editor[E8u][x9K]=function(el,msg){var H1m="deOu";var A1m="fa";var O1m="stop";var n0M=L1U.z1F;n0M+=L1U.q1F;var canAnimate=$[n0M][p5K]?o2u:y2u;if(typeof msg===Y8u){var Q0M=x3F;Q0M+=o1m;msg=msg(this,new DataTable[Q0M](this[x6F][k9u]));}el=$(el);if(canAnimate){el[O1m]();}if(!msg){var i0M=m1u;i0M+=E1u;i0M+=Z3K;if(this[x6F][i0M]&&canAnimate){var t0M=A1m;t0M+=H1m;t0M+=K9F;el[t0M](function(){el[q1u](p5u);});}else{var c0M=L1U.j1F;c0M+=L1m;var u0M=i9F;u0M+=x6F;u0M+=x6F;var p0M=J9F;p0M+=K9F;p0M+=u1F;p0M+=I3F;el[p0M](p5u)[u0M](c0M,W8u);}}else{if(this[x6F][J1K]&&canAnimate){var V0M=L1U.z1F;V0M+=L1U.x1F;V0M+=q4F;V0M+=w7K;var P0M=J9F;P0M+=j9u;P0M+=I3F;el[P0M](msg)[V0M]();}else{var Z0M=q2u;Z0M+=e4F;Z0M+=i9F;Z0M+=a9u;var J0M=u1u;J0M+=p0m;J0M+=F6F;var X0M=i9F;X0M+=x6F;X0M+=x6F;var S0M=F1m;S0M+=U4K;el[S0M](msg)[X0M](J0M,Z0M);}}};Editor[Y7M][L9u]=function(){var n1m="itab";var U1m="multiEd";var h1m="foSho";var G1m="multiIn";var B7M=L1U.z1F;B7M+=e1m;var fields=this[x6F][B7M];var include=this[x6F][e8K];var show=o2u;var state;if(!include){return;}for(var i=z8F,ien=include[D2u];i<ien;i++){var C7M=G1m;C7M+=h1m;C7M+=d3u;var g7M=U1m;g7M+=n1m;g7M+=I3F;g7M+=w1F;var field=fields[include[i]];var multiEditable=field[g7M]();if(field[C1u]()&&multiEditable&&show){state=o2u;show=y2u;}else if(field[C1u]()&&!multiEditable){state=o2u;}else{state=y2u;}fields[include[i]][C7M](state);}};Editor[E8u][m7M]=function(type){var V1m='submit.editor-internal';var P1m="ntroller";var c1m="splayCo";var u1m="reFocus";var p1m="captu";var t1m="nal";var i1m="submit.editor-inter";var Q1m="actio";var M7M=Q1m;M7M+=L1U.q1F;var r7M=k6F;r7M+=w1F;r7M+=L1U.q1F;var f7M=n9F;f7M+=w1F;f7M+=Y8K;f7M+=D3u;var T7M=i1m;T7M+=t1m;var v7M=L1U.z1F;v7M+=q5u;v7M+=u1F;var x7M=p1m;x7M+=u1m;var E7M=u1u;E7M+=c1m;E7M+=P1m;var that=this;var focusCapture=this[x6F][E7M][x7M];if(focusCapture===undefined){focusCapture=o2u;}$(this[h7u][v7M])[v6u](T7M)[i7u](V1m,function(e){e[o8K]();});if(focusCapture&&(type===S3K||type===C7K)){var I7M=a9F;I7M+=N7K;$(I7M)[i7u](M7m,function(){var m9m="setF";var C9m='.DTED';var g9m='.DTE';var Y9m="Ele";var Z1m="ive";var S1m="rent";var N7M=X3F;N7M+=L1U.x1F;N7M+=S1m;N7M+=x6F;var z7M=I3F;z7M+=K2u;z7M+=K9F;z7M+=J9F;var q7M=X1m;q7M+=S1m;q7M+=x6F;var k7M=J1m;k7M+=Z1m;k7M+=Y9m;k7M+=B9m;if($(document[k7M])[q7M](g9m)[z7M]===z8F&&$(document[g1m])[N7M](C9m)[D2u]===z8F){if(that[x6F][K8m]){var j7M=m9m;j7M+=E9m;that[x6F][j7M][X7u]();}}});}this[L9u]();this[f7M](r7M,[type,this[x6F][M7M]]);return o2u;};Editor[E8u][s7M]=function(type){var z9m="eIcb";var q9m='cancelOpen';var k9m="even";var I9m="inli";var T9m="cb";var v9m="oseI";var D7M=m1u;D7M+=E1u;D7M+=Z3K;var b7M=L1U.x1F;b7M+=x8K;b7M+=d1F;var d7M=M4K;d7M+=K9F;if(this[d7M](x9m,[type,this[x6F][b7M]])===y2u){var K7M=s4F;K7M+=v9m;K7M+=T9m;var a7M=R0K;a7M+=a9F;a7M+=I3F;a7M+=w1F;var W7M=I9m;W7M+=L1U.q1F;W7M+=w1F;var l7M=L1U.x1F;l7M+=L6K;var R7M=n9F;R7M+=k9m;R7M+=K9F;this[V3K]();this[R7M](q9m,[type,this[x6F][l7M]]);if((this[x6F][g5u]===W7M||this[x6F][g5u]===a7M)&&this[x6F][K7M]){var w7M=s4F;w7M+=V3F;w7M+=z9m;this[x6F][w7M]();}this[x6F][r7m]=A7u;return y2u;}this[x6F][D7M]=type;return o2u;};Editor[E8u][y4K]=function(processing){var j9m="active";var A7M=n9F;A7M+=w1F;A7M+=Y8K;A7M+=D3u;var O7M=q3F;O7M+=N9m;O7M+=A3F;var o7M=L1U.j1F;o7M+=e4F;o7M+=u1F;var y7M=L1U.j1F;y7M+=W4u;y7M+=Z1F;var procClass=this[y8u][o7u][j9m];$([y7M,this[o7M][O3u]])[H9u](procClass,processing);this[x6F][O7M]=processing;this[A7M](Y0m,[processing]);};Editor[E8u][o4K]=function(successCallback,errorCallback,formatdata,hide){var Y3m="_submitTable";var Z9m="_ajax";var J9m="essi";var X9m="_proc";var S9m="Compl";var c9m="Complete";var p9m='all';var y9m="anged";var D9m="allIfCh";var K9m="ctDataFn";var a9m="je";var W9m="nSetOb";var l9m="ier";var s9m="cyAjax";var M9m="_lega";var r9m="preSub";var f9m="Url";var I8M=L1U.x1F;I8M+=i6K;I8M+=f9m;var v8M=r9m;v8M+=I7m;var x8M=x6F;x8M+=w1F;x8M+=L1U.q1F;x8M+=L1U.j1F;var E8M=M9m;E8M+=s9m;var g8M=k0u;g8M+=u1F;g8M+=d9m;g8M+=w1F;var e7M=B6u;e7M+=K9F;e7M+=P6F;e7M+=L1U.q1F;var F7M=Y6F;F7M+=b9m;F7M+=K9F;F7M+=L1U.x1F;var L7M=R9m;L7M+=L1U.z1F;L7M+=l9m;var H7M=F0K;H7M+=W9m;H7M+=a9m;H7M+=K9m;var that=this;var i,iLen,eventRet,errorNodes;var changed=y2u,allData={},changedData={};var setBuilder=DataTable[m7u][E7u][H7M];var dataSource=this[x6F][W7m];var fields=this[x6F][V2K];var editCount=this[x6F][w9m];var modifier=this[x6F][L7M];var editFields=this[x6F][Y0K];var editData=this[x6F][F7M];var opts=this[x6F][f0K];var changedSubmit=opts[T8K];var submitParamsLocal;var action=this[x6F][e7M];var submitParams={"action":action,"data":{}};if(this[x6F][A2m]){submitParams[k9u]=this[x6F][A2m];}if(action===Z8K||action===Y6F){var P7M=D9m;P7M+=y9m;$[w1u](editFields,function(idSrc,edit){var A9m="mptyObject";var o9m="isEmp";var c7M=o9m;c7M+=K9F;c7M+=k3F;c7M+=K0m;var u7M=O9m;u7M+=A9m;var allRowData={};var changedRowData={};$[w1u](fields,function(name,field){var t9m="compare";var i9m='-many-count';var Q9m=/\[.*$/;var n9m='[]';var U9m="Data";var h9m="valFrom";var e9m="sArr";var F9m="ndexO";var L9m="repla";var H9m="submittable";if(edit[V2K][name]&&field[H9m]()){var t7M=w1F;t7M+=d9u;var Q7M=L9m;Q7M+=h4F;var n7M=E9F;n7M+=F9m;n7M+=L1U.z1F;var U7M=E9F;U7M+=e9m;U7M+=L1U.x1F;U7M+=k3F;var G7M=F2u;G7M+=G9m;G7M+=K9F;var multiGet=field[G7M]();var builder=setBuilder(name);if(multiGet[idSrc]===undefined){var h7M=h9m;h7M+=U9m;var originalVal=field[h7M](edit[j5u]);builder(allRowData,originalVal);return;}var value=multiGet[idSrc];var manyBuilder=$[U7M](value)&&name[n7M](n9m)!==-N8F?setBuilder(name[Q7M](Q9m,p5u)+i9m):A7u;builder(allRowData,value);if(manyBuilder){var i7M=I3F;i7M+=c3F;i7M+=v1K;i7M+=J9F;manyBuilder(allRowData,value[i7M]);}if(action===t7M&&(!editData[name]||!field[t9m](value,editData[name][idSrc]))){builder(changedRowData,value);changed=o2u;if(manyBuilder){var p7M=I3F;p7M+=w1F;p7M+=Q5u;p7M+=w2u;manyBuilder(changedRowData,value[p7M]);}}}});if(!$[u7M](allRowData)){allData[idSrc]=allRowData;}if(!$[c7M](changedRowData)){changedData[idSrc]=changedRowData;}});if(action===A3K||changedSubmit===p9m||changedSubmit===P7M&&changed){var V7M=L1U.j1F;V7M+=J5K;V7M+=L1U.x1F;submitParams[V7M]=allData;}else if(changedSubmit===u9m&&changed){submitParams[j5u]=changedData;}else{var B8M=I1m;B8M+=E9F;B8M+=K9F;B8M+=c9m;var Y8M=W4K;Y8M+=P9m;var J7M=j8K;J7M+=K9F;J7M+=P6F;J7M+=L1U.q1F;var S7M=s4F;S7M+=e4F;S7M+=p6F;this[x6F][A2K]=A7u;if(opts[V9m]===S7M&&(hide===undefined||hide)){var X7M=n9F;X7M+=i9F;X7M+=G6K;X7M+=p6F;this[X7M](y2u);}else if(typeof opts[V9m]===J7M){var Z7M=e4F;Z7M+=L1U.q1F;Z7M+=S9m;Z7M+=X0m;opts[Z7M](this);}if(successCallback){successCallback[v8u](this);}this[Y8M](y2u);this[w4K](B8M);return;}}else if(action===g8M){var C8M=w1F;C8M+=L1U.x1F;C8M+=e9K;$[C8M](editFields,function(idSrc,edit){var m8M=L1U.j1F;m8M+=J5K;m8M+=L1U.x1F;submitParams[m8M][idSrc]=edit[j5u];});}this[E8M](x8M,action,submitParams);submitParamsLocal=$[Z0u](o2u,{},submitParams);if(formatdata){formatdata(submitParams);}if(this[w4K](v8M,[submitParams,action])===y2u){var T8M=X9m;T8M+=J9m;T8M+=Q5u;this[T8M](y2u);return;}var submitWire=this[x6F][T0K]||this[x6F][I8M]?this[Z9m]:this[Y3m];submitWire[v8u](this,submitParams,function(json,notGood,xhr){var B3m="_submitSuccess";that[B3m](json,notGood,submitParams,submitParamsLocal,that[x6F][A2K],editCount,hide,successCallback,errorCallback,xhr);},function(xhr,err,thrown){var k8M=J1m;k8M+=d1F;that[g3m](xhr,err,thrown,errorCallback,submitParams,that[x6F][k8M]);},submitParams);};Editor[E8u][q8M]=function(data,success,error,submitParams){var z3m='individual';var q3m="ource";var I3m="urce";var T3m="_data";var v3m="modifi";var E3m="_fnSetObjectDataFn";var C3m="oA";var f8M=Z1u;f8M+=Y8K;var j8M=C3m;j8M+=o1m;var N8M=w1F;N8M+=P9u;N8M+=K9F;var z8M=E9F;z8M+=L1U.j1F;z8M+=m3m;z8M+=i9F;var that=this;var action=data[A2K];var out={data:[]};var idGet=DataTable[m7u][E7u][x7u](this[x6F][z8M]);var idSet=DataTable[N8M][j8M][E3m](this[x6F][x3m]);if(action!==f8M){var b8M=w1F;b8M+=B6u;b8M+=J9F;var d8M=v3m;d8M+=F9F;var s8M=T3m;s8M+=C3F;s8M+=e4F;s8M+=I3m;var M8M=R9m;M8M+=k3m;var r8M=n9F;r8M+=D1F;r8M+=R2m;r8M+=q3m;var originalData=this[x6F][g5u]===S3K?this[r8M](f4K,this[M8M]()):this[s8M](z3m,this[d8M]());$[b8M](data[j5u],function(key,vals){var f3m="_fnExtend";var j3m="leExt";var K8M=X3F;K8M+=A0K;K8M+=J9F;var a8M=i9F;a8M+=g1u;a8M+=R3F;var W8M=e4F;W8M+=x3F;W8M+=X3F;W8M+=E9F;var l8M=L1U.j1F;l8M+=N3m;l8M+=b9F;l8M+=j3m;var R8M=L1U.z1F;R8M+=L1U.q1F;var toSave;var extender=$[R8M][l8M][W8M][f3m];if(action===g6K){var rowData=originalData[key][j5u];toSave=extender({},rowData,o2u);toSave=extender(toSave,vals,o2u);}else{toSave=extender({},vals,o2u);}var overrideId=idGet(toSave);if(action===a8M&&overrideId===undefined){idSet(toSave,+new Date()+p5u+key);}else{idSet(toSave,overrideId);}out[j5u][K8M](toSave);});}success(out);};Editor[w8M][D8M]=function(json,notGood,submitParams,submitParamsLocal,action,editCount,hide,successCallback,errorCallback,xhr){var E4m='submitSuccess';var m4m="lete";var g4m="onCo";var B4m="onComp";var Y4m='preRemove';var Z3m="_dataSourc";var J3m="ove";var X3m="tRem";var S3m='postEdit';var V3m='preEdit';var P3m="_eve";var c3m='postCreate';var u3m="preCrea";var p3m='id';var t3m="setDat";var i3m='prep';var Q3m="ataSource";var n3m="aSource";var U3m="_dat";var h3m="mm";var G3m='submitUnsuccessful';var l3m="fieldErro";var b3m='receive';var d3m="_legacyAjax";var s3m="dEr";var M3m="mplete";var r3m="mitCo";var a1M=M0K;a1M+=a9F;a1M+=r3m;a1M+=M3m;var O8M=I3F;O8M+=c3F;O8M+=L7K;var o8M=w6F;o8M+=s3m;o8M+=N5m;var y8M=L1U.z1F;y8M+=e1m;var that=this;var setData;var fields=this[x6F][y8M];var opts=this[x6F][f0K];var modifier=this[x6F][L2K];this[d3m](b3m,action,json);this[w4K](R3m,[json,submitParams,action,xhr]);if(!json[p8u]){json[p8u]=L1U.f1F;}if(!json[o8M]){json[f5m]=[];}if(notGood||json[p8u]||json[f5m][O8M]){var X8M=t8K;X8M+=g6F;X8M+=c3F;X8M+=K9F;var S8M=v0u;S8M+=a9F;S8M+=X1F;S8M+=g0u;var V8M=w1F;V8M+=d5m;V8M+=e4F;V8M+=X1F;var H8M=l3m;H8M+=W3m;var A8M=w1F;A8M+=L1U.x1F;A8M+=i9F;A8M+=J9F;var globalError=[];if(json[p8u]){globalError[K1u](json[p8u]);}$[A8M](json[H8M],function(i,err){var e3m=': ';var F3m="onFieldError";var L3m="position";var A3m='focus';var O3m="onFieldE";var o3m="atus";var y3m="Err";var D3m="field: ";var w3m="n ";var K3m="Unknow";var a3m="ispla";var e8M=L1U.j1F;e8M+=a3m;e8M+=t1K;var field=fields[err[p2K]];if(!field){var F8M=L1U.q1F;F8M+=L1U.x1F;F8M+=u1F;F8M+=w1F;var L8M=K3m;L8M+=w3m;L8M+=D3m;throw new Error(L8M+err[F8M]);}else if(field[e8M]()){var h8M=y3m;h8M+=q5u;var G8M=x6F;G8M+=K9F;G8M+=o3m;field[p8u](err[G8M]||h8M);if(i===z8F){var U8M=O3m;U8M+=i2u;if(opts[U8M]===A3m){var p8M=L1U.z1F;p8M+=E9m;var t8M=F7u;t8M+=q4F;var i8M=z5K;i8M+=H3m;var Q8M=L1U.j1F;Q8M+=e4F;Q8M+=u1F;var n8M=n9F;n8M+=S5K;n8M+=E9F;n8M+=o4F;that[n8M]($(that[Q8M][i8M],that[x6F][O3u]),{scrollTop:$(field[t8M]())[L3m]()[S3F]},u8F);field[p8M]();}else if(typeof opts[F3m]===Y8u){opts[F3m](that,err);}}}else{var P8M=o9F;P8M+=X1F;P8M+=W6F;var c8M=x6F;c8M+=K9F;c8M+=o3m;var u8M=L1U.q1F;u8M+=L1U.x1F;u8M+=o1F;globalError[K1u](field[u8M]()+e3m+(err[c8M]||P8M));}});this[V8M](globalError[f0m](S8M));this[X8M](G3m,[json]);if(errorCallback){errorCallback[v8u](that,json);}}else{var W1M=t8K;W1M+=j1m;var v1M=Z1u;v1M+=Y8K;var J8M=L1U.j1F;J8M+=u0u;var store={};if(json[J8M]&&(action===Z8K||action===Y6F)){var x1M=f8u;x1M+=h3m;x1M+=E9F;x1M+=K9F;var E1M=U3m;E1M+=n3m;var Y1M=L1U.j1F;Y1M+=L1U.x1F;Y1M+=K9F;Y1M+=L1U.x1F;var Z8M=K3u;Z8M+=Q3m;this[Z8M](i3m,action,modifier,submitParamsLocal,json,store);for(var i=z8F;i<json[Y1M][D2u];i++){var B1M=t3m;B1M+=L1U.x1F;setData=json[j5u][i];var id=this[J2K](p3m,setData);this[w4K](B1M,[json,setData,action]);if(action===Z8K){var C1M=N0m;C1M+=L1U.x1F;C1M+=R3F;var g1M=u3m;g1M+=R3F;this[w4K](g1M,[json,setData,id]);this[J2K](A3K,fields,setData,store);this[w4K]([C1M,c3m],[json,setData,id]);}else if(action===Y6F){var m1M=P3m;m1M+=L1U.q1F;m1M+=K9F;this[m1M](V3m,[json,setData,id]);this[J2K](g6K,modifier,fields,setData,store);this[w4K]([g6K,S3m],[json,setData,id]);}}this[E1M](x1M,action,modifier,json[j5u],store);}else if(action===v1M){var M1M=W3F;M1M+=w6u;var r1M=i9F;r1M+=P1u;r1M+=I7m;var f1M=E9F;f1M+=L1U.j1F;f1M+=x6F;var j1M=X3F;j1M+=V3F;j1M+=X3m;j1M+=J3m;var N1M=E6K;N1M+=w1F;var z1M=k0u;z1M+=u1F;z1M+=e4F;z1M+=Y8K;var q1M=Z3m;q1M+=w1F;var k1M=X9K;k1M+=x6F;var I1M=v7m;I1M+=c3F;I1M+=K9F;var T1M=X3F;T1M+=X1F;T1M+=w1F;T1M+=X3F;this[J2K](T1M,action,modifier,submitParamsLocal,json,store);this[I1M](Y4m,[json,this[k1M]()]);this[q1M](z1M,modifier,fields,store);this[w4K]([N1M,j1M],[json,this[f1M]()]);this[J2K](r1M,action,modifier,json[M1M],store);}if(editCount===this[x6F][w9m]){var l1M=B4m;l1M+=I3F;l1M+=R5u;l1M+=w1F;var d1M=s4F;d1M+=e4F;d1M+=p6F;var s1M=g4m;s1M+=C4m;s1M+=m4m;var action=this[x6F][A2K];this[x6F][A2K]=A7u;if(opts[s1M]===d1M&&(hide===undefined||hide)){var R1M=L1U.j1F;R1M+=L1U.x1F;R1M+=K9F;R1M+=L1U.x1F;var b1M=o7K;b1M+=p6F;this[b1M](json[R1M]?o2u:y2u,action);}else if(typeof opts[l1M]===Y8u){opts[V9m](this);}}if(successCallback){successCallback[v8u](that,json);}this[W1M](E4m,[json,setData,action]);}this[y4K](y2u);this[w4K](a1M,[json,setData,action]);};Editor[K1M][g3m]=function(xhr,err,thrown,errorCallback,submitParams,action){var v4m="system";var x4m="bmitError";var O1M=M0K;O1M+=x4m;var y1M=W4K;y1M+=P9m;var D1M=E9F;D1M+=L1U.B1F;D1M+=v8K;var w1M=w1F;w1M+=d5m;w1M+=e4F;w1M+=X1F;this[w4K](R3m,[A7u,submitParams,action,xhr]);this[w1M](this[D1M][p8u][v4m]);this[y1M](y2u);if(errorCallback){var o1M=x4K;o1M+=I3F;o1M+=I3F;errorCallback[o1M](this,xhr,err,thrown);}this[w4K]([O1M,T4m],[xhr,err,thrown,submitParams]);};Editor[E8u][V8K]=function(fn){var q4m="aw";var I4m="oFeatur";var n1M=v0m;n1M+=Q6u;n1M+=L1U.x1F;n1M+=k3F;var U1M=E9F;U1M+=L9K;U1M+=E9F;U1M+=b6F;var h1M=u1u;h1M+=x6F;h1M+=E6F;h1M+=k3F;var H1M=K9F;H1M+=b9F;H1M+=I3F;H1M+=w1F;var A1M=x3F;A1M+=o1m;var that=this;var dt=this[x6F][k9u]?new $[c5u][p2m][A1M](this[x6F][H1M]):A7u;var ssp=y2u;if(dt){var L1M=I4m;L1M+=G6F;ssp=dt[O2m]()[z8F][L1M][k4m];}if(this[x6F][o7u]){var F1M=e4F;F1M+=b6F;this[F1M](T4m,function(){if(ssp){var G1M=G4K;G1M+=q4m;var e1M=i7u;e1M+=w1F;dt[e1M](G1M,fn);}else{setTimeout(function(){fn();},b8F);}});return o2u;}else if(this[h1M]()===U1M||this[n1M]()===C7K){var i1M=i9F;i1M+=I3F;i1M+=e4F;i1M+=p6F;var Q1M=e4F;Q1M+=L1U.q1F;Q1M+=w1F;this[Q1M](i1M,function(){if(!that[x6F][o7u]){setTimeout(function(){if(that[x6F]){fn();}},b8F);}else{that[T1u](T4m,function(e,json){if(ssp&&json){var t1M=G4K;t1M+=q4m;dt[T1u](t1M,fn);}else{setTimeout(function(){if(that[x6F]){fn();}},b8F);}});}})[r0K]();return o2u;}return y2u;};Editor[E8u][p1M]=function(name,arr){var u1M=d9K;u1M+=A3F;u1M+=K9F;u1M+=J9F;for(var i=z8F,ien=arr[u1M];i<ien;i++){if(name==arr[i]){return i;}}return-N8F;};Editor[Y7u]={"table":A7u,"ajaxUrl":A7u,"fields":[],"display":c1M,"ajax":A7u,"idSrc":P1M,"events":{},"i18n":{"create":{"button":V1M,"title":z4m,"submit":N4m},"edit":{"button":a3F,"title":S1M,"submit":X1M},"remove":{"button":J1M,"title":j4m,"submit":Z1M,"confirm":{"_":f4m,"1":r4m}},"error":{"system":Y9M},multi:{title:M4m,info:s4m,restore:d4m,noMulti:b4m},datetime:{previous:R4m,next:l4m,months:[B9M,g9M,W4m,C9M,a4m,K4m,m9M,E9M,x9M,v9M,w4m,D4m],weekdays:[T9M,y4m,I9M,k9M,q9M,o4m,O4m],amPm:[z9M,A4m],hours:N9M,minutes:j9M,seconds:f9M,unknown:T4K}},formOptions:{bubble:$[Z0u]({},Editor[U9u][r9M],{title:y2u,message:y2u,buttons:M9M,submit:u9m}),inline:$[Z0u]({},Editor[U9u][y0K],{buttons:y2u,submit:u9m}),main:$[Z0u]({},Editor[U9u][y0K])},legacyAjax:y2u};(function(){var f5q="[data-edit";var Y5q='keyless';var L6m="rowIds";var k6m="cells";var G4m="drawType";var F4m="oF";var H4m="ataSou";var R4M=J9F;R4M+=K9F;R4M+=u1F;R4M+=I3F;var Z9M=L1U.j1F;Z9M+=N3m;Z9M+=o2K;var s9M=L1U.j1F;s9M+=H4m;s9M+=l2m;var __dataSources=Editor[s9M]={};var __dtIsSsp=function(dt,editor){var e4m="atur";var L4m="ditOp";var b9M=w1F;b9M+=L4m;b9M+=w9u;var d9M=F4m;d9M+=w1F;d9M+=e4m;d9M+=G6F;return dt[O2m]()[z8F][d9M][k4m]&&editor[x6F][b9M][G4m]!==W8u;};var __dtApi=function(table){var h4m="DataTabl";var R9M=h4m;R9M+=w1F;return $(table)[R9M]();};var __dtHighlight=function(node){node=$(node);setTimeout(function(){var U4m="highlig";var l9M=U4m;l9M+=F1m;node[t8u](l9M);setTimeout(function(){var Q4m='highlight';var n4m='noHighlight';var c8F=550;var W9M=a6u;W9M+=B8K;W9M+=j8u;node[t8u](n4m)[W9M](Q4m);setTimeout(function(){node[u8u](n4m);},c8F);},u8F);},w8F);};var __dtRowSelector=function(out,dt,identifier,fields,idFn){var a9M=w1F;a9M+=L1U.x1F;a9M+=i9F;a9M+=J9F;dt[c4F](identifier)[i4m]()[a9M](function(idx){var p4m="ow identi";var t4m="Unable to find ";var a8F=14;var y9M=X1F;y9M+=i6F;var K9M=X1F;K9M+=i6F;var row=dt[K9M](idx);var data=row[j5u]();var idSrc=idFn(data);if(idSrc===undefined){var D9M=t4m;D9M+=X1F;D9M+=p4m;D9M+=k3m;var w9M=F9F;w9M+=X1F;w9M+=e4F;w9M+=X1F;Editor[w9M](D9M,a8F);}out[idSrc]={idSrc:idSrc,data:data,node:row[F2K](),fields:fields,type:y9M};});};var __dtFieldsFromIdx=function(dt,fields,idx){var B6m="he field name.";var Y6m=" t";var Z4m="rmine field from source. Please specify";var J4m="Unable to automatically dete";var P4m="aoColumns";var c4m="ttings";var u4m="isEmptyObje";var e9M=u4m;e9M+=x8K;var O9M=u1F;O9M+=s9F;O9M+=L1U.x1F;O9M+=w6u;var o9M=p6F;o9M+=c4m;var field;var col=dt[o9M]()[z8F][P4m][idx];var dataSrc=col[y1K]!==undefined?col[y1K]:col[O9M];var resolvedFields={};var run=function(field,dataSrc){var V4m="ame";var A9M=L1U.q1F;A9M+=L1U.x1F;A9M+=o1F;if(field[A9M]()===dataSrc){var H9M=L1U.q1F;H9M+=V4m;resolvedFields[field[H9M]()]=field;}};$[w1u](fields,function(name,fieldInst){var S4m="sAr";var L9M=E9F;L9M+=S4m;L9M+=X4m;L9M+=k3F;if($[L9M](dataSrc)){var F9M=I3F;F9M+=w1F;F9M+=L1U.q1F;F9M+=L7K;for(var i=z8F;i<dataSrc[F9M];i++){run(fieldInst,dataSrc[i]);}}else{run(fieldInst,dataSrc);}});if($[e9M](resolvedFields)){var G9M=J4m;G9M+=Z4m;G9M+=Y6m;G9M+=B6m;Editor[p8u](G9M,R8F);}return resolvedFields;};var __dtCellSelector=function(out,dt,identifier,allFields,idFn,forceFields){var U9M=E5u;U9M+=g6m;U9M+=G6F;var h9M=h4F;h9M+=I3F;h9M+=I3F;h9M+=x6F;dt[h9M](identifier)[U9M]()[w1u](function(idx){var T6m="cell";var v6m="umn";var x6m="ttach";var E6m="ach";var C6m="playFi";var X9M=v0m;X9M+=C6m;X9M+=q9K;var S9M=n6u;S9M+=L1U.q1F;S9M+=L1U.j1F;var V9M=L1U.q1F;V9M+=e4F;V9M+=q4F;var P9M=d5u;P9M+=K9F;var c9M=m6m;c9M+=E6m;var u9M=L1U.x1F;u9M+=x6m;var p9M=X1F;p9M+=e4F;p9M+=y3F;var i9M=f8u;i9M+=I3F;i9M+=v6m;var Q9M=L1U.j1F;Q9M+=L1U.x1F;Q9M+=K9F;Q9M+=L1U.x1F;var n9M=X1F;n9M+=e4F;n9M+=y3F;var cell=dt[T6m](idx);var row=dt[O1K](idx[n9M]);var data=row[Q9M]();var idSrc=idFn(data);var fields=forceFields||__dtFieldsFromIdx(dt,allFields,idx[i9M]);var isNode=typeof identifier===L1U.M1F&&identifier[I6m]||identifier instanceof $;var prevDisplayFields,prevAttach;if(out[idSrc]){var t9M=m6m;t9M+=E6m;prevAttach=out[idSrc][t9M];prevDisplayFields=out[idSrc][Q9K];}__dtRowSelector(out,dt,idx[p9M],allFields,idFn);out[idSrc][u9M]=prevAttach||[];out[idSrc][c9M][K1u](isNode?$(identifier)[P9M](z8F):cell[V9M]());out[idSrc][Q9K]=prevDisplayFields||{};$[S9M](out[idSrc][X9M],fields);});};var __dtColumnSelector=function(out,dt,identifier,fields,idFn){var J9M=X4u;J9M+=p2u;J9M+=G6F;dt[k6m](A7u,identifier)[J9M]()[w1u](function(idx){__dtCellSelector(out,dt,idx,fields,idFn);});};var __dtjqId=function(id){var q6m='\\$1';return typeof id===F1u?s9K+id[G1u](/(:|\.|\[|\]|,)/g,q6m):s9K+id;};__dataSources[Z9M]={id:function(data){var f6m="oAp";var j6m="ataFn";var N6m="etObjectD";var z6m="nG";var g3M=F0K;g3M+=z6m;g3M+=N6m;g3M+=j6m;var B3M=f6m;B3M+=E9F;var Y3M=w1F;Y3M+=P9u;Y3M+=K9F;var idFn=DataTable[Y3M][B3M][g3M](this[x6F][x3m]);return idFn(data);},individual:function(identifier,fieldNames){var r6m="rc";var m3M=E9F;m3M+=L1U.j1F;m3M+=C3F;m3M+=r6m;var C3M=w1F;C3M+=P9u;C3M+=K9F;var idFn=DataTable[C3M][E7u][x7u](this[x6F][m3M]);var dt=__dtApi(this[x6F][k9u]);var fields=this[x6F][V2K];var out={};var forceFields;var responsiveNode;if(fieldNames){var x3M=h4K;x3M+=e9K;var E3M=M6m;E3M+=X4m;E3M+=k3F;if(!$[E3M](fieldNames)){fieldNames=[fieldNames];}forceFields={};$[x3M](fieldNames,function(i,name){forceFields[name]=fields[name];});}__dtCellSelector(out,dt,identifier,fields,idFn,forceFields);return out;},fields:function(identifier){var a6m="olu";var W6m="olumns";var l6m="lls";var R6m="columns";var b6m="ectDataFn";var d6m="fnGetOb";var s6m="dSrc";var I3M=E9F;I3M+=s6m;var T3M=n9F;T3M+=d6m;T3M+=A4F;T3M+=b6m;var v3M=w1F;v3M+=O0m;var idFn=DataTable[v3M][E7u][T3M](this[x6F][I3M]);var dt=__dtApi(this[x6F][k9u]);var fields=this[x6F][V2K];var out={};if($[w0K](identifier)&&(identifier[c4F]!==undefined||identifier[R6m]!==undefined||identifier[k6m]!==undefined)){var N3M=i9F;N3M+=w1F;N3M+=l6m;var q3M=i9F;q3M+=W6m;if(identifier[c4F]!==undefined){var k3M=t4F;k3M+=y3F;k3M+=x6F;__dtRowSelector(out,dt,identifier[k3M],fields,idFn);}if(identifier[q3M]!==undefined){var z3M=i9F;z3M+=a6m;z3M+=K6m;__dtColumnSelector(out,dt,identifier[z3M],fields,idFn);}if(identifier[N3M]!==undefined){__dtCellSelector(out,dt,identifier[k6m],fields,idFn);}}else{__dtRowSelector(out,dt,identifier,fields,idFn);}return out;},create:function(fields,data){var j3M=w6u;j3M+=a9F;j3M+=I3F;j3M+=w1F;var dt=__dtApi(this[x6F][j3M]);if(!__dtIsSsp(dt,this)){var f3M=X1F;f3M+=e4F;f3M+=y3F;var row=dt[f3M][Q2K](data);__dtHighlight(row[F2K]());}},edit:function(identifier,fields,data,store){var H6m="dataTableExt";var A6m="_fnE";var o6m="splic";var D6m="tab";var w6m="tOpt";var s3M=L1U.q1F;s3M+=e4F;s3M+=b6F;var M3M=w1F;M3M+=u1u;M3M+=w6m;M3M+=x6F;var r3M=D6m;r3M+=I3F;r3M+=w1F;var that=this;var dt=__dtApi(this[x6F][r3M]);if(!__dtIsSsp(dt,this)||this[x6F][M3M][G4m]===s3M){var W3M=L1U.x1F;W3M+=L1U.q1F;W3M+=k3F;var b3M=L1U.x1F;b3M+=L1U.q1F;b3M+=k3F;var d3M=x4K;d3M+=U4F;var rowId=__dataSources[p2m][X9K][d3M](this,data);var row;try{row=dt[O1K](__dtjqId(rowId));}catch(e){row=dt;}if(!row[b3M]()){var R3M=X1F;R3M+=e4F;R3M+=y3F;row=dt[R3M](function(rowIdx,rowData,rowNode){var y6m="ataTable";var l3M=L1U.j1F;l3M+=y6m;return rowId==__dataSources[l3M][X9K][v8u](that,rowData);});}if(row[W3M]()){var O3M=o6m;O3M+=w1F;var o3M=t4F;o3M+=y3F;o3M+=O6m;o3M+=x6F;var y3M=E5u;y3M+=L7m;var D3M=L1U.j1F;D3M+=L1U.x1F;D3M+=w6u;var w3M=A6m;w3M+=O0m;w3M+=c3F;w3M+=L1U.j1F;var K3M=e4F;K3M+=x3F;K3M+=X3F;K3M+=E9F;var a3M=L1U.z1F;a3M+=L1U.q1F;var extender=$[a3M][H6m][K3M][w3M];var toSave=extender({},row[j5u](),o2u);toSave=extender(toSave,data,o2u);row[D3M](toSave);var idx=$[y3M](rowId,store[o3M]);store[L6m][O3M](idx,N8F);}else{var H3M=L1U.x1F;H3M+=L1U.j1F;H3M+=L1U.j1F;var A3M=t4F;A3M+=y3F;row=dt[A3M][H3M](data);}__dtHighlight(row[F2K]());}},remove:function(identifier,fields,store){var h6m="every";var G6m="ows";var e6m="ws";var F6m="cancelle";var F3M=A7K;F3M+=w2u;var L3M=F6m;L3M+=L1U.j1F;var that=this;var dt=__dtApi(this[x6F][k9u]);var cancelled=store[L3M];if(cancelled[F3M]===z8F){var G3M=k0u;G3M+=m6K;G3M+=w1F;var e3M=O1K;e3M+=x6F;dt[e3M](identifier)[G3M]();}else{var p3M=X1F;p3M+=s0m;p3M+=Y8K;var t3M=t4F;t3M+=e6m;var h3M=X1F;h3M+=G6m;var indexes=[];dt[h3M](identifier)[h6m](function(){var U6m="rra";var n3M=O8K;n3M+=U6m;n3M+=k3F;var U3M=j5u;U3M+=U9F;U3M+=n6m;U3M+=w1F;var id=__dataSources[U3M][X9K][v8u](that,this[j5u]());if($[n3M](id,cancelled)===-N8F){var i3M=E9F;i3M+=L1U.q1F;i3M+=g6m;var Q3M=X3F;Q3M+=G1F;Q3M+=x6F;Q3M+=J9F;indexes[Q3M](this[i3M]());}});dt[t3M](indexes)[p3M]();}},prep:function(action,identifier,submit,json,store){var c6m="cancelled";var u6m="celle";var p6m="can";var i6m="lled";var Q6m="anc";var u3M=w1F;u3M+=L1U.j1F;u3M+=E9F;u3M+=K9F;if(action===u3M){var c3M=i9F;c3M+=Q6m;c3M+=w1F;c3M+=i6m;var cancelled=json[c3M]||[];store[L6m]=$[z9K](submit[j5u],function(val,key){var t6m="mptyO";var P3M=O9m;P3M+=t6m;P3M+=a9F;P3M+=Q4K;return!$[P3M](submit[j5u][key])&&$[a1u](key,cancelled)===-N8F?key:undefined;});}else if(action===S4K){var V3M=p6m;V3M+=u6m;V3M+=L1U.j1F;store[V3M]=json[c6m]||[];}},commit:function(action,identifier,data,store){var J6m="any";var X6m="eatu";var S6m="ServerSide";var P6m="Ids";var C4M=F7u;C4M+=L1U.q1F;C4M+=w1F;var J3M=X1F;J3M+=i6F;J3M+=P6m;var X3M=w1F;X3M+=L1U.j1F;X3M+=E9F;X3M+=K9F;var S3M=K9F;S3M+=b9F;S3M+=I3F;S3M+=w1F;var that=this;var dt=__dtApi(this[x6F][S3M]);if(!__dtIsSsp(dt,this)&&action===X3M&&store[J3M][D2u]){var ids=store[L6m];var row;var compare=function(id){return function(rowIdx,rowData,rowNode){var V6m="taTab";var Y4M=E9F;Y4M+=L1U.j1F;var Z3M=L1U.j1F;Z3M+=L1U.x1F;Z3M+=V6m;Z3M+=K6F;return id==__dataSources[Z3M][Y4M][v8u](that,rowData);};};for(var i=z8F,ien=ids[D2u];i<ien;i++){var g4M=a9F;g4M+=S6m;var B4M=F4m;B4M+=X6m;B4M+=X1F;B4M+=G6F;try{row=dt[O1K](__dtjqId(ids[i]));}catch(e){row=dt;}if(!row[J6m]()){row=dt[O1K](compare(ids[i]));}if(row[J6m]()&&!dt[O2m]()[z8F][B4M][g4M]){row[a6u]();}}}var drawType=this[x6F][f0K][G4m];if(drawType!==C4M){var m4M=Z6m;m4M+=y3F;dt[m4M](drawType);}}};function __html_id(identifier){var E5q='Could not find an element with `data-editor-id` or `id` of: ';var m5q="tring";var C5q="r-id=\"";var g5q="[data-";var B5q="engt";var context=document;if(identifier!==Y5q){var v4M=I3F;v4M+=B5q;v4M+=J9F;var x4M=B2u;x4M+=g2u;var E4M=g5q;E4M+=M3K;E4M+=z6F;E4M+=C5q;context=$(E4M+identifier+x4M);if(context[v4M]===z8F){var T4M=x6F;T4M+=m5q;context=typeof identifier===T4M?$(__dtjqId(identifier)):$(identifier);}if(context[D2u]===z8F){throw E5q+identifier;}}return context;}function __html_el(identifier,name){var T5q="d=\"";var v5q="tor-fi";var x5q="[data-edi";var k4M=B2u;k4M+=g2u;var I4M=x5q;I4M+=v5q;I4M+=R9F;I4M+=T5q;var context=__html_id(identifier);return $(I4M+name+k4M,context);}function __html_els(identifier,names){var out=$();for(var i=z8F,ien=names[D2u];i<ien;i++){var q4M=L1U.x1F;q4M+=L1U.j1F;q4M+=L1U.j1F;out=out[q4M](__html_el(identifier,names[i]));}return out;}function __html_get(identifier,dataSrc){var z5q="data-editor-value]";var q5q="[";var k5q="itor-val";var I5q="data-e";var j4M=I5q;j4M+=L1U.j1F;j4M+=k5q;j4M+=b6K;var N4M=K6F;N4M+=P6K;var z4M=q5q;z4M+=z5q;var el=__html_el(identifier,dataSrc);return el[N5q](z4M)[N4M]?el[d8K](j4M):el[q1u]();}function __html_set(identifier,fields,data){var f4M=w1F;f4M+=L1U.x1F;f4M+=i9F;f4M+=J9F;$[f4M](fields,function(name,field){var W5q="tml";var l5q='data-editor-value';var b5q="dataSrc";var s5q="e]";var M5q="lu";var r5q="or-va";var j5q="valFromData";var val=field[j5q](data);if(val!==undefined){var M4M=f5q;M4M+=r5q;M4M+=M5q;M4M+=s5q;var r4M=T2u;r4M+=d5q;var el=__html_el(identifier,field[b5q]());if(el[r4M](M4M)[D2u]){var s4M=L1U.x1F;s4M+=R5q;el[s4M](l5q,val);}else{var b4M=J9F;b4M+=W5q;el[w1u](function(){var w5q="firstChild";var K5q="removeChild";var a5q="childNodes";var d4M=d9K;d4M+=L7K;while(this[a5q][d4M]){this[K5q](this[w5q]);}})[b4M](val);}}});}__dataSources[R4M]={id:function(data){var D5q="Ap";var W4M=E9F;W4M+=L1U.j1F;W4M+=m3m;W4M+=i9F;var l4M=e4F;l4M+=D5q;l4M+=E9F;var idFn=DataTable[m7u][l4M][x7u](this[x6F][W4M]);return idFn(data);},initField:function(cfg){var y5q='[data-editor-label="';var label=$(y5q+(cfg[j5u]||cfg[p2K])+o5q);if(!cfg[j7u]&&label[D2u]){var a4M=I3F;a4M+=O5q;a4M+=I3F;cfg[a4M]=label[q1u]();}},individual:function(identifier,fieldNames){var t5q="d name from data source";var i5q="Cannot automatically determine fiel";var Q5q="less";var n5q='editor-id';var U5q='andSelf';var h5q='data-editor-field';var G5q="ddBa";var e5q="Back";var F5q="rents";var L5q="or-id";var H5q="eName";var A5q="nod";var e4M=b1F;e4M+=M9K;e4M+=x6F;var F4M=l1F;F4M+=W1F;F4M+=x6F;var L4M=f8K;L4M+=I3F;var K4M=A5q;K4M+=H5q;var attachEl;if(identifier instanceof $||identifier[K4M]){var O4M=f5q;O4M+=L5q;O4M+=g2u;var o4M=X3F;o4M+=L1U.x1F;o4M+=F5q;var y4M=q5m;y4M+=L1U.j1F;y4M+=e5q;var D4M=L1U.x1F;D4M+=G5q;D4M+=G3u;attachEl=identifier;if(!fieldNames){var w4M=L1U.x1F;w4M+=K9F;w4M+=K9F;w4M+=X1F;fieldNames=[$(identifier)[w4M](h5q)];}var back=$[c5u][D4M]?y4M:U5q;identifier=$(identifier)[o4M](O4M)[back]()[j5u](n5q);}if(!identifier){var A4M=a8K;A4M+=k3F;A4M+=Q5q;identifier=A4M;}if(fieldNames&&!$[p1u](fieldNames)){fieldNames=[fieldNames];}if(!fieldNames||fieldNames[D2u]===z8F){var H4M=i5q;H4M+=t5q;throw H4M;}var out=__dataSources[L4M][F4M][v8u](this,identifier);var fields=this[x6F][e4M];var forceFields={};$[w1u](fieldNames,function(i,name){forceFields[name]=fields[name];});$[w1u](out,function(id,set){var u5q='cell';var p5q="playFields";var h4M=v0m;h4M+=p5q;var G4M=J5K;G4M+=w6u;G4M+=e9K;set[Z7u]=u5q;set[G4M]=attachEl?$(attachEl):__html_els(identifier,fieldNames)[c5q]();set[V2K]=fields;set[h4M]=forceFields;});return out;},fields:function(identifier){var P5q="keyle";var U4M=M6m;U4M+=F3F;var out={};var self=__dataSources[q1u];if($[U4M](identifier)){for(var i=z8F,ien=identifier[D2u];i<ien;i++){var n4M=i9F;n4M+=L1U.x1F;n4M+=I3F;n4M+=I3F;var res=self[V2K][n4M](this,identifier[i]);out[identifier[i]]=res[identifier[i]];}return out;}var data={};var fields=this[x6F][V2K];if(!identifier){var Q4M=P5q;Q4M+=x6F;Q4M+=x6F;identifier=Q4M;}$[w1u](fields,function(name,field){var S5q="valToData";var V5q="aSrc";var i4M=W3F;i4M+=K9F;i4M+=V5q;var val=__html_get(identifier,field[i4M]());field[S5q](data,val===A7u?undefined:val);});out[identifier]={idSrc:identifier,data:data,node:document,fields:fields,type:X7m};return out;},create:function(fields,data){if(data){var p4M=E9F;p4M+=L1U.j1F;var t4M=F1m;t4M+=u1F;t4M+=I3F;var id=__dataSources[t4M][p4M][v8u](this,data);try{if(__html_id(id)[D2u]){__html_set(id,fields,data);}}catch(e){}}},edit:function(identifier,fields,data){var c4M=i9F;c4M+=R5m;var u4M=F1m;u4M+=U4K;var id=__dataSources[u4M][X9K][c4M](this,data)||Y5q;__html_set(id,fields,data);},remove:function(identifier,fields){__html_id(identifier)[a6u]();}};}());Editor[y8u]={"wrapper":P4M,"processing":{"indicator":V4M,"active":o7u},"header":{"wrapper":S4M,"content":X4M},"body":{"wrapper":X5q,"content":J5q},"footer":{"wrapper":J4M,"content":Z5q},"form":{"wrapper":Z4M,"content":Y2q,"tag":L1U.f1F,"info":B2q,"error":g2q,"buttons":Y6M,"button":C2q,"buttonInternal":B6M},"field":{"wrapper":m2q,"typePrefix":E2q,"namePrefix":g6M,"label":C6M,"input":x2q,"inputControl":v2q,"error":T2q,"msg-label":I2q,"msg-error":k2q,"msg-message":m6M,"msg-info":E6M,"multiValue":q2q,"multiInfo":z2q,"multiRestore":x6M,"multiNoEdit":N2q,"disabled":P7u,"processing":v6M},"actions":{"create":T6M,"edit":j2q,"remove":f2q},"inline":{"wrapper":r2q,"liner":I6M,"buttons":M2q},"bubble":{"wrapper":k6M,"liner":q6M,"table":s2q,"close":d2q,"pointer":z6M,"bg":b2q}};(function(){var L0q="removeSingle";var H0q='selectedSingle';var A0q="editSingle";var K0q='buttons-remove';var W0q='rows';var j0q='buttons-edit';var z0q="formMessage";var q0q="formButtons";var v0q="18n";var x0q='buttons-create';var C0q="confirm";var c2q="editor_remove";var u2q="fnGetSelectedIndexes";var Q2q="editor_edit";var n2q="editor";var U2q="i18";var F2q="reate";var L2q="editor_create";var H2q="ONS";var A2q="ingle";var O2q="t_s";var o2q="lec";var y2q="eTools";var D2q="ected";var w2q="gle";var K2q="itSi";var W2q="removeS";var l2q="ctedSing";var R2q="sele";var J5I=R2q;J5I+=l2q;J5I+=K6F;var X5I=X1F;X5I+=Q2m;var S5I=w1F;S5I+=O0m;S5I+=c3F;S5I+=L1U.j1F;var V5I=W2q;V5I+=E9F;V5I+=Q5u;V5I+=K6F;var P5I=w1F;P5I+=a2q;var c5I=Z3K;c5I+=K2q;c5I+=L1U.q1F;c5I+=w2q;var u5I=w1F;u5I+=u1u;u5I+=K9F;var N5I=p6F;N5I+=I3F;N5I+=D2q;var N6M=W2m;N6M+=y2q;if(DataTable[N6M]){var F6M=p6F;F6M+=I3F;F6M+=w1F;F6M+=x8K;var L6M=n6u;L6M+=L1U.q1F;L6M+=L1U.j1F;var W6M=p6F;W6M+=o2q;W6M+=O2q;W6M+=A2q;var l6M=m7u;l6M+=V3u;var f6M=R3F;f6M+=O0m;var j6M=i2m;j6M+=U9F;j6M+=H2q;var ttButtons=DataTable[u2m][j6M];var ttButtonBase={sButtonText:A7u,editor:A7u,formTitle:A7u};ttButtons[L2q]=$[Z0u](o2u,ttButtons[f6M],ttButtonBase,{formButtons:[{label:A7u,fn:function(e){var r6M=M0K;r6M+=a9F;r6M+=u1F;r6M+=k5u;this[r6M]();}}],fnClick:function(button,config){var h2q="crea";var G2q="formButt";var e2q="abel";var R6M=i9F;R6M+=F2q;var b6M=I3F;b6M+=e2q;var d6M=G2q;d6M+=u9F;var s6M=h2q;s6M+=R3F;var M6M=U2q;M6M+=L1U.q1F;var editor=config[n2q];var i18nCreate=editor[M6M][s6M];var buttons=config[d6M];if(!buttons[z8F][b6M]){buttons[z8F][j7u]=i18nCreate[T8K];}editor[R6M]({title:i18nCreate[d7K],buttons:buttons});}});ttButtons[Q2q]=$[l6M](o2u,ttButtons[W6M],ttButtonBase,{formButtons:[{label:A7u,fn:function(e){this[T8K]();}}],fnClick:function(button,config){var i2q="formBut";var H6M=K9F;H6M+=k5u;H6M+=K6F;var o6M=I3F;o6M+=L1U.x1F;o6M+=E3F;o6M+=I3F;var y6M=i2q;y6M+=q8K;var D6M=Z3K;D6M+=k5u;var w6M=t2q;w6M+=p2q;w6M+=L1U.q1F;var K6M=w1F;K6M+=u1u;K6M+=z6F;K6M+=X1F;var a6M=I3F;a6M+=N1K;var selected=this[u2q]();if(selected[a6M]!==N8F){return;}var editor=config[K6M];var i18nEdit=editor[w6M][D6M];var buttons=config[y6M];if(!buttons[z8F][o6M]){var A6M=x6F;A6M+=K0K;A6M+=u1F;A6M+=k5u;var O6M=I3F;O6M+=L1U.x1F;O6M+=a9F;O6M+=R9F;buttons[z8F][O6M]=i18nEdit[A6M];}editor[Y6F](selected[z8F],{title:i18nEdit[H6M],buttons:buttons});}});ttButtons[c2q]=$[L6M](o2u,ttButtons[F6M],ttButtonBase,{question:A7u,formButtons:[{label:A7u,fn:function(e){var e6M=I1m;e6M+=E9F;e6M+=K9F;var that=this;this[e6M](function(json){var J2q="aTa";var X2q="tInstance";var S2q="aTab";var V2q="lectNone";var P2q="fnSe";var i6M=P2q;i6M+=V2q;var Q6M=b9m;Q6M+=K9F;Q6M+=S2q;Q6M+=K6F;var n6M=w6u;n6M+=r5u;var U6M=L1U.z1F;U6M+=L1U.q1F;U6M+=G9m;U6M+=X2q;var h6M=W3F;h6M+=K9F;h6M+=J2q;h6M+=r5u;var G6M=L1U.z1F;G6M+=L1U.q1F;var tt=$[G6M][h6M][u2m][U6M]($(that[x6F][n6M])[Q6M]()[k9u]()[F2K]());tt[i6M]();});}}],fnClick:function(button,config){var B0q="utt";var Y0q="formB";var Z2q="confi";var X6M=I3F;X6M+=w1F;X6M+=P6K;var V6M=Z2q;V6M+=Y2m;var P6M=x4u;P6M+=E9F;P6M+=Y2m;var c6M=I6u;c6M+=b1F;c6M+=X1F;c6M+=u1F;var u6M=Y0q;u6M+=B0q;u6M+=u9F;var p6M=M3K;p6M+=g0q;var t6M=d9K;t6M+=L7K;var rows=this[u2q]();if(rows[t6M]===z8F){return;}var editor=config[p6M];var i18nRemove=editor[A9u][a6u];var buttons=config[u6M];var question=typeof i18nRemove[C0q]===F1u?i18nRemove[c6M]:i18nRemove[P6M][rows[D2u]]?i18nRemove[V6M][rows[D2u]]:i18nRemove[C0q][n9F];if(!buttons[z8F][j7u]){var S6M=x6F;S6M+=v6F;buttons[z8F][j7u]=i18nRemove[S6M];}editor[a6u](rows,{message:question[G1u](/%d/g,rows[X6M]),title:i18nRemove[d7K],buttons:buttons});}});}var _buttons=DataTable[m7u][C8K];$[Z0u](_buttons,{create:{text:function(dt,node,config){var E0q="eate";var m0q="buttons.c";var C5I=k8K;C5I+=K9F;C5I+=e4F;C5I+=L1U.q1F;var g5I=i9F;g5I+=k0u;g5I+=S8K;var B5I=E9F;B5I+=L1U.B1F;B5I+=v8K;var Y5I=w1F;Y5I+=u1u;Y5I+=K9F;Y5I+=q5u;var Z6M=m0q;Z6M+=X1F;Z6M+=E0q;var J6M=U2q;J6M+=L1U.q1F;return dt[J6M](Z6M,config[Y5I][B5I][g5I][C5I]);},className:x0q,editor:A7u,formButtons:{text:function(editor){var x5I=I1m;x5I+=k5u;var E5I=i9F;E5I+=k0u;E5I+=L1U.x1F;E5I+=R3F;var m5I=E9F;m5I+=v0q;return editor[m5I][E5I][x5I];},action:function(e){this[T8K]();}},formMessage:A7u,formTitle:A7u,action:function(e,dt,node,config){var k0q="reOp";var I0q="mBu";var T0q="Title";var z5I=K9F;z5I+=R7m;var q5I=i9F;q5I+=F2q;var k5I=L1U.z1F;k5I+=q5u;k5I+=u1F;k5I+=T0q;var I5I=t9F;I5I+=I0q;I5I+=K9F;I5I+=q8K;var T5I=i9F;T5I+=X1F;T5I+=h4K;T5I+=R3F;var v5I=X3F;v5I+=k0q;v5I+=w1F;v5I+=L1U.q1F;var that=this;var editor=config[n2q];var buttons=config[q0q];this[o7u](o2u);editor[T1u](v5I,function(){that[o7u](y2u);})[T5I]({buttons:config[I5I],message:config[z0q],title:config[k5I]||editor[A9u][q5I][z5I]});}},edit:{extend:N5I,text:function(dt,node,config){var N0q='buttons.edit';var f5I=w1F;f5I+=L1F;var j5I=E9F;j5I+=L1U.B1F;j5I+=p2q;j5I+=L1U.q1F;return dt[j5I](N0q,config[f5I][A9u][Y6F][Q9u]);},className:j0q,editor:A7u,formButtons:{text:function(editor){var M5I=M0K;M5I+=s0K;M5I+=k5u;var r5I=E9F;r5I+=v0q;return editor[r5I][Y6F][M5I];},action:function(e){var s5I=x6F;s5I+=G1F;s5I+=s0K;s5I+=k5u;this[s5I]();}},formMessage:A7u,formTitle:A7u,action:function(e,dt,node,config){var R0q="itor";var b0q="ol";var d0q="ndex";var s0q="ell";var M0q="cessing";var r0q="reOpen";var f0q="formTi";var H5I=K9F;H5I+=R7m;var A5I=E9F;A5I+=L1U.B1F;A5I+=p2q;A5I+=L1U.q1F;var O5I=f0q;O5I+=V4K;O5I+=w1F;var o5I=w1F;o5I+=L1U.j1F;o5I+=E9F;o5I+=K9F;var y5I=X3F;y5I+=r0q;var D5I=e4F;D5I+=L1U.q1F;D5I+=w1F;var w5I=Q3F;w5I+=M0q;var K5I=A7K;K5I+=w2u;var a5I=i9F;a5I+=s0q;a5I+=x6F;var W5I=E9F;W5I+=d0q;W5I+=G6F;var l5I=i9F;l5I+=b0q;l5I+=G1F;l5I+=K6m;var R5I=E9F;R5I+=L1U.q1F;R5I+=g6m;R5I+=G6F;var b5I=X1F;b5I+=e4F;b5I+=y3F;b5I+=x6F;var d5I=Z3K;d5I+=R0q;var that=this;var editor=config[d5I];var rows=dt[b5I]({selected:o2u})[R5I]();var columns=dt[l5I]({selected:o2u})[W5I]();var cells=dt[a5I]({selected:o2u})[i4m]();var items=columns[K5I]||cells[D2u]?{rows:rows,columns:columns,cells:cells}:rows;this[w5I](o2u);editor[D5I](y5I,function(){that[o7u](y2u);})[o5I](items,{message:config[z0q],buttons:config[q0q],title:config[O5I]||editor[A5I][Y6F][H5I]});}},remove:{extend:l0q,limitTo:[W0q],text:function(dt,node,config){var a0q='buttons.remove';var F5I=E6K;F5I+=w1F;var L5I=E9F;L5I+=v0q;return dt[L5I](a0q,config[n2q][A9u][F5I][Q9u]);},className:K0q,editor:A7u,formButtons:{text:function(editor){var w0q="bmit";var e5I=M0K;e5I+=w0q;return editor[A9u][a6u][e5I];},action:function(e){var G5I=I1m;G5I+=k5u;this[G5I]();}},formMessage:function(editor,dt){var y0q="exe";var D0q="irm";var Q5I=I6u;Q5I+=b1F;Q5I+=Y2m;var n5I=K6F;n5I+=L1U.q1F;n5I+=A3F;n5I+=w2u;var U5I=i9F;U5I+=i7u;U5I+=L1U.z1F;U5I+=D0q;var h5I=E5u;h5I+=L1U.j1F;h5I+=y0q;h5I+=x6F;var rows=dt[c4F]({selected:o2u})[h5I]();var i18n=editor[A9u][a6u];var question=typeof i18n[U5I]===F1u?i18n[C0q]:i18n[C0q][rows[n5I]]?i18n[Q5I][rows[D2u]]:i18n[C0q][n9F];return question[G1u](/%d/g,rows[D2u]);},formTitle:A7u,action:function(e,dt,node,config){var O0q="formTitle";var o0q="mMessag";var p5I=E9F;p5I+=L1U.B1F;p5I+=p2q;p5I+=L1U.q1F;var t5I=t9F;t5I+=o0q;t5I+=w1F;var i5I=X3F;i5I+=X1F;i5I+=N9m;i5I+=A3F;var that=this;var editor=config[n2q];this[i5I](o2u);editor[T1u](x9m,function(){that[o7u](y2u);})[a6u](dt[c4F]({selected:o2u})[i4m](),{buttons:config[q0q],message:config[t5I],title:config[O0q]||editor[p5I][a6u][d7K]});}}});_buttons[A0q]=$[Z0u]({},_buttons[u5I]);_buttons[c5I][P5I]=H0q;_buttons[V5I]=$[S5I]({},_buttons[X5I]);_buttons[L0q][Z0u]=J5I;}());Editor[Z5I]={};Editor[Y2I]=function(input,opts){var J7q="_constructor";var X7q=/[haA]/;var S7q=/[Hhm]|LT|LTS/;var P7q=/[YMD]|L(?!T)|l/;var u7q='editor-dateime-';var p7q='-error';var t7q='-title';var i7q='-date';var Q7q='-error"/>';var n7q='-seconds"/>';var U7q='-hours"/>';var h7q='-calendar"/>';var G7q='-year"/>';var e7q='<select class="';var F7q='<span/>';var H7q="previous";var o7q="Editor datetime: Without momentjs only the format 'YYYY-MM-DD' can be used";var y7q='YYYY-MM-DD';var K7q="fau";var l7q="ormat";var R7q="s=";var d7q="-date";var s7q="<div class";var M7q="itl";var r7q="nLeft\"";var f7q="ico";var z7q="t\"";var q7q="-iconR";var k7q="tton>";var I7q="<div c";var T7q="l\">";var v7q="labe";var x7q="lect clas";var m7q="nth\"/>";var C7q="-mo";var g7q=" class=\"";var B7q="-label\"";var Y7q="iv class=\"";var Z0q="e\">";var J0q="ss=\"";var X0q="div cla";var S0q="inutes\"/>";var c0q="=";var p0q="endar";var t0q="-ca";var n0q="teTim";var G0q="ppen";var e0q="dar";var F0q="ale";var Z2I=i9F;Z2I+=F0q;Z2I+=L1U.q1F;Z2I+=e0q;var J2I=L1U.j1F;J2I+=e4F;J2I+=u1F;var X2I=B8u;X2I+=w1F;X2I+=L1U.q1F;X2I+=L1U.j1F;var S2I=W3F;S2I+=R3F;var V2I=L1U.x1F;V2I+=G0q;V2I+=L1U.j1F;var P2I=K9F;P2I+=E9F;P2I+=u1F;P2I+=w1F;var c2I=W3F;c2I+=K9F;c2I+=w1F;var u2I=e8u;u2I+=u1F;var p2I=w8u;p2I+=h0q;var t2I=L1U.j1F;t2I+=P1u;var i2I=s7K;i2I+=X1F;i2I+=v9u;i2I+=K9F;var Q2I=U0q;Q2I+=e9K;var n2I=r7K;n2I+=J5K;var U2I=b9m;U2I+=n0q;U2I+=w1F;var h2I=Q0q;h2I+=L1U.j1F;var G2I=i0q;G2I+=E9F;G2I+=u1F;G2I+=w1F;var e2I=t0q;e2I+=I3F;e2I+=p0q;var F2I=L1U.z1F;F2I+=E9F;F2I+=L1U.q1F;F2I+=L1U.j1F;var L2I=u0q;L2I+=b9u;L2I+=c0q;L2I+=B2u;var H2I=Z2u;H2I+=g6F;H2I+=g0u;var A2I=P0q;A2I+=K0u;var O2I=V0q;O2I+=u1F;O2I+=S0q;var o2I=v0u;o2I+=X0q;o2I+=J0q;var y2I=V0q;y2I+=K9F;y2I+=X5K;y2I+=Z0q;var D2I=K4u;D2I+=Y7q;var w2I=P2u;w2I+=E9F;w2I+=g6F;w2I+=g0u;var K2I=B7q;K2I+=g0u;var a2I=V9u;a2I+=g7q;var W2I=C7q;W2I+=m7q;var l2I=E7q;l2I+=x7q;l2I+=K0u;var R2I=V0q;R2I+=v7q;R2I+=T7q;var b2I=I7q;b2I+=o1u;b2I+=x6F;b2I+=K0u;var d2I=Y0u;d2I+=u1u;d2I+=J2u;var s2I=L1U.q1F;s2I+=w1F;s2I+=P9u;s2I+=K9F;var M2I=v0u;M2I+=h0K;M2I+=k7q;var r2I=q7q;r2I+=b4u;r2I+=z7q;r2I+=g0u;var f2I=G6u;f2I+=N7q;f2I+=B2u;var j2I=j7q;j2I+=i7u;j2I+=g0u;var N2I=V0q;N2I+=f7q;N2I+=r7q;N2I+=g0u;var z2I=v0u;z2I+=B0u;z2I+=g7q;var q2I=i0q;q2I+=M7q;q2I+=Z0q;var k2I=s7q;k2I+=I0u;var I2I=d7q;I2I+=b7q;var T2I=V9u;T2I+=I2u;T2I+=b9u;T2I+=I0u;var v2I=B2u;v2I+=g0u;var x2I=P0q;x2I+=R7q;x2I+=B2u;var E2I=L1U.z1F;E2I+=l7q;var m2I=E9F;m2I+=L1U.B1F;m2I+=p2q;m2I+=L1U.q1F;var C2I=F4K;C2I+=W7q;C2I+=a7q;var g2I=q4F;g2I+=K7q;g2I+=h1F;var B2I=m7u;B2I+=w1F;B2I+=L1U.q1F;B2I+=L1U.j1F;this[i9F]=$[B2I](o2u,{},Editor[w7q][g2I],opts);var classPrefix=this[i9F][C2I];var i18n=this[i9F][m2I];if(!window[D7q]&&this[i9F][E2I]!==y7q){throw o7q;}var timeBlock=function(type){var O7q='-timeblock">';return v7K+classPrefix+O7q+M7u;};var gap=function(){var A7q='<span>:</span>';return A7q;};var structure=$(x2I+classPrefix+v2I+T2I+classPrefix+I2I+k2I+classPrefix+q2I+z2I+classPrefix+N2I+j2I+i18n[H7q]+L7q+M7u+f2I+classPrefix+r2I+M2I+i18n[s2I]+L7q+d2I+b2I+classPrefix+R2I+F7q+l2I+classPrefix+W2I+M7u+a2I+classPrefix+K2I+F7q+e7q+classPrefix+G7q+w2I+M7u+v7K+classPrefix+h7q+M7u+D2I+classPrefix+y2I+v7K+classPrefix+U7q+o2I+classPrefix+O2I+A2I+classPrefix+n7q+H2I+L2I+classPrefix+Q7q+M7u);this[h7u]={container:structure,date:structure[h7m](N3K+classPrefix+i7q),title:structure[h7m](N3K+classPrefix+t7q),calendar:structure[F2I](N3K+classPrefix+e2I),time:structure[h7m](N3K+classPrefix+G2I),error:structure[h2I](N3K+classPrefix+p7q),input:$(input)};this[x6F]={d:A7u,display:A7u,minutesRange:A7u,secondsRange:A7u,namespace:u7q+Editor[U2I][c7q]++,parts:{date:this[i9F][n2I][f8m](P7q)!==A7u,time:this[i9F][V7q][Q2I](S7q)!==A7u,seconds:this[i9F][i2I][B7m](u5u)!==-N8F,hours12:this[i9F][V7q][f8m](X7q)!==A7u}};this[t2I][p2I][z1u](this[u2I][c2I])[z1u](this[h7u][P2I])[V2I](this[h7u][p8u]);this[h7u][S2I][X2I](this[J2I][d7K])[z1u](this[h7u][Z2I]);this[J7q]();};$[Z0u](Editor[Y0I][B0I],{destroy:function(){var g8q='.editor-datetime';var E0I=Z7q;E0I+=Y8q;var m0I=e4F;m0I+=L1U.z1F;m0I+=L1U.z1F;var C0I=L1U.j1F;C0I+=e4F;C0I+=u1F;var g0I=n9F;g0I+=J9F;g0I+=j9K;this[g0I]();this[C0I][R8u][m0I]()[E0I]();this[h7u][B8q][v6u](g8q);},errorMsg:function(msg){var C8q="pt";var v0I=w1F;v0I+=X1F;v0I+=W6F;var x0I=L1U.j1F;x0I+=e4F;x0I+=u1F;var error=this[x0I][v0I];if(msg){error[q1u](msg);}else{var T0I=Z7q;T0I+=C8q;T0I+=k3F;error[T0I]();}},hide:function(){var m8q="hide";var I0I=n9F;I0I+=m8q;this[I0I]();},max:function(date){var v8q="xDat";var x8q="tionsTitle";var q0I=E8q;q0I+=x8q;var k0I=u1F;k0I+=L1U.x1F;k0I+=v8q;k0I+=w1F;this[i9F][k0I]=date;this[q0I]();this[T8q]();},min:function(date){var z8q="_optionsTitle";var k8q="aland";var I8q="_setC";var z0I=I8q;z0I+=k8q;z0I+=F9F;this[i9F][q8q]=date;this[z8q]();this[z0I]();},owns:function(node){var r0I=I3F;r0I+=w1F;r0I+=N8q;r0I+=J9F;var f0I=f8u;f0I+=D3u;f0I+=D8u;f0I+=X1F;var j0I=L1U.j1F;j0I+=e4F;j0I+=u1F;var N0I=j8q;N0I+=D3u;N0I+=x6F;return $(node)[N0I]()[N5q](this[j0I][f0I])[r0I]>z8F;},val:function(set,write){var o8q="riteOutput";var D8q=/(\d{4})\-(\d{2})\-(\d{2})/;var w8q="tc";var a8q="toDate";var l8q="entStric";var R8q="alid";var b8q="sV";var s8q="trin";var M8q="oS";var f8q="setT";var o0I=n9F;o0I+=f8q;o0I+=R7m;var y0I=p6F;y0I+=r8q;y0I+=t1F;var D0I=K9F;D0I+=M8q;D0I+=s8q;D0I+=A3F;var w0I=m1u;w0I+=E1u;var M0I=x6F;M0I+=s8q;M0I+=A3F;if(set===undefined){return this[x6F][L1U.j1F];}if(set instanceof Date){this[x6F][L1U.j1F]=this[d8q](set);}else if(set===A7u||set===p5u){this[x6F][L1U.j1F]=A7u;}else if(typeof set===M0I){if(window[D7q]){var R0I=E9F;R0I+=b8q;R0I+=R8q;var b0I=u1F;b0I+=P1u;b0I+=l8q;b0I+=K9F;var d0I=t9F;d0I+=U0q;var s0I=G1F;s0I+=K9F;s0I+=i9F;var m=window[D7q][s0I](set,this[i9F][d0I],this[i9F][W8q],this[i9F][b0I]);this[x6F][L1U.j1F]=m[R0I]()?m[a8q]():A7u;}else{var W0I=K8q;W0I+=U9F;W0I+=B8K;var l0I=u1F;l0I+=L1U.x1F;l0I+=w8q;l0I+=J9F;var match=set[l0I](D8q);this[x6F][L1U.j1F]=match?new Date(Date[W0I](match[N8F],match[j8F]-N8F,match[f8F])):A7u;}}if(write||write===undefined){if(this[x6F][L1U.j1F]){var a0I=y8q;a0I+=o8q;this[a0I]();}else{var K0I=e8u;K0I+=u1F;this[K0I][B8q][t0u](set);}}if(!this[x6F][L1U.j1F]){this[x6F][L1U.j1F]=this[d8q](new Date());}this[x6F][w0I]=new Date(this[x6F][L1U.j1F][D0I]());this[x6F][u9u][y0I](N8F);this[o0I]();this[T8q]();this[O8q]();},_constructor:function(){var l1q="_writeOutput";var E1q="_set";var P8q='focus.editor-datetime click.editor-datetime';var c8q='off';var u8q='autocomplete';var p8q="time";var t8q="-secon";var i8q="seconds";var h8q="_options";var e8q="ime";var F8q="r-datet";var L8q="keyup.edito";var H8q="iner";var A8q="ele";var F7I=e4F;F7I+=L1U.q1F;var r7I=x6F;r7I+=A8q;r7I+=x8K;var f7I=w8u;f7I+=L1U.x1F;f7I+=H8q;var I7I=L8q;I7I+=F8q;I7I+=e8q;var g7I=e4F;g7I+=L1U.q1F;var B7I=L1U.x1F;B7I+=K9F;B7I+=K9F;B7I+=X1F;var Y7I=E9F;Y7I+=G8q;var Z0I=h8q;Z0I+=U9F;Z0I+=R7m;var i0I=X1m;i0I+=X1F;i0I+=K9F;i0I+=x6F;var h0I=K9F;h0I+=E9F;h0I+=u1F;h0I+=w1F;var O0I=F4K;O0I+=W7q;O0I+=a7q;var that=this;var classPrefix=this[i9F][O0I];var onChange=function(){var U8q="onChange";var L0I=g6F;L0I+=S7u;var H0I=E9F;H0I+=G8q;var A0I=x4K;A0I+=I3F;A0I+=I3F;that[i9F][U8q][A0I](that,that[h7u][H0I][L0I](),that[x6F][L1U.j1F],that[h7u][B8q]);};if(!this[x6F][n8q][Q8q]){var G0I=F7u;G0I+=b6F;var e0I=D1F;e0I+=w1F;var F0I=e8u;F0I+=u1F;this[F0I][e0I][e7u](G7u,G0I);}if(!this[x6F][n8q][h0I]){var Q0I=L1U.q1F;Q0I+=e4F;Q0I+=L1U.q1F;Q0I+=w1F;var n0I=v0m;n0I+=X3F;n0I+=E1u;var U0I=K9F;U0I+=e8q;this[h7u][U0I][e7u](n0I,Q0I);}if(!this[x6F][i0I][i8q]){var J0I=w1F;J0I+=u0K;var X0I=x6F;X0I+=X3F;X0I+=L1U.x1F;X0I+=L1U.q1F;var S0I=R6u;S0I+=l6u;var V0I=K9F;V0I+=E9F;V0I+=o1F;var P0I=e8u;P0I+=u1F;var c0I=k0u;c0I+=u1F;c0I+=d9m;c0I+=w1F;var u0I=t8q;u0I+=L1U.j1F;u0I+=x6F;var p0I=R6u;p0I+=L1U.j1F;p0I+=X1F;p0I+=c3F;var t0I=L1U.j1F;t0I+=e4F;t0I+=u1F;this[t0I][p8q][p0I](z3K+classPrefix+u0I)[c0I]();this[P0I][V0I][S0I](X0I)[J0I](N8F)[a6u]();}this[Z0I]();this[h7u][Y7I][B7I](u8q,c8q)[g7I](P8q,function(){var X8q=':disabled';var S8q=':visible';var T7I=V8q;T7I+=K9F;var v7I=L1U.j1F;v7I+=P1u;var x7I=g6F;x7I+=L1U.x1F;x7I+=I3F;var E7I=E9F;E7I+=x6F;var m7I=e8u;m7I+=u1F;var C7I=E9F;C7I+=x6F;if(that[h7u][R8u][C7I](S8q)||that[m7I][B8q][E7I](X8q)){return;}that[x7I](that[v7I][T7I][t0u](),y2u);that[M3u]();})[i7u](I7I,function(){var J8q=":vis";var q7I=J8q;q7I+=S6u;var k7I=E9F;k7I+=x6F;if(that[h7u][R8u][k7I](q7I)){var j7I=g6F;j7I+=L1U.x1F;j7I+=I3F;var N7I=E9F;N7I+=J8u;N7I+=K9F;var z7I=L1U.j1F;z7I+=P1u;that[t0u](that[z7I][N7I][j7I](),y2u);}});this[h7u][f7I][i7u](Z8q,r7I,function(){var K1q="iteO";var a1q="_wr";var W1q='-seconds';var b1q="setUTCMi";var d1q='-minutes';var M1q="our";var f1q="_setTi";var j1q="tput";var N1q="_writeOu";var z1q='-ampm';var q1q='-hours';var k1q="_setTitle";var I1q="lYear";var T1q="TCFul";var v1q="etU";var x1q="Calander";var m1q='-year';var C1q="_correctMonth";var g1q="tT";var B1q='-month';var Y1q="sC";var L7I=L1U.j1F;L7I+=e4F;L7I+=u1F;var l7I=A8u;l7I+=j8u;var d7I=b2u;d7I+=Y1q;d7I+=j8u;var select=$(this);var val=select[t0u]();if(select[c7u](classPrefix+B1q)){var s7I=G3F;s7I+=w1F;s7I+=g1q;s7I+=R7m;var M7I=L6F;M7I+=L1U.x1F;M7I+=k3F;that[C1q](that[x6F][M7I],val);that[s7I]();that[T8q]();}else if(select[d7I](classPrefix+m1q)){var R7I=E1q;R7I+=x1q;var b7I=x6F;b7I+=v1q;b7I+=T1q;b7I+=I1q;that[x6F][u9u][b7I](val);that[k1q]();that[R7I]();}else if(select[l7I](classPrefix+q1q)||select[c7u](classPrefix+z1q)){var O7I=N1q;O7I+=j1q;var o7I=f1q;o7I+=o1F;if(that[x6F][n8q][r1q]){var y7I=X3F;y7I+=u1F;var D7I=V0q;D7I+=c2K;D7I+=X3F;D7I+=u1F;var w7I=e8u;w7I+=u1F;var K7I=V0q;K7I+=J9F;K7I+=M1q;K7I+=x6F;var a7I=L1U.z1F;a7I+=X4u;var W7I=L1U.j1F;W7I+=P1u;var hours=$(that[W7I][R8u])[a7I](N3K+classPrefix+K7I)[t0u]()*N8F;var pm=$(that[w7I][R8u])[h7m](N3K+classPrefix+D7I)[t0u]()===y7I;that[x6F][L1U.j1F][s1q](hours===l8F&&!pm?z8F:pm&&hours!==l8F?hours+l8F:hours);}else{that[x6F][L1U.j1F][s1q](val);}that[o7I]();that[O7I](o2u);onChange();}else if(select[c7u](classPrefix+d1q)){var A7I=b1q;A7I+=R1q;that[x6F][L1U.j1F][A7I](val);that[O8q]();that[l1q](o2u);onChange();}else if(select[c7u](classPrefix+W1q)){var H7I=a1q;H7I+=K1q;H7I+=G1F;H7I+=j1q;that[x6F][L1U.j1F][w1q](val);that[O8q]();that[H7I](o2u);onChange();}that[L7I][B8q][X7u]();that[D1q]();})[F7I](t7u,function(e){var a9q="setUTCDate";var l9q="tUTCFull";var b9q="M";var M9q='setSeconds';var r9q='setUTCMinutes';var f9q='setUTCHours';var j9q='hours';var N9q="etUTCH";var z9q="Hour";var q9q="getUTCHours";var k9q="sRa";var I9q="seco";var v9q="asC";var x9q='seconds';var E9q="utesRange";var m9q="min";var g9q="tTime";var B9q="_se";var Y9q='minutes';var Z1q='unit';var J1q="riteOutp";var S1q="ectMonth";var V1q="orr";var c1q="Tit";var i1q="tUTCMonth";var Q1q="etTitle";var n1q="nder";var U1q="_setCala";var h1q='range';var e1q="sClas";var F1q="Class";var L1q="sCl";var H1q="iconLef";var A1q="stopPropagation";var O1q='select';var o1q="parentNode";var y1q="odeName";var U7I=a9F;U7I+=D0u;U7I+=V9K;var h7I=L1U.q1F;h7I+=y1q;var G7I=w6u;G7I+=X1F;G7I+=d5u;G7I+=K9F;var e7I=x6F;e7I+=X1m;e7I+=L1U.q1F;var d=that[x6F][L1U.j1F];var nodeName=e[v2K][I6m][s8m]();var target=nodeName===e7I?e[v2K][o1q]:e[G7I];nodeName=target[h7I][s8m]();if(nodeName===O1q){return;}e[A1q]();if(nodeName===U7I){var Y8I=I3F;Y8I+=N1K;var Z7I=i0q;Z7I+=E9F;Z7I+=u1F;Z7I+=w1F;var J7I=X3F;J7I+=b3K;var p7I=V0q;p7I+=H1q;p7I+=K9F;var t7I=b2u;t7I+=L1q;t7I+=Q8u;var i7I=E2K;i7I+=F1q;var Q7I=b2u;Q7I+=e1q;Q7I+=x6F;var n7I=X1m;n7I+=P6u;n7I+=K9F;var button=$(target);var parent=button[n7I]();if(parent[Q7I](G1q)&&!parent[i7I](h1q)){button[r0K]();return;}if(parent[t7I](classPrefix+p7I)){var V7I=U1q;V7I+=n1q;var P7I=G3F;P7I+=Q1q;var c7I=d5u;c7I+=i1q;var u7I=O7K;u7I+=t1q;u7I+=p1q;that[x6F][u9u][u7I](that[x6F][u9u][c7I]()-N8F);that[P7I]();that[V7I]();that[h7u][B8q][X7u]();}else if(parent[c7u](classPrefix+u1q)){var X7I=E1q;X7I+=c1q;X7I+=K6F;var S7I=P1q;S7I+=V1q;S7I+=S1q;that[S7I](that[x6F][u9u],that[x6F][u9u][X1q]()+N8F);that[X7I]();that[T8q]();that[h7u][B8q][X7u]();}else if(button[J7I](N3K+classPrefix+Z7I)[Y8I]){var N8I=y8q;N8I+=J1q;N8I+=D0u;var k8I=L1U.x1F;k8I+=u1F;var g8I=g6F;g8I+=S7u;g8I+=b6K;var B8I=L1U.j1F;B8I+=J5K;B8I+=L1U.x1F;var val=button[B8I](g8I);var unit=button[j5u](Z1q);if(unit===Y9q){var C8I=X1F;C8I+=L1U.x1F;C8I+=Q5u;C8I+=w1F;if(parent[c7u](G1q)&&parent[c7u](C8I)){var m8I=B9q;m8I+=g9q;that[x6F][C9q]=val;that[m8I]();return;}else{var E8I=m9q;E8I+=E9q;that[x6F][E8I]=A7u;}}if(unit===x9q){var v8I=J9F;v8I+=v9q;v8I+=o1u;v8I+=d8u;var x8I=E2K;x8I+=t7m;x8I+=d8u;if(parent[x8I](G1q)&&parent[v8I](h1q)){var T8I=E1q;T8I+=b5u;T8I+=w1F;that[x6F][T9q]=val;that[T8I]();return;}else{var I8I=I9q;I8I+=u2u;I8I+=k9q;I8I+=q1K;that[x6F][I8I]=A7u;}}if(val===k8I){if(d[q9q]()>=l8F){var q8I=c7K;q8I+=t1q;q8I+=z9q;q8I+=x6F;val=d[q8I]()-l8F;}else{return;}}else if(val===A4m){if(d[q9q]()<l8F){var z8I=A3F;z8I+=N9q;z8I+=G4u;z8I+=W3m;val=d[z8I]()+l8F;}else{return;}}var set=unit===j9q?f9q:unit===Y9q?r9q:M9q;d[set](val);that[O8q]();that[N8I](o2u);onChange();}else{var d8I=h2u;d8I+=u1F;d8I+=w1F;var s8I=L1U.j1F;s8I+=L1U.x1F;s8I+=k3F;var M8I=u1F;M8I+=e4F;M8I+=s9q;var r8I=L1U.j1F;r8I+=L1U.x1F;r8I+=w6u;var f8I=d9q;f8I+=B8K;f8I+=b9q;f8I+=R9q;var j8I=p6F;j8I+=l9q;j8I+=W9q;if(!d){d=that[d8q](new Date());}d[a9q](N8F);d[j8I](button[j5u](K9q));d[f8I](button[r8I](M8I));d[a9q](button[j5u](s8I));that[l1q](o2u);if(!that[x6F][n8q][d8I]){setTimeout(function(){var w9q="_hi";var b8I=w9q;b8I+=q4F;that[b8I]();},b8F);}else{that[T8q]();}onChange();}}else{var R8I=s7K;R8I+=i9F;R8I+=G1F;R8I+=x6F;that[h7u][B8q][R8I]();}});},_compareDates:function(a,b){var D9q="_dateToUtcStri";var W8I=d8q;W8I+=C3F;W8I+=K9F;W8I+=l0m;var l8I=D9q;l8I+=Q5u;return this[l8I](a)===this[W8I](b);},_correctMonth:function(date,month){var F9q="CDa";var L9q="UT";var H9q="setUTC";var A9q="setUTCMonth";var O9q="getUTCDate";var y9q="_daysInMonth";var days=this[y9q](date[o9q](),month);var correctDays=date[O9q]()>days;date[A9q](month);if(correctDays){var K8I=H9q;K8I+=p1q;var a8I=O7K;a8I+=L9q;a8I+=F9q;a8I+=R3F;date[a8I](days);date[K8I](month);}},_daysInMonth:function(year,month){var e8F=31;var L8F=29;var H8F=28;var isLeap=year%r8F===z8F&&(year%i8F!==z8F||year%p8F===z8F);var months=[e8F,isLeap?L8F:H8F,e8F,F8F,e8F,F8F,e8F,e8F,F8F,e8F,F8F,e8F];return months[month];},_dateToUtc:function(s){var n9q="getMinutes";var U9q="getHours";var h9q="getDate";var G9q="getFullY";var e9q="Mont";var y8I=d5u;y8I+=K9F;y8I+=e9q;y8I+=J9F;var D8I=G9q;D8I+=w1F;D8I+=L1U.x1F;D8I+=X1F;var w8I=K8q;w8I+=U9F;w8I+=B8K;return new Date(Date[w8I](s[D8I](),s[y8I](),s[h9q](),s[U9q](),s[n9q](),s[Q9q]()));},_dateToUtcString:function(d){var t9q="Ye";var i9q="getUTCFull";var O8I=d5u;O8I+=r8q;O8I+=t1F;var o8I=i9q;o8I+=t9q;o8I+=L1U.x1F;o8I+=X1F;return d[o8I]()+T4K+this[p9q](d[X1q]()+N8F)+T4K+this[p9q](d[O8I]());},_hide:function(){var Y3q="pace";var Z9q="names";var J9q="ydo";var X9q="_Content";var S9q="div.DTE_Body";var V9q="oll";var P9q="sc";var c9q="k.";var Q8I=u9q;Q8I+=i9F;Q8I+=c9q;var n8I=e4F;n8I+=L1U.z1F;n8I+=L1U.z1F;var U8I=O5m;U8I+=L1U.j1F;U8I+=k3F;var h8I=P9q;h8I+=X1F;h8I+=V9q;h8I+=s2K;var G8I=S9q;G8I+=X9q;var e8I=a8K;e8I+=J9q;e8I+=d3u;e8I+=s2K;var F8I=e4F;F8I+=L1U.z1F;F8I+=L1U.z1F;var L8I=i8u;L8I+=L1U.q1F;L8I+=F9F;var H8I=L1U.j1F;H8I+=e4F;H8I+=u1F;var A8I=Z9q;A8I+=Y3q;var namespace=this[x6F][A8I];this[H8I][L8I][f3u]();$(window)[v6u](N3K+namespace);$(document)[F8I](e8I+namespace);$(G8I)[v6u](h8I+namespace);$(U8I)[n8I](Q8I+namespace);},_hours24To12:function(val){return val===z8F?l8F:val>l8F?val-l8F:val;},_htmlDay:function(day){var a3q='</td>';var W3q='" data-day="';var l3q='data-year="';var R3q='-day" type="button" ';var s3q="day";var M3q='<td data-day="';var r3q="selecte";var f3q='now';var j3q="today";var N3q="sable";var z3q='selectable';var q3q='<td class="empty"></td>';var k3q="sPrefix";var T3q="lected";var v3q="\" c";var x3q="onth=\"";var E3q="\" data";var m3q="<spa";var g3q="</spa";var B3q="</but";var x1I=B3q;x1I+=V9K;x1I+=g0u;var E1I=g3q;E1I+=C3q;var m1I=L1U.j1F;m1I+=L1U.x1F;m1I+=k3F;var C1I=m3q;C1I+=L1U.q1F;C1I+=g0u;var g1I=B2u;g1I+=g0u;var B1I=W3F;B1I+=k3F;var Y1I=u1F;Y1I+=e4F;Y1I+=s9q;var Z8I=E3q;Z8I+=V0q;Z8I+=u1F;Z8I+=x3q;var J8I=k3F;J8I+=w1F;J8I+=L1U.x1F;J8I+=X1F;var X8I=A4F;X8I+=e4F;X8I+=E9F;X8I+=L1U.q1F;var S8I=v3q;S8I+=m2m;var c8I=p6F;c8I+=T3q;var t8I=v0m;t8I+=I3q;var i8I=a0u;i8I+=k3q;if(day[I8K]){return q3q;}var classes=[z3q];var classPrefix=this[i9F][i8I];if(day[t8I]){var u8I=u1u;u8I+=N3q;u8I+=L1U.j1F;var p8I=a2u;p8I+=J9F;classes[p8I](u8I);}if(day[j3q]){classes[K1u](f3q);}if(day[c8I]){var V8I=r3q;V8I+=L1U.j1F;var P8I=a2u;P8I+=J9F;classes[P8I](V8I);}return M3q+day[s3q]+S8I+classes[X8I](T7u)+N7u+d3q+classPrefix+b3q+classPrefix+R3q+l3q+day[J8I]+Z8I+day[Y1I]+W3q+day[B1I]+g1I+C1I+day[m1I]+E1I+x1I+a3q;},_htmlMonth:function(year,month){var z4q='</thead>';var q4q="_htmlMonthHead";var k4q="TC";var I4q='-iconLeft';var T4q="kNumb";var v4q="ee";var x4q=" w";var E4q='-table';var g4q="_htmlWeekOfYear";var Y4q="joi";var J3q="</t";var X3q="disableDays";var S3q="_compareDates";var V3q="pareDat";var P3q="sArray";var u3q="_htmlD";var p3q="tUTCM";var t3q="onds";var i3q="Sec";var Q3q="setUTCMinutes";var U3q="CH";var h3q="maxDate";var G3q="Day";var e3q="first";var L3q="getUTCDay";var H3q="ateToUtc";var A3q="ysInMo";var O3q="_da";var o3q="<table cl";var y3q="thead>";var D3q="dy>";var w3q="<tb";var K3q="tbody>";var D8F=23;var O1I=Y0u;O1I+=K3q;var o1I=w3q;o1I+=e4F;o1I+=D3q;var y1I=v0u;y1I+=y3q;var D1I=o3q;D1I+=L1U.x1F;D1I+=N7q;D1I+=B2u;var T1I=O3q;T1I+=A3q;T1I+=s9q;var v1I=K3u;v1I+=H3q;var now=this[v1I](new Date()),days=this[T1I](year,month),before=new Date(Date[t1q](year,month,N8F))[L3q](),data=[],row=[];if(this[i9F][F3q]>z8F){var I1I=e3q;I1I+=G3q;before-=this[i9F][I1I];if(before<z8F){before+=s8F;}}var cells=days+before,after=cells;while(after>s8F){after-=s8F;}cells+=s8F-after;var minDate=this[i9F][q8q];var maxDate=this[i9F][h3q];if(minDate){var k1I=d9q;k1I+=U3q;k1I+=n3q;minDate[k1I](z8F);minDate[Q3q](z8F);minDate[w1q](z8F);}if(maxDate){var z1I=O7K;z1I+=i3q;z1I+=t3q;var q1I=p6F;q1I+=p3q;q1I+=E9F;q1I+=R1q;maxDate[s1q](D8F);maxDate[q1I](n8F);maxDate[z1I](n8F);}for(var i=z8F,r=z8F;i<cells;i++){var r1I=u3q;r1I+=F6F;var f1I=c3q;f1I+=U9F;f1I+=B8K;f1I+=G3q;var j1I=E9F;j1I+=P3q;var N1I=P1q;N1I+=P1u;N1I+=V3q;N1I+=G6F;var day=new Date(Date[t1q](year,month,N8F+(i-before))),selected=this[x6F][L1U.j1F]?this[S3q](day,this[x6F][L1U.j1F]):y2u,today=this[N1I](day,now),empty=i<before||i>=days+before,disabled=minDate&&day<minDate||maxDate&&day>maxDate;var disableDays=this[i9F][X3q];if($[j1I](disableDays)&&$[a1u](day[f1I](),disableDays)!==-N8F){disabled=o2u;}else if(typeof disableDays===Y8u&&disableDays(day)===o2u){disabled=o2u;}var dayConfig={day:N8F+(i-before),month:month,year:year,selected:selected,today:today,disabled:disabled,empty:empty};row[K1u](this[r1I](dayConfig));if(++r===s8F){var s1I=J3q;s1I+=Z3q;var M1I=Y4q;M1I+=L1U.q1F;if(this[i9F][B4q]){row[h9u](this[g4q](i-before,month,year));}data[K1u](C4q+row[M1I](p5u)+s1I);row=[];r=z8F;}}var classPrefix=this[i9F][m4q];var className=classPrefix+E4q;if(this[i9F][B4q]){var d1I=x4q;d1I+=v4q;d1I+=T4q;d1I+=F9F;className+=d1I;}if(minDate){var l1I=L1U.j1F;l1I+=z9u;l1I+=E6F;l1I+=k3F;var R1I=L1U.j1F;R1I+=E9F;R1I+=g6F;R1I+=s2K;var b1I=K9F;b1I+=E9F;b1I+=K9F;b1I+=K6F;var underMin=minDate>=new Date(Date[t1q](year,month,N8F,z8F,z8F,z8F));this[h7u][b1I][h7m](R1I+classPrefix+I4q)[e7u](l1I,underMin?W8u:A1u);}if(maxDate){var w1I=a9F;w1I+=I3F;w1I+=e4F;w1I+=G3u;var K1I=F7u;K1I+=L1U.q1F;K1I+=w1F;var a1I=B0u;a1I+=s2K;var W1I=K8q;W1I+=k4q;var overMax=maxDate<new Date(Date[W1I](year,month+N8F,N8F,z8F,z8F,z8F));this[h7u][d7K][h7m](a1I+classPrefix+u1q)[e7u](G7u,overMax?K1I:w1I);}return D1I+className+N7u+y1I+this[q4q]()+z4q+o1I+data[f0m](p5u)+O1I+N4q;},_htmlMonthHead:function(){var d4q='</th>';var s4q="/th>";var M4q="<th>";var A1I=t2q;A1I+=p2q;A1I+=L1U.q1F;var a=[];var firstDay=this[i9F][F3q];var i18n=this[i9F][A1I];var dayName=function(day){var r4q="ys";var j4q="we";var H1I=j4q;H1I+=f4q;H1I+=W3F;H1I+=r4q;day+=firstDay;while(day>=s8F){day-=s8F;}return i18n[H1I][day];};if(this[i9F][B4q]){var L1I=M4q;L1I+=v0u;L1I+=s4q;a[K1u](L1I);}for(var i=z8F;i<s8F;i++){var e1I=v0u;e1I+=K9F;e1I+=J9F;e1I+=g0u;var F1I=X3F;F1I+=G1F;F1I+=x6F;F1I+=J9F;a[F1I](e1I+dayName(i)+d4q);}return a[f0m](p5u);},_htmlWeekOfYear:function(d,m,y){var W4q='<td class="';var l4q="tDa";var R4q="-w";var J8F=86400000;var Q1I=v0u;Q1I+=d0u;Q1I+=b4q;Q1I+=g0u;var n1I=R4q;n1I+=w1F;n1I+=f4q;n1I+=b7q;var U1I=c7K;U1I+=b9m;U1I+=k3F;var h1I=d5u;h1I+=l4q;h1I+=R3F;var G1I=O7K;G1I+=Q1F;G1I+=w1F;var date=new Date(y,m,d,z8F,z8F,z8F,z8F);date[G1I](date[h1I]()+r8F-(date[U1I]()||s8F));var oneJan=new Date(y,z8F,N8F);var weekNum=Math[a5u](((date-oneJan)/J8F+N8F)/s8F);return W4q+this[i9F][m4q]+n1I+weekNum+Q1I;},_options:function(selector,values,labels){var D4q='</option>';var w4q='<option value="';var K4q='select.';var a4q="refix";var p1I=I3F;p1I+=c3F;p1I+=A3F;p1I+=w2u;var t1I=b9u;t1I+=T5m;t1I+=a4q;var i1I=w8u;i1I+=n5u;i1I+=F9F;if(!labels){labels=values;}var select=this[h7u][i1I][h7m](K4q+this[i9F][t1I]+T4K+selector);select[I8K]();for(var i=z8F,ien=values[p1I];i<ien;i++){var u1I=B2u;u1I+=g0u;select[z1u](w4q+values[i]+u1I+labels[i]+D4q);}},_optionSet:function(selector,val){var F4q="unknown";var L4q='option:selected';var H4q='span';var A4q="ai";var O4q="ont";var y4q="dre";var Y9I=K9F;Y9I+=w1F;Y9I+=P9u;Y9I+=K9F;var Z1I=J9F;Z1I+=K9F;Z1I+=u1F;Z1I+=I3F;var J1I=Q0q;J1I+=L1U.j1F;var X1I=R6u;X1I+=y4q;X1I+=L1U.q1F;var S1I=X1m;S1I+=k0u;S1I+=D3u;var V1I=x6F;V1I+=R9F;V1I+=o4q;V1I+=s2K;var P1I=L1U.z1F;P1I+=E9F;P1I+=u2u;var c1I=i9F;c1I+=O4q;c1I+=A4q;c1I+=M8u;var select=this[h7u][c1I][P1I](V1I+this[i9F][m4q]+T4K+selector);var span=select[S1I]()[X1I](H4q);select[t0u](val);var selected=select[J1I](L4q);span[Z1I](selected[D2u]!==z8F?selected[Y9I]():this[i9F][A9u][F4q]);},_optionsTime:function(unit,count,val,allowed,range){var z6q='</tbody>';var q6q='<tbody>';var k6q='</th></tr></thead>';var I6q='</tbody></thead><table class="';var T6q="rang";var v6q="y>";var x6q="e\"><tbod";var E6q="ospac";var m6q="-n";var C6q="loo";var g6q="<t";var B6q="/tr>";var Y6q='</tr>';var Z4q="Pm";var J4q="amP";var X4q="/t";var i4q="ontain";var Q4q="mpty";var n4q="e class=\"";var U4q="<tabl";var h4q="n=\"";var G4q="<th colspa";var e4q="<thead><tr>";var M8F=6;var y9I=B2u;y9I+=g0u;var D9I=e4q;D9I+=G4q;D9I+=h4q;var w9I=U4q;w9I+=n4q;var K9I=w1F;K9I+=Q4q;var E9I=A7K;E9I+=w2u;var m9I=t2q;m9I+=p2q;m9I+=L1U.q1F;var C9I=V0q;C9I+=K9F;C9I+=b9F;C9I+=K6F;var g9I=B0u;g9I+=s2K;var B9I=i9F;B9I+=i4q;B9I+=F9F;var classPrefix=this[i9F][m4q];var container=this[h7u][B9I][h7m](g9I+classPrefix+T4K+unit);var i,j;var render=count===l8F?function(i){return i;}:this[p9q];var classPrefix=this[i9F][m4q];var className=classPrefix+C9I;var i18n=this[i9F][m9I];if(!container[E9I]){return;}var a=p5u;var span=b8F;var button=function(value,label,className){var S4q='" data-value="';var V4q='<td class="selectable ';var P4q=" dis";var c4q='am';var u4q="nit=\"";var p4q="-day\" type=\"button\" data-u";var t4q="/s";var q9I=v0u;q9I+=d0u;q9I+=b4q;q9I+=g0u;var k9I=v0u;k9I+=t4q;k9I+=X1m;k9I+=C3q;var I9I=v0u;I9I+=c1u;I9I+=L1U.x1F;I9I+=C3q;var T9I=p4q;T9I+=u4q;var x9I=O8K;x9I+=d5m;x9I+=F6F;if(count===l8F&&val>=l8F&&typeof value===X8K){value+=l8F;}var selected=val===value||value===c4q&&val<l8F||value===A4m&&val>=l8F?l0q:p5u;if(allowed&&$[x9I](value,allowed)===-N8F){var v9I=P4q;v9I+=o2K;v9I+=L1U.j1F;selected+=v9I;}if(className){selected+=T7u+className;}return V4q+selected+N7u+d3q+classPrefix+b3q+classPrefix+T9I+unit+S4q+value+N7u+I9I+label+k9I+L7q+q9I;};if(count===l8F){var r9I=v0u;r9I+=X4q;r9I+=Z3q;var f9I=J4q;f9I+=u1F;var j9I=X3F;j9I+=u1F;var N9I=L1U.x1F;N9I+=u1F;N9I+=Z4q;var z9I=L1U.x1F;z9I+=u1F;a+=C4q;for(i=N8F;i<=M8F;i++){a+=button(i,render(i));}a+=button(z9I,i18n[N9I][z8F]);a+=Y6q;a+=C4q;for(i=s8F;i<=l8F;i++){a+=button(i,render(i));}a+=button(j9I,i18n[f9I][N8F]);a+=r9I;span=s8F;}else if(count===y8F){var c=z8F;for(j=z8F;j<r8F;j++){var s9I=Y0u;s9I+=C8m;s9I+=g0u;var M9I=v0u;M9I+=K9F;M9I+=Z3q;a+=M9I;for(i=z8F;i<M8F;i++){a+=button(c,render(c));c++;}a+=s9I;}span=M8F;}else{var a9I=v0u;a9I+=B6q;var W9I=g6q;W9I+=Z3q;var l9I=L1U.z1F;l9I+=C6q;l9I+=X1F;var R9I=m6q;R9I+=E6q;R9I+=x6q;R9I+=v6q;var d9I=g6q;d9I+=X1F;d9I+=g0u;a+=d9I;for(j=z8F;j<Q8F;j+=b8F){var b9I=T6q;b9I+=w1F;a+=button(j,render(j),b9I);}a+=Y6q;a+=I6q+className+T7u+className+R9I;var start=range!==A7u?range:Math[l9I](val/b8F)*b8F;a+=W9I;for(j=start+N8F;j<start+b8F;j++){a+=button(j,render(j));}a+=a9I;span=M8F;}container[K9I]()[z1u](w9I+className+N7u+D9I+span+y9I+i18n[unit]+k6q+q6q+a+z6q+N4q);},_optionsTitle:function(){var a6q="_range";var W6q="getFullYear";var l6q="nDate";var R6q="max";var b6q="tFullY";var d6q="tFullYe";var s6q="getFull";var M6q="earRan";var r6q="arRa";var f6q="ye";var j6q="ths";var N6q="ear";var Q9I=k3F;Q9I+=N6q;var n9I=E0m;n9I+=P6F;n9I+=V6F;var U9I=u1F;U9I+=i7u;U9I+=j6q;var h9I=u1F;h9I+=e4F;h9I+=L1U.q1F;h9I+=w2u;var G9I=E8q;G9I+=g9K;var e9I=f6q;e9I+=r6q;e9I+=L1U.q1F;e9I+=d5u;var F9I=k3F;F9I+=M6q;F9I+=d5u;var L9I=s6q;L9I+=W9q;var H9I=d5u;H9I+=d6q;H9I+=i1K;var A9I=d5u;A9I+=b6q;A9I+=h4K;A9I+=X1F;var O9I=R6q;O9I+=t1F;var o9I=q0K;o9I+=l6q;var i18n=this[i9F][A9u];var min=this[i9F][o9I];var max=this[i9F][O9I];var minYear=min?min[A9I]():A7u;var maxYear=max?max[H9I]():A7u;var i=minYear!==A7u?minYear:new Date()[L9I]()-this[i9F][F9I];var j=maxYear!==A7u?maxYear:new Date()[W6q]()+this[i9F][e9I];this[G9I](h9I,this[a6q](z8F,R8F),i18n[U9I]);this[n9I](Q9I,this[a6q](i,j));},_pad:function(i){var K6q='0';return i<b8F?K6q+i:i;},_position:function(){var O6q="scrollTop";var o6q="ppendTo";var y6q="Height";var D6q="rWidt";var w6q="oute";var g3I=I3F;g3I+=g0K;g3I+=K9F;var Z9I=J9F;Z9I+=U4u;Z9I+=A3F;Z9I+=F1m;var J9I=w6q;J9I+=D6q;J9I+=J9F;var X9I=e4F;X9I+=G1F;X9I+=d5q;X9I+=y6q;var S9I=a9F;S9I+=e4F;S9I+=L1U.j1F;S9I+=k3F;var V9I=L1U.x1F;V9I+=o6q;var P9I=i9F;P9I+=d8u;var c9I=E9F;c9I+=G8q;var u9I=e8u;u9I+=u1F;var p9I=w8u;p9I+=h0q;var t9I=e8u;t9I+=u1F;var i9I=S3u;i9I+=X3u;i9I+=R5u;var offset=this[h7u][B8q][i9I]();var container=this[t9I][p9I];var inputHeight=this[u9I][c9I][f2K]();container[P9I]({top:offset[S3F]+inputHeight,left:offset[P7K]})[V9I](S9I);var calHeight=container[X9I]();var calWidth=container[J9I]();var scrollTop=$(window)[O6q]();if(offset[S3F]+inputHeight+calHeight-scrollTop>$(window)[Z9I]()){var B3I=K9F;B3I+=e4F;B3I+=X3F;var Y3I=i9F;Y3I+=d8u;var newTop=offset[S3F]-calHeight;container[Y3I](B3I,newTop<z8F?z8F:newTop);}if(calWidth+offset[g3I]>$(window)[U5K]()){var m3I=I3F;m3I+=w1F;m3I+=m8u;var C3I=i9F;C3I+=x6F;C3I+=x6F;var newLeft=$(window)[U5K]()-calWidth;container[C3I](m3I,newLeft<z8F?z8F:newLeft);}},_range:function(start,end,inc){var a=[];if(!inc){inc=N8F;}for(var i=start;i<=end;i+=inc){var E3I=X3F;E3I+=G1F;E3I+=x6F;E3I+=J9F;a[E3I](i);}return a;},_setCalander:function(){var F6q="_htmlMonth";var L6q="calendar";var H6q="Mon";var A6q="etUTC";var x3I=L1U.j1F;x3I+=Z6F;x3I+=E1u;if(this[x6F][x3I]){var T3I=A3F;T3I+=A6q;T3I+=H6q;T3I+=w2u;var v3I=L1U.j1F;v3I+=L1m;this[h7u][L6q][I8K]()[z1u](this[F6q](this[x6F][v3I][o9q](),this[x6F][u9u][T3I]()));}},_setTitle:function(){var p6q="_optionSet";var t6q="mont";var i6q="TCM";var Q6q="nSet";var n6q="pti";var U6q="_o";var h6q="llYear";var G6q="Fu";var e6q="getUTC";var j3I=e6q;j3I+=G6q;j3I+=h6q;var N3I=L1U.j1F;N3I+=L1m;var z3I=U6q;z3I+=n6q;z3I+=e4F;z3I+=Q6q;var q3I=c3q;q3I+=i6q;q3I+=R9q;var k3I=L1U.j1F;k3I+=L1m;var I3I=t6q;I3I+=J9F;this[p6q](I3I,this[x6F][k3I][q3I]());this[z3I](K9q,this[x6F][N3I][j3I]());},_setTime:function(){var E5U="getUTCMinutes";var m5U="hoursAvailable";var C5U="_optionsTime";var X6q="tUTCH";var S6q="tes";var V6q="nu";var P6q="inutes";var c6q="econds";var u6q="second";var W3I=u6q;W3I+=x6F;var l3I=x6F;l3I+=c6q;var R3I=u1F;R3I+=P6q;var b3I=q0K;b3I+=V6q;b3I+=S6q;var d3I=J9F;d3I+=n3q;var f3I=d5u;f3I+=X6q;f3I+=n3q;var that=this;var d=this[x6F][L1U.j1F];var hours=d?d[f3I]():z8F;var allowed=function(prop){var g5U='Available';var B5U="aila";var Y5U="Av";var Z6q="range";var J6q="Increm";var s3I=J6q;s3I+=w1F;s3I+=L1U.q1F;s3I+=K9F;var M3I=n9F;M3I+=Z6q;var r3I=Y5U;r3I+=B5U;r3I+=r5u;return that[i9F][prop+r3I]?that[i9F][prop+g5U]:that[M3I](z8F,n8F,that[i9F][prop+s3I]);};this[C5U](d3I,this[x6F][n8q][r1q]?l8F:y8F,hours,this[i9F][m5U]);this[C5U](b3I,Q8F,d?d[E5U]():z8F,allowed(R3I),this[x6F][C9q]);this[C5U](l3I,Q8F,d?d[Q9q]():z8F,allowed(W3I),this[x6F][T9q]);},_show:function(){var z5U=' resize.';var q5U="_posit";var k5U="ll.";var I5U="scro";var T5U="E_Body_";var v5U="div.D";var x5U="croll.";var A3I=a8K;A3I+=w8m;A3I+=s2K;var o3I=x6F;o3I+=x5U;var y3I=e4F;y3I+=L1U.q1F;var D3I=v5U;D3I+=U9F;D3I+=T5U;D3I+=H3m;var w3I=I5U;w3I+=k5U;var K3I=e4F;K3I+=L1U.q1F;var a3I=q5U;a3I+=d1F;var that=this;var namespace=this[x6F][k6K];this[a3I]();$(window)[K3I](w3I+namespace+z5U+namespace,function(){that[D1q]();});$(D3I)[y3I](o3I+namespace,function(){var N5U="itio";var O3I=P3F;O3I+=V3F;O3I+=N5U;O3I+=L1U.q1F;that[O3I]();});$(document)[i7u](A3I+namespace,function(e){var j5U="_h";var d8F=9;if(e[l8K]===d8F||e[l8K]===A8F||e[l8K]===W8F){var H3I=j5U;H3I+=E9F;H3I+=q4F;that[H3I]();}});setTimeout(function(){var f5U='click.';var F3I=e4F;F3I+=L1U.q1F;var L3I=a9F;L3I+=e4F;L3I+=L1U.j1F;L3I+=k3F;$(L3I)[F3I](f5U+namespace,function(e){var M5U="tar";var r5U="ntainer";var n3I=K6F;n3I+=N8q;n3I+=J9F;var U3I=f8u;U3I+=r5U;var h3I=L1U.j1F;h3I+=e4F;h3I+=u1F;var G3I=j8q;G3I+=L1U.q1F;G3I+=w9u;var e3I=M5U;e3I+=c7K;var parents=$(e[e3I])[G3I]();if(!parents[N5q](that[h3I][U3I])[n3I]&&e[v2K]!==that[h7u][B8q][z8F]){that[V6u]();}});},b8F);},_writeOutput:function(focus){var l5U="momentStrict";var R5U="utc";var b5U="mom";var d5U="etUTCFullYear";var s5U="TCDate";var u3I=e8u;u3I+=u1F;var p3I=c3q;p3I+=s5U;var t3I=A3F;t3I+=d5U;var i3I=u1F;i3I+=e4F;i3I+=B9m;var Q3I=b5U;Q3I+=Q5m;var date=this[x6F][L1U.j1F];var out=window[Q3I]?window[i3I][R5U](date,undefined,this[i9F][W8q],this[i9F][l5U])[V7q](this[i9F][V7q]):date[t3I]()+T4K+this[p9q](date[X1q]()+N8F)+T4K+this[p9q](date[p3I]());this[u3I][B8q][t0u](out);if(focus){this[h7u][B8q][X7u]();}}});Editor[w7q][c7q]=z8F;Editor[w7q][c3I]={classPrefix:P3I,disableDays:A7u,firstDay:N8F,format:V3I,hoursAvailable:A7u,i18n:Editor[Y7u][A9u][S3I],maxDate:A7u,minDate:A7u,minutesAvailable:A7u,minutesIncrement:N8F,momentStrict:o2u,momentLocale:X3I,onChange:function(){},secondsAvailable:A7u,secondsIncrement:N8F,showWeekNumber:y2u,yearRange:b8F};(function(){var E1U="_v";var Z8U="uploadMany";var P8U="_container";var Q8U="disab";var A8U="_va";var N8U="_picker";var u7U="_inp";var n7U="datepicker";var w7U="radio";var b7U="<inp";var j7U="bled";var v7U="_edito";var x7U="checked";var m7U="_addOptions";var C7U='<div />';var B7U='input:last';var Y7U='_';var J0U='<div>';var i0U="change";var h0U="separator";var L0U="put";var o0U="_editor_val";var w0U="ipOpts";var K0U="select";var a0U="_lastSet";var W0U="sel";var l0U="multiple";var b0U="ec";var f0U="optionsPair";var I0U="placeholder";var v0U="_in";var C0U="sa";var g0U="textarea";var J2U='text';var X2U='<input/>';var S2U="safe";var P2U="_i";var c2U="readonly";var p2U="_val";var t2U="prop";var i2U="np";var U2U="fieldTypes";var e2U="rop";var y2U='open';var D2U="_ena";var l2U="_enabled";var b2U="text";var i5U="led";var e5U="_input";var A5U="ldTy";var O5U="hid";var o5U="sswor";var y5U="box";var D5U="check";var w5U="radi";var K5U="exten";var a5U="adMa";var W5U="uplo";var z7F=p2u;z7F+=B2K;z7F+=L1U.j1F;var q7F=W5U;q7F+=a5U;q7F+=L1U.q1F;q7F+=k3F;var z0F=Q8q;z0F+=h2u;z0F+=o1F;var L2F=p2u;L2F+=E3u;var S5F=K5U;S5F+=L1U.j1F;var V5F=w5U;V5F+=e4F;var j5F=D5U;j5F+=y5U;var l6I=m7u;l6I+=V3u;var R6I=x6F;R6I+=R9F;R6I+=o4q;var j6I=p2u;j6I+=K9F;j6I+=V3u;var x6I=X1m;x6I+=o5U;x6I+=L1U.j1F;var c4I=w1F;c4I+=a2q;var p4I=O5U;p4I+=L1U.j1F;p4I+=w1F;p4I+=L1U.q1F;var n4I=l1F;n4I+=A5U;n4I+=Z3F;var J3I=c1F;J3I+=k3F;J3I+=Z3F;J3I+=x6F;var fieldTypes=Editor[J3I];function _buttonText(conf,text){var F5U="Choose file...";var L5U="Text";var H5U="div.upload butto";var B4I=H5U;B4I+=L1U.q1F;var Y4I=L1U.z1F;Y4I+=E9F;Y4I+=L1U.q1F;Y4I+=L1U.j1F;if(text===A7u||text===undefined){var Z3I=R6K;Z3I+=L5U;text=conf[Z3I]||F5U;}conf[e5U][Y4I](B4I)[q1u](text);}function _commonUpload(editor,conf,dropCallback,multiple){var F2U="oD";var L2U="ered";var H2U="div.rend";var w2U='over';var R2U='drop';var d2U='div.drop span';var s2U="DropText";var M2U="re to upload";var r2U="e he";var f2U="a fil";var j2U="Drag and drop ";var N2U="iv.dr";var z2U="gleave dragexit";var q2U="drago";var k2U="dragDrop";var I2U="FileReader";var T2U='<div class="drop"><span/></div>';var v2U='<div class="cell limitHide">';var x2U='multiple';var E2U='<input type="file" ';var m2U='<div class="row">';var C2U='<div class="eu_table">';var g2U='<div class="editor_upload">';var B2U="buttonInternal";var Y2U="s=\"cell upload limitHide\">";var Z5U="<button ";var J5U=" />";var X5U="learValue\">";var S5U="class=\"cell c";var V5U="on cl";var P5U="row second\"";var c5U="ll\">";var u5U="s=\"c";var p5U="ered\"/>";var t5U="<div class=\"rend";var Q5U="_enab";var n5U="lue button";var U5U="v.clearVa";var h5U="ype=file]";var G5U="ut[t";var F4I=e4F;F4I+=L1U.q1F;var L4I=w0u;L4I+=G5U;L4I+=h5U;var O4I=u1u;O4I+=U5U;O4I+=n5U;var j4I=Q5U;j4I+=i5U;var N4I=n9F;N4I+=E5u;N4I+=v2u;N4I+=K9F;var z4I=v0u;z4I+=e6u;var q4I=t5U;q4I+=p5U;var k4I=P0q;k4I+=u5U;k4I+=w1F;k4I+=c5U;var I4I=u0q;I4I+=x2m;I4I+=P5U;I4I+=g0u;var T4I=j7q;T4I+=V5U;T4I+=s0u;var v4I=K4u;v4I+=w4u;v4I+=S5U;v4I+=X5U;var x4I=v0u;x4I+=S9K;x4I+=V2u;var E4I=d0u;E4I+=g0u;var m4I=B2u;m4I+=J5U;var C4I=Z5U;C4I+=s4F;C4I+=M2m;C4I+=B2u;var g4I=P0q;g4I+=Y2U;var btnClass=editor[y8u][r7K][B2U];var container=$(g2U+C2U+m2U+g4I+C4I+btnClass+m4I+E2U+(multiple?x2U:p5u)+E4I+x4I+v4I+T4I+btnClass+k7K+M7u+M7u+I4I+v2U+T2U+M7u+k4I+q4I+z4I+M7u+M7u+M7u);conf[N4I]=container;conf[j4I]=o2u;_buttonText(conf);if(window[I2U]&&conf[k2U]!==y2u){var K4I=a2K;K4I+=p6F;var l4I=q2U;l4I+=g6F;l4I+=w1F;l4I+=X1F;var R4I=Z6m;R4I+=z2U;var b4I=e4F;b4I+=L1U.q1F;var s4I=L1U.j1F;s4I+=N2U;s4I+=k6F;var M4I=j2U;M4I+=f2U;M4I+=r2U;M4I+=M2U;var r4I=L1U.j1F;r4I+=X1F;r4I+=Q0K;r4I+=s2U;var f4I=L1U.z1F;f4I+=X4u;container[f4I](d2U)[b2U](conf[r4I]||M4I);var dragDrop=container[h7m](s4I);dragDrop[i7u](R2U,function(e){var K2U="dataTransfer";var a2U="originalEvent";var W2U="emoveClass";if(conf[l2U]){var d4I=X1F;d4I+=W2U;Editor[R6K](editor,conf,e[a2U][K2U][z6K],_buttonText,dropCallback);dragDrop[d4I](w2U);}return y2u;})[b4I](R4I,function(e){if(conf[l2U]){dragDrop[u8u](w2U);}return y2u;})[i7u](l4I,function(e){var W4I=D2U;W4I+=a9F;W4I+=K6F;W4I+=L1U.j1F;if(conf[W4I]){dragDrop[t8u](w2U);}return y2u;});editor[i7u](y2U,function(){var o2U='dragover.DTE_Upload drop.DTE_Upload';var a4I=e4F;a4I+=L1U.q1F;$(B4u)[a4I](o2U,function(e){return y2u;});})[i7u](K4I,function(){var A2U="_Upload";var O2U="ver.DTE_Upload drop.DTE";var w4I=q2U;w4I+=O2U;w4I+=A2U;$(B4u)[v6u](w4I);});}else{var o4I=H2U;o4I+=L2U;var y4I=b1F;y4I+=u2u;var D4I=L1U.q1F;D4I+=F2U;D4I+=e2U;container[t8u](D4I);container[z1u](container[y4I](o4I));}container[h7m](O4I)[i7u](t7u,function(){var h2U="loa";var G2U="cal";var H4I=G2U;H4I+=I3F;var A4I=G1F;A4I+=X3F;A4I+=h2U;A4I+=L1U.j1F;Editor[U2U][A4I][O7K][H4I](editor,conf,p5u);});container[h7m](L4I)[F4I](Z8q,function(){var e4I=f2u;e4I+=x6F;Editor[R6K](editor,conf,this[e4I],_buttonText,function(ids){var n2U='input[type=file]';var G4I=b1F;G4I+=u2u;dropCallback[v8u](editor,ids);container[G4I](n2U)[t0u](p5u);});});return container;}function _triggerChange(input){setTimeout(function(){var Q2U="gger";var U4I=i9F;U4I+=J9F;U4I+=S5K;U4I+=d5u;var h4I=K9F;h4I+=p7K;h4I+=Q2U;input[h4I](U4I,{editor:o2u,editorSet:o2u});},z8F);}var baseFieldType=$[Z0u](o2u,{},Editor[U9u][n4I],{get:function(conf){var i4I=g6F;i4I+=L1U.x1F;i4I+=I3F;var Q4I=n9F;Q4I+=E9F;Q4I+=i2U;Q4I+=D0u;return conf[Q4I][i4I]();},set:function(conf,val){conf[e5U][t0u](val);_triggerChange(conf[e5U]);},enable:function(conf){conf[e5U][t2U](G1q,y2u);},disable:function(conf){var t4I=X3F;t4I+=X1F;t4I+=k6F;conf[e5U][t4I](G1q,o2u);},canReturnSubmit:function(conf,node){return o2u;}});fieldTypes[p4I]={create:function(conf){var u2U="value";conf[p2U]=conf[u2U];return A7u;},get:function(conf){var u4I=n9F;u4I+=g6F;u4I+=S7u;return conf[u4I];},set:function(conf,val){conf[p2U]=val;}};fieldTypes[c2U]=$[c4I](o2u,{},baseFieldType,{create:function(conf){var V2U="don";var Y6I=P2U;Y6I+=i2U;Y6I+=G1F;Y6I+=K9F;var Z4I=L1U.x1F;Z4I+=K9F;Z4I+=K9F;Z4I+=X1F;var J4I=g1u;J4I+=V2U;J4I+=g8u;var X4I=R3F;X4I+=O0m;var S4I=S2U;S4I+=y3K;S4I+=L1U.j1F;var V4I=m7u;V4I+=V3u;var P4I=n9F;P4I+=B8q;conf[P4I]=$(X2U)[d8K]($[V4I]({id:Editor[S4I](conf[X9K]),type:X4I,readonly:J4I},conf[Z4I]||{}));return conf[Y6I][z8F];}});fieldTypes[b2U]=$[Z0u](o2u,{},baseFieldType,{create:function(conf){var E6I=n9F;E6I+=E9F;E6I+=G8q;var m6I=m6m;m6I+=X1F;var C6I=E9F;C6I+=L1U.j1F;var g6I=K5U;g6I+=L1U.j1F;var B6I=n9F;B6I+=w0u;B6I+=D0u;conf[B6I]=$(X2U)[d8K]($[g6I]({id:Editor[z7u](conf[C6I]),type:J2U},conf[m6I]||{}));return conf[E6I][z8F];}});fieldTypes[x6I]=$[Z0u](o2u,{},baseFieldType,{create:function(conf){var B0U="nput/>";var Y0U="<i";var Z2U="pas";var N6I=n9F;N6I+=B8q;var z6I=L1U.x1F;z6I+=H7K;z6I+=X1F;var q6I=Z2U;q6I+=x6F;q6I+=y3F;q6I+=g4K;var k6I=E9F;k6I+=L1U.j1F;var I6I=L1U.x1F;I6I+=K9F;I6I+=K9F;I6I+=X1F;var T6I=Y0U;T6I+=B0U;var v6I=P2U;v6I+=i2U;v6I+=G1F;v6I+=K9F;conf[v6I]=$(T6I)[I6I]($[Z0u]({id:Editor[z7u](conf[k6I]),type:q6I},conf[z6I]||{}));return conf[N6I][z8F];}});fieldTypes[g0U]=$[j6I](o2u,{},baseFieldType,{create:function(conf){var x0U="a/>";var E0U="tare";var m0U="fe";var b6I=L1U.x1F;b6I+=H7K;b6I+=X1F;var d6I=E9F;d6I+=L1U.j1F;var s6I=C0U;s6I+=m0U;s6I+=O6m;var M6I=w1F;M6I+=O0m;M6I+=w1F;M6I+=u2u;var r6I=v0u;r6I+=T5u;r6I+=E0U;r6I+=x0U;var f6I=v0U;f6I+=X3F;f6I+=G1F;f6I+=K9F;conf[f6I]=$(r6I)[d8K]($[M6I]({id:Editor[s6I](conf[d6I])},conf[b6I]||{}));return conf[e5U][z8F];},canReturnSubmit:function(conf,node){return y2u;}});fieldTypes[R6I]=$[l6I](o2u,{},baseFieldType,{_addOptions:function(conf,opts,append){var j0U="irs";var N0U="placeholderDisabled";var z0U="placeholderValue";var q0U="eholderDisabled";var k0U="_editor_va";var T0U="optio";var W6I=T0U;W6I+=V6F;var elOpts=conf[e5U][z8F][W6I];var countOffset=z8F;if(!append){var a6I=K6F;a6I+=L1U.q1F;a6I+=A3F;a6I+=w2u;elOpts[a6I]=z8F;if(conf[I0U]!==undefined){var D6I=k0U;D6I+=I3F;var w6I=O5U;w6I+=q4F;w6I+=L1U.q1F;var K6I=H1u;K6I+=q0U;var placeholderValue=conf[z0U]!==undefined?conf[z0U]:p5u;countOffset+=N8F;elOpts[z8F]=new Option(conf[I0U],placeholderValue);var disabled=conf[N0U]!==undefined?conf[K6I]:o2u;elOpts[z8F][w6I]=disabled;elOpts[z8F][P7u]=disabled;elOpts[z8F][D6I]=placeholderValue;}}else{countOffset=elOpts[D2u];}if(opts){var y6I=X3F;y6I+=L1U.x1F;y6I+=j0U;Editor[y6I](opts,conf[f0U],function(val,label,i,attr){var r0U="itor_val";var o6I=N4F;o6I+=r0U;var option=new Option(label,val);option[o6I]=val;if(attr){var O6I=L1U.x1F;O6I+=H7K;O6I+=X1F;$(option)[O6I](attr);}elOpts[i+countOffset]=option;});}},create:function(conf){var R0U="t/>";var d0U="ge.dt";var s0U="chan";var M0U="dOptions";var i6I=k6F;i6I+=h2u;i6I+=e4F;i6I+=V6F;var Q6I=n9F;Q6I+=q5m;Q6I+=M0U;var G6I=s0U;G6I+=d0U;G6I+=w1F;var e6I=e4F;e6I+=L1U.q1F;var F6I=m7u;F6I+=c3F;F6I+=L1U.j1F;var L6I=J5K;L6I+=C8m;var H6I=E7q;H6I+=I3F;H6I+=b0U;H6I+=R0U;var A6I=v0U;A6I+=v2u;A6I+=K9F;conf[A6I]=$(H6I)[L6I]($[F6I]({id:Editor[z7u](conf[X9K]),multiple:conf[l0U]===o2u},conf[d8K]||{}))[e6I](G6I,function(e,d){var h6I=Y6F;h6I+=e4F;h6I+=X1F;if(!d||!d[h6I]){var n6I=A3F;n6I+=w1F;n6I+=K9F;var U6I=W0U;U6I+=w1F;U6I+=i9F;U6I+=K9F;conf[a0U]=fieldTypes[U6I][n6I](conf);}});fieldTypes[K0U][Q6I](conf,conf[i6I]||conf[w0U]);return conf[e5U][z8F];},update:function(conf,options,append){var D0U="_addOp";var p6I=D0U;p6I+=g9K;var t6I=p6F;t6I+=I3F;t6I+=w1F;t6I+=x8K;fieldTypes[t6I][p6I](conf,options,append);var lastSet=conf[a0U];if(lastSet!==undefined){var c6I=x6F;c6I+=w1F;c6I+=K9F;var u6I=p6F;u6I+=I3F;u6I+=b0U;u6I+=K9F;fieldTypes[u6I][c6I](conf,lastSet,o2u);}_triggerChange(conf[e5U]);},get:function(conf){var A0U="separ";var O0U="epa";var y0U=":selected";var V6I=y1m;V6I+=i7u;V6I+=y0U;var P6I=L1U.z1F;P6I+=E9F;P6I+=u2u;var val=conf[e5U][P6I](V6I)[z9K](function(){return this[o0U];})[c5q]();if(conf[l0U]){var X6I=x6F;X6I+=O0U;X6I+=X4m;X6I+=g0q;var S6I=A0U;S6I+=k9F;return conf[S6I]?val[f0m](conf[X6I]):val;}return val[D2u]?val[z8F]:A7u;},set:function(conf,val,localUpdate){var n0U='option';var U0U="separat";var G0U="_lastS";var e0U="ltiple";var F0U="isA";var H0U="ip";var k5F=d9K;k5F+=A3F;k5F+=w2u;var I5F=C0K;I5F+=R9u;I5F+=H0U;I5F+=K6F;var v5F=w1F;v5F+=B6u;v5F+=J9F;var x5F=k6F;x5F+=K9F;x5F+=E9F;x5F+=i7u;var E5F=L1U.z1F;E5F+=E9F;E5F+=u2u;var m5F=L1U.z1F;m5F+=E9F;m5F+=L1U.q1F;m5F+=L1U.j1F;var C5F=v0U;C5F+=L0U;var g5F=K6F;g5F+=L1U.q1F;g5F+=v1K;g5F+=J9F;var B5F=F0U;B5F+=X1F;B5F+=F3F;var Z6I=u1F;Z6I+=G1F;Z6I+=e0U;if(!localUpdate){var J6I=G0U;J6I+=R5u;conf[J6I]=val;}if(conf[Z6I]&&conf[h0U]&&!$[p1u](val)){var Y5F=U0U;Y5F+=q5u;val=typeof val===F1u?val[P0m](conf[Y5F]):[];}else if(!$[B5F](val)){val=[val];}var i,len=val[g5F],found,allFound=y2u;var options=conf[C5F][m5F](n0U);conf[e5U][E5F](x5F)[v5F](function(){var Q0U="cted";var T5F=W0U;T5F+=w1F;T5F+=Q0U;found=y2u;for(i=z8F;i<len;i++){if(this[o0U]==val[i]){found=o2u;allFound=o2u;break;}}this[T5F]=found;});if(conf[I0U]&&!allFound&&!conf[I5F]&&options[k5F]){var q5F=K0U;q5F+=w1F;q5F+=L1U.j1F;options[z8F][q5F]=o2u;}if(!localUpdate){_triggerChange(conf[e5U]);}return allFound;},destroy:function(conf){var t0U=".d";var N5F=i0U;N5F+=t0U;N5F+=R3F;var z5F=S3u;z5F+=L1U.z1F;conf[e5U][z5F](N5F);}});fieldTypes[j5F]=$[Z0u](o2u,{},baseFieldType,{_addOptions:function(conf,opts,append){var val,label;var jqInput=conf[e5U];var offset=z8F;if(!append){var f5F=Z7q;f5F+=Y8q;jqInput[f5F]();}else{var M5F=I3F;M5F+=N1K;var r5F=V8q;r5F+=K9F;offset=$(r5F,jqInput)[M5F];}if(opts){Editor[f6K](opts,conf[f0U],function(val,label,i,attr){var Z0U='<input id="';var X0U="safeI";var S0U="type=\"checkbox\" />";var V0U="r=\"";var P0U="l fo";var c0U="<l";var u0U="af";var p0U="/label>";var w5F=g6F;w5F+=L1U.x1F;w5F+=s6K;var K5F=Y0u;K5F+=u1u;K5F+=J2u;var a5F=v0u;a5F+=p0U;var W5F=B2u;W5F+=g0u;var l5F=E9F;l5F+=L1U.j1F;var R5F=x6F;R5F+=u0U;R5F+=w1F;R5F+=O6m;var b5F=c0U;b5F+=O5q;b5F+=P0U;b5F+=V0U;var d5F=c0K;d5F+=S0U;var s5F=X0U;s5F+=L1U.j1F;jqInput[z1u](J0U+Z0U+Editor[s5F](conf[X9K])+Y7U+(i+offset)+d5F+b5F+Editor[R5F](conf[l5F])+Y7U+(i+offset)+W5F+label+a5F+K5F);$(B7U,jqInput)[d8K](w5F,val)[z8F][o0U]=val;if(attr){var D5F=L1U.x1F;D5F+=K9F;D5F+=K9F;D5F+=X1F;$(B7U,jqInput)[D5F](attr);}});}},create:function(conf){var g7U="kbox";var O5F=P2U;O5F+=L1U.q1F;O5F+=v2u;O5F+=K9F;var o5F=k6F;o5F+=h2u;o5F+=e4F;o5F+=V6F;var y5F=e9K;y5F+=b0U;y5F+=g7U;conf[e5U]=$(C7U);fieldTypes[y5F][m7U](conf,conf[o5F]||conf[w0U]);return conf[O5F][z8F];},get:function(conf){var q7U="ecte";var k7U="unsel";var I7U="unselectedValue";var E7U="t:";var e5F=A4F;e5F+=e4F;e5F+=E9F;e5F+=L1U.q1F;var H5F=I3F;H5F+=K2u;H5F+=w2u;var A5F=w0u;A5F+=G1F;A5F+=E7U;A5F+=x7U;var out=[];var selected=conf[e5U][h7m](A5F);if(selected[H5F]){selected[w1u](function(){var T7U="r_";var L5F=v7U;L5F+=T7U;L5F+=t0u;out[K1u](this[L5F]);});}else if(conf[I7U]!==undefined){var F5F=k7U;F5F+=q7U;F5F+=L1U.j1F;F5F+=r0u;out[K1u](conf[F5F]);}return conf[h0U]===undefined||conf[h0U]===A7u?out:out[e5F](conf[h0U]);},set:function(conf,val){var z7U='|';var n5F=z0u;n5F+=p7K;n5F+=L1U.q1F;n5F+=A3F;var U5F=E9F;U5F+=L1U.q1F;U5F+=v2u;U5F+=K9F;var h5F=L1U.z1F;h5F+=E5u;h5F+=L1U.j1F;var G5F=P2U;G5F+=G8q;var jqInputs=conf[G5F][h5F](U5F);if(!$[p1u](val)&&typeof val===n5F){val=val[P0m](conf[h0U]||z7U);}else if(!$[p1u](val)){val=[val];}var i,len=val[D2u],found;jqInputs[w1u](function(){var N7U="ecke";var Q5F=e9K;Q5F+=N7U;Q5F+=L1U.j1F;found=y2u;for(i=z8F;i<len;i++){if(this[o0U]==val[i]){found=o2u;break;}}this[Q5F]=found;});_triggerChange(jqInputs);},enable:function(conf){var t5F=E9F;t5F+=i2U;t5F+=D0u;var i5F=L1U.z1F;i5F+=E9F;i5F+=u2u;conf[e5U][i5F](t5F)[t2U](G1q,y2u);},disable:function(conf){var c5F=L1U.j1F;c5F+=z9u;c5F+=L1U.x1F;c5F+=j7U;var u5F=Q0q;u5F+=L1U.j1F;var p5F=n9F;p5F+=E9F;p5F+=G8q;conf[p5F][u5F](Z8u)[t2U](c5F,o2u);},update:function(conf,options,append){var f7U="eckb";var P5F=e9K;P5F+=f7U;P5F+=e4F;P5F+=P9u;var checkbox=fieldTypes[P5F];var currVal=checkbox[c7K](conf);checkbox[m7U](conf,options,append);checkbox[O7K](conf,currVal);}});fieldTypes[V5F]=$[S5F](o2u,{},baseFieldType,{_addOptions:function(conf,opts,append){var X5F=P2U;X5F+=i2U;X5F+=G1F;X5F+=K9F;var val,label;var jqInput=conf[X5F];var offset=z8F;if(!append){jqInput[I8K]();}else{var Z5F=d9K;Z5F+=A3F;Z5F+=K9F;Z5F+=J9F;var J5F=E5u;J5F+=L0U;offset=$(J5F,jqInput)[Z5F];}if(opts){Editor[f6K](opts,conf[f0U],function(val,label,i,attr){var W7U='<label for="';var l7U='" type="radio" name="';var R7U="t id=\"";var d7U="bel>";var s7U="last";var M7U=":";var r7U="r_va";var T2F=v7U;T2F+=r7U;T2F+=I3F;var v2F=g6F;v2F+=S7u;v2F+=G1F;v2F+=w1F;var x2F=B8q;x2F+=M7U;x2F+=s7U;var E2F=v0u;E2F+=f0u;E2F+=g6F;E2F+=g0u;var m2F=Y0u;m2F+=o1u;m2F+=d7U;var C2F=B2u;C2F+=g0u;var g2F=E9F;g2F+=L1U.j1F;var B2F=S2U;B2F+=O6m;var Y2F=b7U;Y2F+=G1F;Y2F+=R7U;jqInput[z1u](J0U+Y2F+Editor[z7u](conf[X9K])+Y7U+(i+offset)+l7U+conf[p2K]+k7K+W7U+Editor[B2F](conf[g2F])+Y7U+(i+offset)+C2F+label+m2F+E2F);$(x2F,jqInput)[d8K](v2F,val)[z8F][T2F]=val;if(attr){$(B7U,jqInput)[d8K](attr);}});}},create:function(conf){var K7U="ptions";var a7U="_addO";var k2F=e4F;k2F+=L1U.q1F;var I2F=a7U;I2F+=K7U;conf[e5U]=$(C7U);fieldTypes[w7U][I2F](conf,conf[w1m]||conf[w0U]);this[k2F](y2U,function(){var N2F=E9F;N2F+=L1U.q1F;N2F+=v2u;N2F+=K9F;var z2F=L1U.z1F;z2F+=E5u;z2F+=L1U.j1F;var q2F=n9F;q2F+=E5u;q2F+=L0U;conf[q2F][z2F](N2F)[w1u](function(){var y7U="cked";var D7U="preChe";var j2F=n9F;j2F+=D7U;j2F+=y7U;if(this[j2F]){this[x7U]=o2u;}});});return conf[e5U][z8F];},get:function(conf){var o7U="input:check";var f2F=o7U;f2F+=Z3K;var el=conf[e5U][h7m](f2F);return el[D2u]?el[z8F][o0U]:undefined;},set:function(conf,val){var F7U='input:checked';var b2F=L1U.z1F;b2F+=E9F;b2F+=L1U.q1F;b2F+=L1U.j1F;var d2F=n9F;d2F+=E5u;d2F+=X3F;d2F+=D0u;var r2F=E9F;r2F+=G8q;var that=this;conf[e5U][h7m](r2F)[w1u](function(){var L7U="ked";var H7U="Chec";var A7U="_pre";var O7U="_preChecked";this[O7U]=y2u;if(this[o0U]==val){this[x7U]=o2u;this[O7U]=o2u;}else{var s2F=A7U;s2F+=H7U;s2F+=L7U;var M2F=i9F;M2F+=b7K;M2F+=i9F;M2F+=L7U;this[M2F]=y2u;this[s2F]=y2u;}});_triggerChange(conf[d2F][b2F](F7U));},enable:function(conf){var W2F=u1u;W2F+=x6F;W2F+=n6m;W2F+=Z3K;var l2F=q3F;l2F+=e4F;l2F+=X3F;var R2F=P2U;R2F+=i2U;R2F+=G1F;R2F+=K9F;conf[R2F][h7m](Z8u)[l2F](W2F,y2u);},disable:function(conf){var K2F=X3F;K2F+=e2U;var a2F=P2U;a2F+=i2U;a2F+=G1F;a2F+=K9F;conf[a2F][h7m](Z8u)[K2F](G1q,o2u);},update:function(conf,options,append){var h7U='value';var G7U='[value="';var e7U="_addOpti";var H2F=w1F;H2F+=u0K;var A2F=I3F;A2F+=K2u;A2F+=w2u;var O2F=b1F;O2F+=R9u;O2F+=F9F;var o2F=E9F;o2F+=G8q;var y2F=n9F;y2F+=w0u;y2F+=D0u;var D2F=e7U;D2F+=u9F;var w2F=A3F;w2F+=w1F;w2F+=K9F;var radio=fieldTypes[w7U];var currVal=radio[w2F](conf);radio[D2F](conf,options,append);var inputs=conf[y2F][h7m](o2F);radio[O7K](conf,inputs[O2F](G7U+currVal+o5q)[A2F]?currVal:inputs[H2F](z8F)[d8K](h7U));}});fieldTypes[Q8q]=$[L2F](o2u,{},baseFieldType,{create:function(conf){var J7U='date';var P7U="RFC_2822";var c7U="eForm";var p7U="ddCla";var t7U="eryu";var i7U="jqu";var Q7U="ateForm";var U7U="saf";var Z2F=v0U;Z2F+=L0U;var h2F=E9F;h2F+=L1U.j1F;var G2F=U7U;G2F+=w1F;G2F+=O6m;var e2F=L1U.x1F;e2F+=K9F;e2F+=K9F;e2F+=X1F;var F2F=b7U;F2F+=D0u;F2F+=I2u;F2F+=P0K;conf[e5U]=$(F2F)[e2F]($[Z0u]({id:Editor[G2F](conf[h2F]),type:J2U},conf[d8K]));if($[n7U]){var i2F=L1U.j1F;i2F+=Q7U;i2F+=J5K;var Q2F=i7U;Q2F+=t7U;Q2F+=E9F;var n2F=L1U.x1F;n2F+=p7U;n2F+=x6F;n2F+=x6F;var U2F=u7U;U2F+=G1F;U2F+=K9F;conf[U2F][n2F](Q2F);if(!conf[i2F]){var t2F=L1U.j1F;t2F+=J5K;t2F+=c7U;t2F+=J5K;conf[t2F]=$[n7U][P7U];}setTimeout(function(){var X7U='#ui-datepicker-div';var S7U="dateImage";var V7U="dateFormat";var V2F=F9u;V2F+=x6F;var u2F=m7u;u2F+=V3u;var p2F=n9F;p2F+=B8q;$(conf[p2F])[n7U]($[u2F]({dateFormat:conf[V7U],buttonImage:conf[S7U],buttonImageOnly:o2u,onSelect:function(){var P2F=u9q;P2F+=G3u;var c2F=J3K;c2F+=A0K;conf[e5U][c2F]()[P2F]();}},conf[V2F]));$(X7U)[e7u](G7u,W8u);},b8F);}else{var J2F=e0u;J2F+=w1F;var X2F=L1U.x1F;X2F+=R5q;var S2F=v0U;S2F+=L0U;conf[S2F][X2F](J2F,J7U);}return conf[Z2F][z8F];},set:function(conf,val){var Y8U="setD";var Z7U='hasDatepicker';var B0F=A8u;B0F+=H8u;B0F+=x6F;var Y0F=n9F;Y0F+=B8q;if($[n7U]&&conf[Y0F][B0F](Z7U)){var g0F=Y8U;g0F+=S8K;conf[e5U][n7U](g0F,val)[i0U]();}else{var C0F=g6F;C0F+=L1U.x1F;C0F+=I3F;$(conf[e5U])[C0F](val);}},enable:function(conf){var g8U="_inpu";var B8U="epicker";if($[n7U]){var E0F=D1F;E0F+=B8U;var m0F=g8U;m0F+=K9F;conf[m0F][E0F](m9K);}else{var x0F=u1u;x0F+=x6F;x0F+=n6m;x0F+=Z3K;$(conf[e5U])[t2U](x0F,y2u);}},disable:function(conf){if($[n7U]){var v0F=n9F;v0F+=B8q;conf[v0F][n7U](S1K);}else{var I0F=v0m;I0F+=b9F;I0F+=i5U;var T0F=q3F;T0F+=k6F;$(conf[e5U])[T0F](I0F,o2u);}},owns:function(conf,node){var m8U='div.ui-datepicker-header';var C8U='div.ui-datepicker';var q0F=K6F;q0F+=L1U.q1F;q0F+=A3F;q0F+=w2u;var k0F=I3F;k0F+=c3F;k0F+=v1K;k0F+=J9F;return $(node)[l8u](C8U)[k0F]||$(node)[l8u](m8U)[q0F]?o2u:y2u;}});fieldTypes[z0F]=$[Z0u](o2u,{},baseFieldType,{create:function(conf){var j8U="eydo";var z8U="ut ";var q8U="feI";var k8U="_pick";var I8U="Time";var T8U="tetime";var v8U="eF";var x8U="yI";var E8U="_clos";var D0F=n9F;D0F+=w0u;D0F+=D0u;var w0F=E8U;w0F+=w1F;w0F+=n8u;var W0F=a8K;W0F+=x8U;W0F+=i2U;W0F+=D0u;var R0F=E8U;R0F+=v8U;R0F+=L1U.q1F;var b0F=L1U.j1F;b0F+=L1U.x1F;b0F+=T8U;var d0F=b9m;d0F+=R3F;d0F+=I8U;var s0F=k8U;s0F+=F9F;var M0F=L1U.x1F;M0F+=H7K;M0F+=X1F;var r0F=K9F;r0F+=w1F;r0F+=P9u;r0F+=K9F;var f0F=C0U;f0F+=q8U;f0F+=L1U.j1F;var j0F=v0u;j0F+=w0u;j0F+=z8U;j0F+=P0K;var N0F=n9F;N0F+=E5u;N0F+=L0U;conf[N0F]=$(j0F)[d8K]($[Z0u](o2u,{id:Editor[f0F](conf[X9K]),type:r0F},conf[M0F]));conf[s0F]=new Editor[d0F](conf[e5U],$[Z0u]({format:conf[V7q],i18n:this[A9u][b0F],onChange:function(){_triggerChange(conf[e5U]);}},conf[p7u]));conf[R0F]=function(){var l0F=J9F;l0F+=E9F;l0F+=L1U.j1F;l0F+=w1F;conf[N8U][l0F]();};if(conf[W0F]===y2u){var a0F=a9u;a0F+=j8U;a0F+=y3F;a0F+=L1U.q1F;conf[e5U][i7u](a0F,function(e){var r8U="efault";var f8U="eventD";var K0F=q3F;K0F+=f8U;K0F+=r8U;e[K0F]();});}this[i7u](p9u,conf[w0F]);return conf[D0F][z8F];},set:function(conf,val){var y0F=P2U;y0F+=G8q;conf[N8U][t0u](val);_triggerChange(conf[y0F]);},owns:function(conf,node){var s8U="owns";var M8U="ker";var o0F=n9F;o0F+=X3F;o0F+=G0K;o0F+=M8U;return conf[o0F][s8U](node);},errorMessage:function(conf,msg){var d8U="errorMsg";conf[N8U][d8U](msg);},destroy:function(conf){var R8U='keydown';var b8U="_closeFn";var L0F=e4F;L0F+=L1U.z1F;L0F+=L1U.z1F;var H0F=n9F;H0F+=V8q;H0F+=K9F;var A0F=i9F;A0F+=G6K;A0F+=x6F;A0F+=w1F;var O0F=e4F;O0F+=n1K;this[O0F](A0F,conf[b8U]);conf[H0F][L0F](R8U);conf[N8U][c1K]();},minDate:function(conf,min){var l8U="picker";var e0F=u1F;e0F+=E9F;e0F+=L1U.q1F;var F0F=n9F;F0F+=l8U;conf[F0F][e0F](min);},maxDate:function(conf,max){var G0F=u1F;G0F+=L1U.x1F;G0F+=P9u;conf[N8U][G0F](max);}});fieldTypes[R6K]=$[Z0u](o2u,{},baseFieldType,{create:function(conf){var editor=this;var container=_commonUpload(editor,conf,function(val){var w8U="Types";var K8U="plo";var a8U="tU";var W8U="pos";var i0F=y6K;i0F+=o1F;var Q0F=W8U;Q0F+=a8U;Q0F+=K8U;Q0F+=q5m;var n0F=i9F;n0F+=L1U.x1F;n0F+=U4F;var U0F=p6F;U0F+=K9F;var h0F=b1F;h0F+=w1F;h0F+=W1F;h0F+=w8U;Editor[h0F][R6K][U0F][n0F](editor,conf,val[z8F]);editor[w4K](Q0F,[conf[i0F],val[z8F]]);});return container;},get:function(conf){return conf[p2U];},set:function(conf,val){var n8U='noClear';var U8U="addCla";var h8U="clearText";var G8U="lear";var e8U='No file';var F8U="noFileText";var L8U="emp";var H8U="pan";var O8U='div.rendered';var o8U="div.clearValue ";var y8U="rText";var D8U="upload.ed";var m7F=n9F;m7F+=t0u;var C7F=D8U;C7F+=E9F;C7F+=z6F;C7F+=X1F;var g7F=n9F;g7F+=w0u;g7F+=G1F;g7F+=K9F;var J0F=s4F;J0F+=w1F;J0F+=L1U.x1F;J0F+=y8U;var X0F=o8U;X0F+=Q9u;conf[p2U]=val;var container=conf[e5U];if(conf[u9u]){var t0F=Q0q;t0F+=L1U.j1F;var rendered=container[t0F](O8U);if(conf[p2U]){var c0F=A8U;c0F+=I3F;var u0F=L1U.j1F;u0F+=z9u;u0F+=E6F;u0F+=k3F;var p0F=J9F;p0F+=j9u;p0F+=I3F;rendered[p0F](conf[u0F](conf[c0F]));}else{var S0F=v0u;S0F+=x6F;S0F+=H8U;S0F+=g0u;var V0F=L1U.x1F;V0F+=U6K;V0F+=u2u;var P0F=L8U;P0F+=R4F;rendered[P0F]()[V0F](S0F+(conf[F8U]||e8U)+l7u);}}var button=container[h7m](X0F);if(val&&conf[J0F]){var Y7F=F7u;Y7F+=B8K;Y7F+=G8U;var Z0F=K8u;Z0F+=I3F;Z0F+=Q8u;button[q1u](conf[h8U]);container[Z0F](Y7F);}else{var B7F=U8U;B7F+=d8u;container[B7F](n8U);}conf[g7F][h7m](Z8u)[T8m](C7F,[conf[m7F]]);},enable:function(conf){var v7F=Q8U;v7F+=K6F;v7F+=L1U.j1F;var x7F=w0u;x7F+=D0u;var E7F=L1U.z1F;E7F+=E9F;E7F+=L1U.q1F;E7F+=L1U.j1F;conf[e5U][E7F](x7F)[t2U](v7F,y2u);conf[l2U]=o2u;},disable:function(conf){var i8U="_en";var k7F=i8U;k7F+=I3q;var I7F=E9F;I7F+=L1U.q1F;I7F+=X3F;I7F+=D0u;var T7F=Q0q;T7F+=L1U.j1F;conf[e5U][T7F](I7F)[t2U](G1q,o2u);conf[k7F]=y2u;},canReturnSubmit:function(conf,node){return y2u;}});fieldTypes[q7F]=$[z7F](o2u,{},baseFieldType,{_showHide:function(conf){var V8U='div.limitHide';var c8U="limit";var u8U="limi";var p8U="mitLeft";var t8U="_li";var d7F=I3F;d7F+=c3F;d7F+=A3F;d7F+=w2u;var s7F=t8U;s7F+=p8U;var M7F=F7u;M7F+=L1U.q1F;M7F+=w1F;var r7F=u8U;r7F+=K9F;var f7F=K6F;f7F+=P6K;var j7F=n9F;j7F+=M6K;j7F+=I3F;var N7F=L1U.z1F;N7F+=E9F;N7F+=L1U.q1F;N7F+=L1U.j1F;if(!conf[c8U]){return;}conf[P8U][N7F](V8U)[e7u](G7u,conf[j7F][f7F]>=conf[r7F]?M7F:A1u);conf[s7F]=conf[c8U]-conf[p2U][d7F];},create:function(conf){var B1U='button.remove';var Y1U='multi';var D7F=e4F;D7F+=L1U.q1F;var editor=this;var container=_commonUpload(editor,conf,function(val){var J8U="cat";var X8U="dTy";var S8U="ostU";var w7F=n9F;w7F+=g6F;w7F+=L1U.x1F;w7F+=I3F;var K7F=X3F;K7F+=S8U;K7F+=Q6u;K7F+=Z6K;var a7F=A8U;a7F+=I3F;var W7F=i9F;W7F+=L1U.x1F;W7F+=I3F;W7F+=I3F;var l7F=x6F;l7F+=w1F;l7F+=K9F;var R7F=b1F;R7F+=R9F;R7F+=X8U;R7F+=K1F;var b7F=i9F;b7F+=i7u;b7F+=J8U;conf[p2U]=conf[p2U][b7F](val);Editor[R7F][Z8U][l7F][W7F](editor,conf,conf[a7F]);editor[w4K](K7F,[conf[p2K],conf[w7F]]);},o2u);container[t8u](Y1U)[D7F](t7u,B1U,function(e){var m1U='idx';var C1U="pagation";var g1U="stopPro";var A7F=i9F;A7F+=L1U.x1F;A7F+=I3F;A7F+=I3F;var O7F=A8U;O7F+=I3F;var o7F=L1U.j1F;o7F+=u0u;var y7F=g1U;y7F+=C1U;e[y7F]();var idx=$(this)[o7F](m1U);conf[O7F][F8K](idx,N8F);Editor[U2U][Z8U][O7K][A7F](editor,conf,conf[p2U]);});conf[P8U]=container;return container;},get:function(conf){var H7F=E1U;H7F+=S7u;return conf[H7F];},set:function(conf,val){var K1U="_showHide";var a1U='No files';var W1U="<span";var l1U="eTex";var R1U="noFil";var j1U="<u";var N1U="ndered";var z1U="div.re";var q1U="ay as a value";var k1U="n arr";var I1U="Upload collections must have a";var T1U="dler";var v1U="riggerHan";var x1U="ad.";var g8F=E1U;g8F+=L1U.x1F;g8F+=I3F;var B8F=W5U;B8F+=x1U;B8F+=Y6F;B8F+=q5u;var Y8F=K9F;Y8F+=v1U;Y8F+=T1U;var Z7F=E5u;Z7F+=v2u;Z7F+=K9F;var J7F=L1U.z1F;J7F+=E9F;J7F+=L1U.q1F;J7F+=L1U.j1F;var X7F=P2U;X7F+=G8q;var e7F=u7U;e7F+=D0u;var L7F=M6m;L7F+=F3F;if(!val){val=[];}if(!$[L7F](val)){var F7F=I1U;F7F+=k1U;F7F+=q1U;throw F7F;}conf[p2U]=val;var that=this;var container=conf[e7F];if(conf[u9u]){var U7F=I3F;U7F+=N1K;var h7F=w1F;h7F+=C4m;h7F+=R4F;var G7F=z1U;G7F+=N1U;var rendered=container[h7m](G7F)[h7F]();if(val[U7F]){var Q7F=B8u;Q7F+=w1F;Q7F+=b6u;var n7F=j1U;n7F+=I3F;n7F+=P0K;var list=$(n7F)[Q7F](rendered);$[w1u](val,function(i,file){var b1U='</li>';var d1U='">&times;</button>';var s1U="n class=";var M1U="<butto";var r1U="\" data-idx=\"";var f1U=" remo";var P7F=f1U;P7F+=Y8K;P7F+=r1U;var c7F=F4K;c7F+=e4K;c7F+=x6F;var u7F=I2u;u7F+=M1U;u7F+=s1U;u7F+=B2u;var p7F=L1U.j1F;p7F+=z9u;p7F+=E6F;p7F+=k3F;var t7F=v0u;t7F+=I3F;t7F+=E9F;t7F+=g0u;var i7F=k3u;i7F+=L1U.j1F;list[i7F](t7F+conf[p7F](file,i)+u7F+that[c7F][r7K][Q9u]+P7F+i+d1U+b1U);});}else{var S7F=R1U;S7F+=l1U;S7F+=K9F;var V7F=W1U;V7F+=g0u;rendered[z1u](V7F+(conf[S7F]||a1U)+l7u);}}Editor[U2U][Z8U][K1U](conf);conf[X7F][J7F](Z7F)[Y8F](B8F,[conf[g8F]]);},enable:function(conf){var m8F=X3F;m8F+=t4F;m8F+=X3F;var C8F=L1U.z1F;C8F+=E9F;C8F+=L1U.q1F;C8F+=L1U.j1F;conf[e5U][C8F](Z8u)[m8F](G1q,y2u);conf[l2U]=o2u;},disable:function(conf){var v8F=D2U;v8F+=j7U;var x8F=Q8U;x8F+=i5U;var E8F=X3F;E8F+=X1F;E8F+=k6F;conf[e5U][h7m](Z8u)[E8F](x8F,o2u);conf[v8F]=y2u;},canReturnSubmit:function(conf,node){return y2u;}});}());if(DataTable[m7u][w1U]){var T8F=c1F;T8F+=P1F;$[Z0u](Editor[T8F],DataTable[m7u][w1U]);}DataTable[m7u][w1U]=Editor[I8F];Editor[k8F]={};Editor[E8u][D1U]=Y2u;Editor[q8F]=y1U;return Editor;}));

/*! Responsive 2.2.2
 * 2014-2018 SpryMedia Ltd - datatables.net/license
 */

/**
 * @summary     Responsive
 * @description Responsive tables plug-in for DataTables
 * @version     2.2.2
 * @file        dataTables.responsive.js
 * @author      SpryMedia Ltd (www.sprymedia.co.uk)
 * @contact     www.sprymedia.co.uk/contact
 * @copyright   Copyright 2014-2018 SpryMedia Ltd.
 *
 * This source file is free software, available under the following license:
 *   MIT license - http://datatables.net/license/mit
 *
 * This source file is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
 * or FITNESS FOR A PARTICULAR PURPOSE. See the license files for details.
 *
 * For details please refer to: http://www.datatables.net
 */
(function( factory ){
	if ( typeof define === 'function' && define.amd ) {
		// AMD
		define( ['jquery', 'datatables.net'], function ( $ ) {
			return factory( $, window, document );
		} );
	}
	else if ( typeof exports === 'object' ) {
		// CommonJS
		module.exports = function (root, $) {
			if ( ! root ) {
				root = window;
			}

			if ( ! $ || ! $.fn.dataTable ) {
				$ = require('datatables.net')(root, $).$;
			}

			return factory( $, root, root.document );
		};
	}
	else {
		// Browser
		factory( jQuery, window, document );
	}
}(function( $, window, document, undefined ) {
'use strict';
var DataTable = $.fn.dataTable;


/**
 * Responsive is a plug-in for the DataTables library that makes use of
 * DataTables' ability to change the visibility of columns, changing the
 * visibility of columns so the displayed columns fit into the table container.
 * The end result is that complex tables will be dynamically adjusted to fit
 * into the viewport, be it on a desktop, tablet or mobile browser.
 *
 * Responsive for DataTables has two modes of operation, which can used
 * individually or combined:
 *
 * * Class name based control - columns assigned class names that match the
 *   breakpoint logic can be shown / hidden as required for each breakpoint.
 * * Automatic control - columns are automatically hidden when there is no
 *   room left to display them. Columns removed from the right.
 *
 * In additional to column visibility control, Responsive also has built into
 * options to use DataTables' child row display to show / hide the information
 * from the table that has been hidden. There are also two modes of operation
 * for this child row display:
 *
 * * Inline - when the control element that the user can use to show / hide
 *   child rows is displayed inside the first column of the table.
 * * Column - where a whole column is dedicated to be the show / hide control.
 *
 * Initialisation of Responsive is performed by:
 *
 * * Adding the class `responsive` or `dt-responsive` to the table. In this case
 *   Responsive will automatically be initialised with the default configuration
 *   options when the DataTable is created.
 * * Using the `responsive` option in the DataTables configuration options. This
 *   can also be used to specify the configuration options, or simply set to
 *   `true` to use the defaults.
 *
 *  @class
 *  @param {object} settings DataTables settings object for the host table
 *  @param {object} [opts] Configuration options
 *  @requires jQuery 1.7+
 *  @requires DataTables 1.10.3+
 *
 *  @example
 *      $('#example').DataTable( {
 *        responsive: true
 *      } );
 *    } );
 */
var Responsive = function ( settings, opts ) {
	// Sanity check that we are using DataTables 1.10 or newer
	if ( ! DataTable.versionCheck || ! DataTable.versionCheck( '1.10.10' ) ) {
		throw 'DataTables Responsive requires DataTables 1.10.10 or newer';
	}

	this.s = {
		dt: new DataTable.Api( settings ),
		columns: [],
		current: []
	};

	// Check if responsive has already been initialised on this table
	if ( this.s.dt.settings()[0].responsive ) {
		return;
	}

	// details is an object, but for simplicity the user can give it as a string
	// or a boolean
	if ( opts && typeof opts.details === 'string' ) {
		opts.details = { type: opts.details };
	}
	else if ( opts && opts.details === false ) {
		opts.details = { type: false };
	}
	else if ( opts && opts.details === true ) {
		opts.details = { type: 'inline' };
	}

	this.c = $.extend( true, {}, Responsive.defaults, DataTable.defaults.responsive, opts );
	settings.responsive = this;
	this._constructor();
};

$.extend( Responsive.prototype, {
	/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
	 * Constructor
	 */

	/**
	 * Initialise the Responsive instance
	 *
	 * @private
	 */
	_constructor: function ()
	{
		var that = this;
		var dt = this.s.dt;
		var dtPrivateSettings = dt.settings()[0];
		var oldWindowWidth = $(window).width();

		dt.settings()[0]._responsive = this;

		// Use DataTables' throttle function to avoid processor thrashing on
		// resize
		$(window).on( 'resize.dtr orientationchange.dtr', DataTable.util.throttle( function () {
			// iOS has a bug whereby resize can fire when only scrolling
			// See: http://stackoverflow.com/questions/8898412
			var width = $(window).width();

			if ( width !== oldWindowWidth ) {
				that._resize();
				oldWindowWidth = width;
			}
		} ) );

		// DataTables doesn't currently trigger an event when a row is added, so
		// we need to hook into its private API to enforce the hidden rows when
		// new data is added
		dtPrivateSettings.oApi._fnCallbackReg( dtPrivateSettings, 'aoRowCreatedCallback', function (tr, data, idx) {
			if ( $.inArray( false, that.s.current ) !== -1 ) {
				$('>td, >th', tr).each( function ( i ) {
					var idx = dt.column.index( 'toData', i );

					if ( that.s.current[idx] === false ) {
						$(this).css('display', 'none');
					}
				} );
			}
		} );

		// Destroy event handler
		dt.on( 'destroy.dtr', function () {
			dt.off( '.dtr' );
			$( dt.table().body() ).off( '.dtr' );
			$(window).off( 'resize.dtr orientationchange.dtr' );

			// Restore the columns that we've hidden
			$.each( that.s.current, function ( i, val ) {
				if ( val === false ) {
					that._setColumnVis( i, true );
				}
			} );
		} );

		// Reorder the breakpoints array here in case they have been added out
		// of order
		this.c.breakpoints.sort( function (a, b) {
			return a.width < b.width ? 1 :
				a.width > b.width ? -1 : 0;
		} );

		this._classLogic();
		this._resizeAuto();

		// Details handler
		var details = this.c.details;

		if ( details.type !== false ) {
			that._detailsInit();

			// DataTables will trigger this event on every column it shows and
			// hides individually
			dt.on( 'column-visibility.dtr', function () {
				// Use a small debounce to allow multiple columns to be set together
				if ( that._timer ) {
					clearTimeout( that._timer );
				}

				that._timer = setTimeout( function () {
					that._timer = null;

					that._classLogic();
					that._resizeAuto();
					that._resize();

					that._redrawChildren();
				}, 100 );
			} );

			// Redraw the details box on each draw which will happen if the data
			// has changed. This is used until DataTables implements a native
			// `updated` event for rows
			dt.on( 'draw.dtr', function () {
				that._redrawChildren();
			} );

			$(dt.table().node()).addClass( 'dtr-'+details.type );
		}

		dt.on( 'column-reorder.dtr', function (e, settings, details) {
			that._classLogic();
			that._resizeAuto();
			that._resize();
		} );

		// Change in column sizes means we need to calc
		dt.on( 'column-sizing.dtr', function () {
			that._resizeAuto();
			that._resize();
		});

		// On Ajax reload we want to reopen any child rows which are displayed
		// by responsive
		dt.on( 'preXhr.dtr', function () {
			var rowIds = [];
			dt.rows().every( function () {
				if ( this.child.isShown() ) {
					rowIds.push( this.id(true) );
				}
			} );

			dt.one( 'draw.dtr', function () {
				that._resizeAuto();
				that._resize();

				dt.rows( rowIds ).every( function () {
					that._detailsDisplay( this, false );
				} );
			} );
		});

		dt.on( 'init.dtr', function (e, settings, details) {
			that._resizeAuto();
			that._resize();

			// If columns were hidden, then DataTables needs to adjust the
			// column sizing
			if ( $.inArray( false, that.s.current ) ) {
				dt.columns.adjust();
			}
		} );

		// First pass - draw the table for the current viewport size
		this._resize();
	},


	/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
	 * Private methods
	 */

	/**
	 * Calculate the visibility for the columns in a table for a given
	 * breakpoint. The result is pre-determined based on the class logic if
	 * class names are used to control all columns, but the width of the table
	 * is also used if there are columns which are to be automatically shown
	 * and hidden.
	 *
	 * @param  {string} breakpoint Breakpoint name to use for the calculation
	 * @return {array} Array of boolean values initiating the visibility of each
	 *   column.
	 *  @private
	 */
	_columnsVisiblity: function ( breakpoint )
	{
		var dt = this.s.dt;
		var columns = this.s.columns;
		var i, ien;

		// Create an array that defines the column ordering based first on the
		// column's priority, and secondly the column index. This allows the
		// columns to be removed from the right if the priority matches
		var order = columns
			.map( function ( col, idx ) {
				return {
					columnIdx: idx,
					priority: col.priority
				};
			} )
			.sort( function ( a, b ) {
				if ( a.priority !== b.priority ) {
					return a.priority - b.priority;
				}
				return a.columnIdx - b.columnIdx;
			} );

		// Class logic - determine which columns are in this breakpoint based
		// on the classes. If no class control (i.e. `auto`) then `-` is used
		// to indicate this to the rest of the function
		var display = $.map( columns, function ( col, i ) {
			if ( dt.column(i).visible() === false ) {
				return 'not-visible';
			}
			return col.auto && col.minWidth === null ?
				false :
				col.auto === true ?
					'-' :
					$.inArray( breakpoint, col.includeIn ) !== -1;
		} );

		// Auto column control - first pass: how much width is taken by the
		// ones that must be included from the non-auto columns
		var requiredWidth = 0;
		for ( i=0, ien=display.length ; i<ien ; i++ ) {
			if ( display[i] === true ) {
				requiredWidth += columns[i].minWidth;
			}
		}

		// Second pass, use up any remaining width for other columns. For
		// scrolling tables we need to subtract the width of the scrollbar. It
		// may not be requires which makes this sub-optimal, but it would
		// require another full redraw to make complete use of those extra few
		// pixels
		var scrolling = dt.settings()[0].oScroll;
		var bar = scrolling.sY || scrolling.sX ? scrolling.iBarWidth : 0;
		var widthAvailable = dt.table().container().offsetWidth - bar;
		var usedWidth = widthAvailable - requiredWidth;

		// Control column needs to always be included. This makes it sub-
		// optimal in terms of using the available with, but to stop layout
		// thrashing or overflow. Also we need to account for the control column
		// width first so we know how much width is available for the other
		// columns, since the control column might not be the first one shown
		for ( i=0, ien=display.length ; i<ien ; i++ ) {
			if ( columns[i].control ) {
				usedWidth -= columns[i].minWidth;
			}
		}

		// Allow columns to be shown (counting by priority and then right to
		// left) until we run out of room
		var empty = false;
		for ( i=0, ien=order.length ; i<ien ; i++ ) {
			var colIdx = order[i].columnIdx;

			if ( display[colIdx] === '-' && ! columns[colIdx].control && columns[colIdx].minWidth ) {
				// Once we've found a column that won't fit we don't let any
				// others display either, or columns might disappear in the
				// middle of the table
				if ( empty || usedWidth - columns[colIdx].minWidth < 0 ) {
					empty = true;
					display[colIdx] = false;
				}
				else {
					display[colIdx] = true;
				}

				usedWidth -= columns[colIdx].minWidth;
			}
		}

		// Determine if the 'control' column should be shown (if there is one).
		// This is the case when there is a hidden column (that is not the
		// control column). The two loops look inefficient here, but they are
		// trivial and will fly through. We need to know the outcome from the
		// first , before the action in the second can be taken
		var showControl = false;

		for ( i=0, ien=columns.length ; i<ien ; i++ ) {
			if ( ! columns[i].control && ! columns[i].never && display[i] === false ) {
				showControl = true;
				break;
			}
		}

		for ( i=0, ien=columns.length ; i<ien ; i++ ) {
			if ( columns[i].control ) {
				display[i] = showControl;
			}

			// Replace not visible string with false from the control column detection above
			if ( display[i] === 'not-visible' ) {
				display[i] = false;
			}
		}

		// Finally we need to make sure that there is at least one column that
		// is visible
		if ( $.inArray( true, display ) === -1 ) {
			display[0] = true;
		}

		return display;
	},


	/**
	 * Create the internal `columns` array with information about the columns
	 * for the table. This includes determining which breakpoints the column
	 * will appear in, based upon class names in the column, which makes up the
	 * vast majority of this method.
	 *
	 * @private
	 */
	_classLogic: function ()
	{
		var that = this;
		var calc = {};
		var breakpoints = this.c.breakpoints;
		var dt = this.s.dt;
		var columns = dt.columns().eq(0).map( function (i) {
			var column = this.column(i);
			var className = column.header().className;
			var priority = dt.settings()[0].aoColumns[i].responsivePriority;

			if ( priority === undefined ) {
				var dataPriority = $(column.header()).data('priority');

				priority = dataPriority !== undefined ?
					dataPriority * 1 :
					10000;
			}

			return {
				className: className,
				includeIn: [],
				auto:      false,
				control:   false,
				never:     className.match(/\bnever\b/) ? true : false,
				priority:  priority
			};
		} );

		// Simply add a breakpoint to `includeIn` array, ensuring that there are
		// no duplicates
		var add = function ( colIdx, name ) {
			var includeIn = columns[ colIdx ].includeIn;

			if ( $.inArray( name, includeIn ) === -1 ) {
				includeIn.push( name );
			}
		};

		var column = function ( colIdx, name, operator, matched ) {
			var size, i, ien;

			if ( ! operator ) {
				columns[ colIdx ].includeIn.push( name );
			}
			else if ( operator === 'max-' ) {
				// Add this breakpoint and all smaller
				size = that._find( name ).width;

				for ( i=0, ien=breakpoints.length ; i<ien ; i++ ) {
					if ( breakpoints[i].width <= size ) {
						add( colIdx, breakpoints[i].name );
					}
				}
			}
			else if ( operator === 'min-' ) {
				// Add this breakpoint and all larger
				size = that._find( name ).width;

				for ( i=0, ien=breakpoints.length ; i<ien ; i++ ) {
					if ( breakpoints[i].width >= size ) {
						add( colIdx, breakpoints[i].name );
					}
				}
			}
			else if ( operator === 'not-' ) {
				// Add all but this breakpoint
				for ( i=0, ien=breakpoints.length ; i<ien ; i++ ) {
					if ( breakpoints[i].name.indexOf( matched ) === -1 ) {
						add( colIdx, breakpoints[i].name );
					}
				}
			}
		};

		// Loop over each column and determine if it has a responsive control
		// class
		columns.each( function ( col, i ) {
			var classNames = col.className.split(' ');
			var hasClass = false;

			// Split the class name up so multiple rules can be applied if needed
			for ( var k=0, ken=classNames.length ; k<ken ; k++ ) {
				var className = $.trim( classNames[k] );

				if ( className === 'all' ) {
					// Include in all
					hasClass = true;
					col.includeIn = $.map( breakpoints, function (a) {
						return a.name;
					} );
					return;
				}
				else if ( className === 'none' || col.never ) {
					// Include in none (default) and no auto
					hasClass = true;
					return;
				}
				else if ( className === 'control' ) {
					// Special column that is only visible, when one of the other
					// columns is hidden. This is used for the details control
					hasClass = true;
					col.control = true;
					return;
				}

				$.each( breakpoints, function ( j, breakpoint ) {
					// Does this column have a class that matches this breakpoint?
					var brokenPoint = breakpoint.name.split('-');
					var re = new RegExp( '(min\\-|max\\-|not\\-)?('+brokenPoint[0]+')(\\-[_a-zA-Z0-9])?' );
					var match = className.match( re );

					if ( match ) {
						hasClass = true;

						if ( match[2] === brokenPoint[0] && match[3] === '-'+brokenPoint[1] ) {
							// Class name matches breakpoint name fully
							column( i, breakpoint.name, match[1], match[2]+match[3] );
						}
						else if ( match[2] === brokenPoint[0] && ! match[3] ) {
							// Class name matched primary breakpoint name with no qualifier
							column( i, breakpoint.name, match[1], match[2] );
						}
					}
				} );
			}

			// If there was no control class, then automatic sizing is used
			if ( ! hasClass ) {
				col.auto = true;
			}
		} );

		this.s.columns = columns;
	},


	/**
	 * Show the details for the child row
	 *
	 * @param  {DataTables.Api} row    API instance for the row
	 * @param  {boolean}        update Update flag
	 * @private
	 */
	_detailsDisplay: function ( row, update )
	{
		var that = this;
		var dt = this.s.dt;
		var details = this.c.details;

		if ( details && details.type !== false ) {
			var res = details.display( row, update, function () {
				return details.renderer(
					dt, row[0], that._detailsObj(row[0])
				);
			} );

			if ( res === true || res === false ) {
				$(dt.table().node()).triggerHandler( 'responsive-display.dt', [dt, row, res, update] );
			}
		}
	},


	/**
	 * Initialisation for the details handler
	 *
	 * @private
	 */
	_detailsInit: function ()
	{
		var that    = this;
		var dt      = this.s.dt;
		var details = this.c.details;

		// The inline type always uses the first child as the target
		if ( details.type === 'inline' ) {
			details.target = 'td:first-child, th:first-child';
		}

		// Keyboard accessibility
		dt.on( 'draw.dtr', function () {
			that._tabIndexes();
		} );
		that._tabIndexes(); // Initial draw has already happened

		$( dt.table().body() ).on( 'keyup.dtr', 'td, th', function (e) {
			if ( e.keyCode === 13 && $(this).data('dtr-keyboard') ) {
				$(this).click();
			}
		} );

		// type.target can be a string jQuery selector or a column index
		var target   = details.target;
		var selector = typeof target === 'string' ? target : 'td, th';

		// Click handler to show / hide the details rows when they are available
		$( dt.table().body() )
			.on( 'click.dtr mousedown.dtr mouseup.dtr', selector, function (e) {
				// If the table is not collapsed (i.e. there is no hidden columns)
				// then take no action
				if ( ! $(dt.table().node()).hasClass('collapsed' ) ) {
					return;
				}

				// Check that the row is actually a DataTable's controlled node
				if ( $.inArray( $(this).closest('tr').get(0), dt.rows().nodes().toArray() ) === -1 ) {
					return;
				}

				// For column index, we determine if we should act or not in the
				// handler - otherwise it is already okay
				if ( typeof target === 'number' ) {
					var targetIdx = target < 0 ?
						dt.columns().eq(0).length + target :
						target;

					if ( dt.cell( this ).index().column !== targetIdx ) {
						return;
					}
				}

				// $().closest() includes itself in its check
				var row = dt.row( $(this).closest('tr') );

				// Check event type to do an action
				if ( e.type === 'click' ) {
					// The renderer is given as a function so the caller can execute it
					// only when they need (i.e. if hiding there is no point is running
					// the renderer)
					that._detailsDisplay( row, false );
				}
				else if ( e.type === 'mousedown' ) {
					// For mouse users, prevent the focus ring from showing
					$(this).css('outline', 'none');
				}
				else if ( e.type === 'mouseup' ) {
					// And then re-allow at the end of the click
					$(this).blur().css('outline', '');
				}
			} );
	},


	/**
	 * Get the details to pass to a renderer for a row
	 * @param  {int} rowIdx Row index
	 * @private
	 */
	_detailsObj: function ( rowIdx )
	{
		var that = this;
		var dt = this.s.dt;

		return $.map( this.s.columns, function( col, i ) {
			// Never and control columns should not be passed to the renderer
			if ( col.never || col.control ) {
				return;
			}

			return {
				title:       dt.settings()[0].aoColumns[ i ].sTitle,
				data:        dt.cell( rowIdx, i ).render( that.c.orthogonal ),
				hidden:      dt.column( i ).visible() && !that.s.current[ i ],
				columnIndex: i,
				rowIndex:    rowIdx
			};
		} );
	},


	/**
	 * Find a breakpoint object from a name
	 *
	 * @param  {string} name Breakpoint name to find
	 * @return {object}      Breakpoint description object
	 * @private
	 */
	_find: function ( name )
	{
		var breakpoints = this.c.breakpoints;

		for ( var i=0, ien=breakpoints.length ; i<ien ; i++ ) {
			if ( breakpoints[i].name === name ) {
				return breakpoints[i];
			}
		}
	},


	/**
	 * Re-create the contents of the child rows as the display has changed in
	 * some way.
	 *
	 * @private
	 */
	_redrawChildren: function ()
	{
		var that = this;
		var dt = this.s.dt;

		dt.rows( {page: 'current'} ).iterator( 'row', function ( settings, idx ) {
			var row = dt.row( idx );

			that._detailsDisplay( dt.row( idx ), true );
		} );
	},


	/**
	 * Alter the table display for a resized viewport. This involves first
	 * determining what breakpoint the window currently is in, getting the
	 * column visibilities to apply and then setting them.
	 *
	 * @private
	 */
	_resize: function ()
	{
		var that = this;
		var dt = this.s.dt;
		var width = $(window).width();
		var breakpoints = this.c.breakpoints;
		var breakpoint = breakpoints[0].name;
		var columns = this.s.columns;
		var i, ien;
		var oldVis = this.s.current.slice();

		// Determine what breakpoint we are currently at
		for ( i=breakpoints.length-1 ; i>=0 ; i-- ) {
			if ( width <= breakpoints[i].width ) {
				breakpoint = breakpoints[i].name;
				break;
			}
		}
		
		// Show the columns for that break point
		var columnsVis = this._columnsVisiblity( breakpoint );
		this.s.current = columnsVis;

		// Set the class before the column visibility is changed so event
		// listeners know what the state is. Need to determine if there are
		// any columns that are not visible but can be shown
		var collapsedClass = false;
		for ( i=0, ien=columns.length ; i<ien ; i++ ) {
			if ( columnsVis[i] === false && ! columns[i].never && ! columns[i].control && ! dt.column(i).visible() === false ) {
				collapsedClass = true;
				break;
			}
		}

		$( dt.table().node() ).toggleClass( 'collapsed', collapsedClass );

		var changed = false;
		var visible = 0;

		dt.columns().eq(0).each( function ( colIdx, i ) {
			if ( columnsVis[i] === true ) {
				visible++;
			}

			if ( columnsVis[i] !== oldVis[i] ) {
				changed = true;
				that._setColumnVis( colIdx, columnsVis[i] );
			}
		} );

		if ( changed ) {
			this._redrawChildren();

			// Inform listeners of the change
			$(dt.table().node()).trigger( 'responsive-resize.dt', [dt, this.s.current] );

			// If no records, update the "No records" display element
			if ( dt.page.info().recordsDisplay === 0 ) {
				$('td', dt.table().body()).eq(0).attr('colspan', visible);
			}
		}
	},


	/**
	 * Determine the width of each column in the table so the auto column hiding
	 * has that information to work with. This method is never going to be 100%
	 * perfect since column widths can change slightly per page, but without
	 * seriously compromising performance this is quite effective.
	 *
	 * @private
	 */
	_resizeAuto: function ()
	{
		var dt = this.s.dt;
		var columns = this.s.columns;

		// Are we allowed to do auto sizing?
		if ( ! this.c.auto ) {
			return;
		}

		// Are there any columns that actually need auto-sizing, or do they all
		// have classes defined
		if ( $.inArray( true, $.map( columns, function (c) { return c.auto; } ) ) === -1 ) {
			return;
		}

		// Need to restore all children. They will be reinstated by a re-render
		if ( ! $.isEmptyObject( _childNodeStore ) ) {
			$.each( _childNodeStore, function ( key ) {
				var idx = key.split('-');

				_childNodesRestore( dt, idx[0]*1, idx[1]*1 );
			} );
		}

		// Clone the table with the current data in it
		var tableWidth   = dt.table().node().offsetWidth;
		var columnWidths = dt.columns;
		var clonedTable  = dt.table().node().cloneNode( false );
		var clonedHeader = $( dt.table().header().cloneNode( false ) ).appendTo( clonedTable );
		var clonedBody   = $( dt.table().body() ).clone( false, false ).empty().appendTo( clonedTable ); // use jQuery because of IE8

		// Header
		var headerCells = dt.columns()
			.header()
			.filter( function (idx) {
				return dt.column(idx).visible();
			} )
			.to$()
			.clone( false )
			.css( 'display', 'table-cell' )
			.css( 'min-width', 0 );

		// Body rows - we don't need to take account of DataTables' column
		// visibility since we implement our own here (hence the `display` set)
		$(clonedBody)
			.append( $(dt.rows( { page: 'current' } ).nodes()).clone( false ) )
			.find( 'th, td' ).css( 'display', '' );

		// Footer
		var footer = dt.table().footer();
		if ( footer ) {
			var clonedFooter = $( footer.cloneNode( false ) ).appendTo( clonedTable );
			var footerCells = dt.columns()
				.footer()
				.filter( function (idx) {
					return dt.column(idx).visible();
				} )
				.to$()
				.clone( false )
				.css( 'display', 'table-cell' );

			$('<tr/>')
				.append( footerCells )
				.appendTo( clonedFooter );
		}

		$('<tr/>')
			.append( headerCells )
			.appendTo( clonedHeader );

		// In the inline case extra padding is applied to the first column to
		// give space for the show / hide icon. We need to use this in the
		// calculation
		if ( this.c.details.type === 'inline' ) {
			$(clonedTable).addClass( 'dtr-inline collapsed' );
		}
		
		// It is unsafe to insert elements with the same name into the DOM
		// multiple times. For example, cloning and inserting a checked radio
		// clears the chcecked state of the original radio.
		$( clonedTable ).find( '[name]' ).removeAttr( 'name' );

		// A position absolute table would take the table out of the flow of
		// our container element, bypassing the height and width (Scroller)
		$( clonedTable ).css( 'position', 'relative' )
		
		var inserted = $('<div/>')
			.css( {
				width: 1,
				height: 1,
				overflow: 'hidden',
				clear: 'both'
			} )
			.append( clonedTable );

		inserted.insertBefore( dt.table().node() );

		// The cloned header now contains the smallest that each column can be
		headerCells.each( function (i) {
			var idx = dt.column.index( 'fromVisible', i );
			columns[ idx ].minWidth =  this.offsetWidth || 0;
		} );

		inserted.remove();
	},

	/**
	 * Set a column's visibility.
	 *
	 * We don't use DataTables' column visibility controls in order to ensure
	 * that column visibility can Responsive can no-exist. Since only IE8+ is
	 * supported (and all evergreen browsers of course) the control of the
	 * display attribute works well.
	 *
	 * @param {integer} col      Column index
	 * @param {boolean} showHide Show or hide (true or false)
	 * @private
	 */
	_setColumnVis: function ( col, showHide )
	{
		var dt = this.s.dt;
		var display = showHide ? '' : 'none'; // empty string will remove the attr

		$( dt.column( col ).header() ).css( 'display', display );
		$( dt.column( col ).footer() ).css( 'display', display );
		dt.column( col ).nodes().to$().css( 'display', display );

		// If the are child nodes stored, we might need to reinsert them
		if ( ! $.isEmptyObject( _childNodeStore ) ) {
			dt.cells( null, col ).indexes().each( function (idx) {
				_childNodesRestore( dt, idx.row, idx.column );
			} );
		}
	},


	/**
	 * Update the cell tab indexes for keyboard accessibility. This is called on
	 * every table draw - that is potentially inefficient, but also the least
	 * complex option given that column visibility can change on the fly. Its a
	 * shame user-focus was removed from CSS 3 UI, as it would have solved this
	 * issue with a single CSS statement.
	 *
	 * @private
	 */
	_tabIndexes: function ()
	{
		var dt = this.s.dt;
		var cells = dt.cells( { page: 'current' } ).nodes().to$();
		var ctx = dt.settings()[0];
		var target = this.c.details.target;

		cells.filter( '[data-dtr-keyboard]' ).removeData( '[data-dtr-keyboard]' );

		if ( typeof target === 'number' ) {
			dt.cells( null, target, { page: 'current' } ).nodes().to$()
				.attr( 'tabIndex', ctx.iTabIndex )
				.data( 'dtr-keyboard', 1 );
		}
		else {
			// This is a bit of a hack - we need to limit the selected nodes to just
			// those of this table
			if ( target === 'td:first-child, th:first-child' ) {
				target = '>td:first-child, >th:first-child';
			}

			$( target, dt.rows( { page: 'current' } ).nodes() )
				.attr( 'tabIndex', ctx.iTabIndex )
				.data( 'dtr-keyboard', 1 );
		}
	}
} );


/**
 * List of default breakpoints. Each item in the array is an object with two
 * properties:
 *
 * * `name` - the breakpoint name.
 * * `width` - the breakpoint width
 *
 * @name Responsive.breakpoints
 * @static
 */
Responsive.breakpoints = [
	{ name: 'desktop',  width: Infinity },
	{ name: 'tablet-l', width: 1024 },
	{ name: 'tablet-p', width: 768 },
	{ name: 'mobile-l', width: 480 },
	{ name: 'mobile-p', width: 320 }
];


/**
 * Display methods - functions which define how the hidden data should be shown
 * in the table.
 *
 * @namespace
 * @name Responsive.defaults
 * @static
 */
Responsive.display = {
	childRow: function ( row, update, render ) {
		if ( update ) {
			if ( $(row.node()).hasClass('parent') ) {
				row.child( render(), 'child' ).show();

				return true;
			}
		}
		else {
			if ( ! row.child.isShown()  ) {
				row.child( render(), 'child' ).show();
				$( row.node() ).addClass( 'parent' );

				return true;
			}
			else {
				row.child( false );
				$( row.node() ).removeClass( 'parent' );

				return false;
			}
		}
	},

	childRowImmediate: function ( row, update, render ) {
		if ( (! update && row.child.isShown()) || ! row.responsive.hasHidden() ) {
			// User interaction and the row is show, or nothing to show
			row.child( false );
			$( row.node() ).removeClass( 'parent' );

			return false;
		}
		else {
			// Display
			row.child( render(), 'child' ).show();
			$( row.node() ).addClass( 'parent' );

			return true;
		}
	},

	// This is a wrapper so the modal options for Bootstrap and jQuery UI can
	// have options passed into them. This specific one doesn't need to be a
	// function but it is for consistency in the `modal` name
	modal: function ( options ) {
		return function ( row, update, render ) {
			if ( ! update ) {
				// Show a modal
				var close = function () {
					modal.remove(); // will tidy events for us
					$(document).off( 'keypress.dtr' );
				};

				var modal = $('<div class="dtr-modal"/>')
					.append( $('<div class="dtr-modal-display"/>')
						.append( $('<div class="dtr-modal-content"/>')
							.append( render() )
						)
						.append( $('<div class="dtr-modal-close">&times;</div>' )
							.click( function () {
								close();
							} )
						)
					)
					.append( $('<div class="dtr-modal-background"/>')
						.click( function () {
							close();
						} )
					)
					.appendTo( 'body' );

				$(document).on( 'keyup.dtr', function (e) {
					if ( e.keyCode === 27 ) {
						e.stopPropagation();

						close();
					}
				} );
			}
			else {
				$('div.dtr-modal-content')
					.empty()
					.append( render() );
			}

			if ( options && options.header ) {
				$('div.dtr-modal-content').prepend(
					'<h2>'+options.header( row )+'</h2>'
				);
			}
		};
	}
};


var _childNodeStore = {};

function _childNodes( dt, row, col ) {
	var name = row+'-'+col;

	if ( _childNodeStore[ name ] ) {
		return _childNodeStore[ name ];
	}

	// https://jsperf.com/childnodes-array-slice-vs-loop
	var nodes = [];
	var children = dt.cell( row, col ).node().childNodes;
	for ( var i=0, ien=children.length ; i<ien ; i++ ) {
		nodes.push( children[i] );
	}

	_childNodeStore[ name ] = nodes;

	return nodes;
}

function _childNodesRestore( dt, row, col ) {
	var name = row+'-'+col;

	if ( ! _childNodeStore[ name ] ) {
		return;
	}

	var node = dt.cell( row, col ).node();
	var store = _childNodeStore[ name ];
	var parent = store[0].parentNode;
	var parentChildren = parent.childNodes;
	var a = [];

	for ( var i=0, ien=parentChildren.length ; i<ien ; i++ ) {
		a.push( parentChildren[i] );
	}

	for ( var j=0, jen=a.length ; j<jen ; j++ ) {
		node.appendChild( a[j] );
	}

	_childNodeStore[ name ] = undefined;
}


/**
 * Display methods - functions which define how the hidden data should be shown
 * in the table.
 *
 * @namespace
 * @name Responsive.defaults
 * @static
 */
Responsive.renderer = {
	listHiddenNodes: function () {
		return function ( api, rowIdx, columns ) {
			var ul = $('<ul data-dtr-index="'+rowIdx+'" class="dtr-details"/>');
			var found = false;

			var data = $.each( columns, function ( i, col ) {
				if ( col.hidden ) {
					$(
						'<li data-dtr-index="'+col.columnIndex+'" data-dt-row="'+col.rowIndex+'" data-dt-column="'+col.columnIndex+'">'+
							'<span class="dtr-title">'+
								col.title+
							'</span> '+
						'</li>'
					)
						.append( $('<span class="dtr-data"/>').append( _childNodes( api, col.rowIndex, col.columnIndex ) ) )// api.cell( col.rowIndex, col.columnIndex ).node().childNodes ) )
						.appendTo( ul );

					found = true;
				}
			} );

			return found ?
				ul :
				false;
		};
	},

	listHidden: function () {
		return function ( api, rowIdx, columns ) {
			var data = $.map( columns, function ( col ) {
				return col.hidden ?
					'<li data-dtr-index="'+col.columnIndex+'" data-dt-row="'+col.rowIndex+'" data-dt-column="'+col.columnIndex+'">'+
						'<span class="dtr-title">'+
							col.title+
						'</span> '+
						'<span class="dtr-data">'+
							col.data+
						'</span>'+
					'</li>' :
					'';
			} ).join('');

			return data ?
				$('<ul data-dtr-index="'+rowIdx+'" class="dtr-details"/>').append( data ) :
				false;
		}
	},

	tableAll: function ( options ) {
		options = $.extend( {
			tableClass: ''
		}, options );

		return function ( api, rowIdx, columns ) {
			var data = $.map( columns, function ( col ) {
				return '<tr data-dt-row="'+col.rowIndex+'" data-dt-column="'+col.columnIndex+'">'+
						'<td>'+col.title+':'+'</td> '+
						'<td>'+col.data+'</td>'+
					'</tr>';
			} ).join('');

			return $('<table class="'+options.tableClass+' dtr-details" width="100%"/>').append( data );
		}
	}
};

/**
 * Responsive default settings for initialisation
 *
 * @namespace
 * @name Responsive.defaults
 * @static
 */
Responsive.defaults = {
	/**
	 * List of breakpoints for the instance. Note that this means that each
	 * instance can have its own breakpoints. Additionally, the breakpoints
	 * cannot be changed once an instance has been creased.
	 *
	 * @type {Array}
	 * @default Takes the value of `Responsive.breakpoints`
	 */
	breakpoints: Responsive.breakpoints,

	/**
	 * Enable / disable auto hiding calculations. It can help to increase
	 * performance slightly if you disable this option, but all columns would
	 * need to have breakpoint classes assigned to them
	 *
	 * @type {Boolean}
	 * @default  `true`
	 */
	auto: true,

	/**
	 * Details control. If given as a string value, the `type` property of the
	 * default object is set to that value, and the defaults used for the rest
	 * of the object - this is for ease of implementation.
	 *
	 * The object consists of the following properties:
	 *
	 * * `display` - A function that is used to show and hide the hidden details
	 * * `renderer` - function that is called for display of the child row data.
	 *   The default function will show the data from the hidden columns
	 * * `target` - Used as the selector for what objects to attach the child
	 *   open / close to
	 * * `type` - `false` to disable the details display, `inline` or `column`
	 *   for the two control types
	 *
	 * @type {Object|string}
	 */
	details: {
		display: Responsive.display.childRow,

		renderer: Responsive.renderer.listHidden(),

		target: 0,

		type: 'inline'
	},

	/**
	 * Orthogonal data request option. This is used to define the data type
	 * requested when Responsive gets the data to show in the child row.
	 *
	 * @type {String}
	 */
	orthogonal: 'display'
};


/*
 * API
 */
var Api = $.fn.dataTable.Api;

// Doesn't do anything - work around for a bug in DT... Not documented
Api.register( 'responsive()', function () {
	return this;
} );

Api.register( 'responsive.index()', function ( li ) {
	li = $(li);

	return {
		column: li.data('dtr-index'),
		row:    li.parent().data('dtr-index')
	};
} );

Api.register( 'responsive.rebuild()', function () {
	return this.iterator( 'table', function ( ctx ) {
		if ( ctx._responsive ) {
			ctx._responsive._classLogic();
		}
	} );
} );

Api.register( 'responsive.recalc()', function () {
	return this.iterator( 'table', function ( ctx ) {
		if ( ctx._responsive ) {
			ctx._responsive._resizeAuto();
			ctx._responsive._resize();
		}
	} );
} );

Api.register( 'responsive.hasHidden()', function () {
	var ctx = this.context[0];

	return ctx._responsive ?
		$.inArray( false, ctx._responsive.s.current ) !== -1 :
		false;
} );

Api.registerPlural( 'columns().responsiveHidden()', 'column().responsiveHidden()', function () {
	return this.iterator( 'column', function ( settings, column ) {
		return settings._responsive ?
			settings._responsive.s.current[ column ] :
			false;
	}, 1 );
} );


/**
 * Version information
 *
 * @name Responsive.version
 * @static
 */
Responsive.version = '2.2.2';


$.fn.dataTable.Responsive = Responsive;
$.fn.DataTable.Responsive = Responsive;

// Attach a listener to the document which listens for DataTables initialisation
// events so we can automatically initialise
$(document).on( 'preInit.dt.dtr', function (e, settings, json) {
	if ( e.namespace !== 'dt' ) {
		return;
	}

	if ( $(settings.nTable).hasClass( 'responsive' ) ||
		 $(settings.nTable).hasClass( 'dt-responsive' ) ||
		 settings.oInit.responsive ||
		 DataTable.defaults.responsive
	) {
		var init = settings.oInit.responsive;

		if ( init !== false ) {
			new Responsive( settings, $.isPlainObject( init ) ? init : {}  );
		}
	}
} );


return Responsive;
}));


/*! Select for DataTables 1.3.0
 * 2015-2018 SpryMedia Ltd - datatables.net/license/mit
 */

/**
 * @summary     Select for DataTables
 * @description A collection of API methods, events and buttons for DataTables
 *   that provides selection options of the items in a DataTable
 * @version     1.3.0
 * @file        dataTables.select.js
 * @author      SpryMedia Ltd (www.sprymedia.co.uk)
 * @contact     datatables.net/forums
 * @copyright   Copyright 2015-2018 SpryMedia Ltd.
 *
 * This source file is free software, available under the following license:
 *   MIT license - http://datatables.net/license/mit
 *
 * This source file is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
 * or FITNESS FOR A PARTICULAR PURPOSE. See the license files for details.
 *
 * For details please refer to: http://www.datatables.net/extensions/select
 */
(function( factory ){
	if ( typeof define === 'function' && define.amd ) {
		// AMD
		define( ['jquery', 'datatables.net'], function ( $ ) {
			return factory( $, window, document );
		} );
	}
	else if ( typeof exports === 'object' ) {
		// CommonJS
		module.exports = function (root, $) {
			if ( ! root ) {
				root = window;
			}

			if ( ! $ || ! $.fn.dataTable ) {
				$ = require('datatables.net')(root, $).$;
			}

			return factory( $, root, root.document );
		};
	}
	else {
		// Browser
		factory( jQuery, window, document );
	}
}(function( $, window, document, undefined ) {
'use strict';
var DataTable = $.fn.dataTable;


// Version information for debugger
DataTable.select = {};

DataTable.select.version = '1.3.0';

DataTable.select.init = function ( dt ) {
	var ctx = dt.settings()[0];
	var init = ctx.oInit.select;
	var defaults = DataTable.defaults.select;
	var opts = init === undefined ?
		defaults :
		init;

	// Set defaults
	var items = 'row';
	var style = 'api';
	var blurable = false;
	var info = true;
	var selector = 'td, th';
	var className = 'selected';
	var setStyle = false;

	ctx._select = {};

	// Initialisation customisations
	if ( opts === true ) {
		style = 'os';
		setStyle = true;
	}
	else if ( typeof opts === 'string' ) {
		style = opts;
		setStyle = true;
	}
	else if ( $.isPlainObject( opts ) ) {
		if ( opts.blurable !== undefined ) {
			blurable = opts.blurable;
		}

		if ( opts.info !== undefined ) {
			info = opts.info;
		}

		if ( opts.items !== undefined ) {
			items = opts.items;
		}

		if ( opts.style !== undefined ) {
			style = opts.style;
			setStyle = true;
		}
		else {
			style = 'os';
			setStyle = true;
		}

		if ( opts.selector !== undefined ) {
			selector = opts.selector;
		}

		if ( opts.className !== undefined ) {
			className = opts.className;
		}
	}

	dt.select.selector( selector );
	dt.select.items( items );
	dt.select.style( style );
	dt.select.blurable( blurable );
	dt.select.info( info );
	ctx._select.className = className;


	// Sort table based on selected rows. Requires Select Datatables extension
	$.fn.dataTable.ext.order['select-checkbox'] = function ( settings, col ) {
		return this.api().column( col, {order: 'index'} ).nodes().map( function ( td ) {
			if ( settings._select.items === 'row' ) {
				return $( td ).parent().hasClass( settings._select.className );
			} else if ( settings._select.items === 'cell' ) {
				return $( td ).hasClass( settings._select.className );
			}
			return false;
		});
	};

	// If the init options haven't enabled select, but there is a selectable
	// class name, then enable
	if ( ! setStyle && $( dt.table().node() ).hasClass( 'selectable' ) ) {
		dt.select.style( 'os' );
	}
};

/*

Select is a collection of API methods, event handlers, event emitters and
buttons (for the `Buttons` extension) for DataTables. It provides the following
features, with an overview of how they are implemented:

## Selection of rows, columns and cells. Whether an item is selected or not is
   stored in:

* rows: a `_select_selected` property which contains a boolean value of the
  DataTables' `aoData` object for each row
* columns: a `_select_selected` property which contains a boolean value of the
  DataTables' `aoColumns` object for each column
* cells: a `_selected_cells` property which contains an array of boolean values
  of the `aoData` object for each row. The array is the same length as the
  columns array, with each element of it representing a cell.

This method of using boolean flags allows Select to operate when nodes have not
been created for rows / cells (DataTables' defer rendering feature).

## API methods

A range of API methods are available for triggering selection and de-selection
of rows. Methods are also available to configure the selection events that can
be triggered by an end user (such as which items are to be selected). To a large
extent, these of API methods *is* Select. It is basically a collection of helper
functions that can be used to select items in a DataTable.

Configuration of select is held in the object `_select` which is attached to the
DataTables settings object on initialisation. Select being available on a table
is not optional when Select is loaded, but its default is for selection only to
be available via the API - so the end user wouldn't be able to select rows
without additional configuration.

The `_select` object contains the following properties:

```
{
	items:string     - Can be `rows`, `columns` or `cells`. Defines what item 
	                   will be selected if the user is allowed to activate row
	                   selection using the mouse.
	style:string     - Can be `none`, `single`, `multi` or `os`. Defines the
	                   interaction style when selecting items
	blurable:boolean - If row selection can be cleared by clicking outside of
	                   the table
	info:boolean     - If the selection summary should be shown in the table
	                   information elements
}
```

In addition to the API methods, Select also extends the DataTables selector
options for rows, columns and cells adding a `selected` option to the selector
options object, allowing the developer to select only selected items or
unselected items.

## Mouse selection of items

Clicking on items can be used to select items. This is done by a simple event
handler that will select the items using the API methods.

 */


/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 * Local functions
 */

/**
 * Add one or more cells to the selection when shift clicking in OS selection
 * style cell selection.
 *
 * Cell range is more complicated than row and column as we want to select
 * in the visible grid rather than by index in sequence. For example, if you
 * click first in cell 1-1 and then shift click in 2-2 - cells 1-2 and 2-1
 * should also be selected (and not 1-3, 1-4. etc)
 * 
 * @param  {DataTable.Api} dt   DataTable
 * @param  {object}        idx  Cell index to select to
 * @param  {object}        last Cell index to select from
 * @private
 */
function cellRange( dt, idx, last )
{
	var indexes;
	var columnIndexes;
	var rowIndexes;
	var selectColumns = function ( start, end ) {
		if ( start > end ) {
			var tmp = end;
			end = start;
			start = tmp;
		}
		
		var record = false;
		return dt.columns( ':visible' ).indexes().filter( function (i) {
			if ( i === start ) {
				record = true;
			}
			
			if ( i === end ) { // not else if, as start might === end
				record = false;
				return true;
			}

			return record;
		} );
	};

	var selectRows = function ( start, end ) {
		var indexes = dt.rows( { search: 'applied' } ).indexes();

		// Which comes first - might need to swap
		if ( indexes.indexOf( start ) > indexes.indexOf( end ) ) {
			var tmp = end;
			end = start;
			start = tmp;
		}

		var record = false;
		return indexes.filter( function (i) {
			if ( i === start ) {
				record = true;
			}
			
			if ( i === end ) {
				record = false;
				return true;
			}

			return record;
		} );
	};

	if ( ! dt.cells( { selected: true } ).any() && ! last ) {
		// select from the top left cell to this one
		columnIndexes = selectColumns( 0, idx.column );
		rowIndexes = selectRows( 0 , idx.row );
	}
	else {
		// Get column indexes between old and new
		columnIndexes = selectColumns( last.column, idx.column );
		rowIndexes = selectRows( last.row , idx.row );
	}

	indexes = dt.cells( rowIndexes, columnIndexes ).flatten();

	if ( ! dt.cells( idx, { selected: true } ).any() ) {
		// Select range
		dt.cells( indexes ).select();
	}
	else {
		// Deselect range
		dt.cells( indexes ).deselect();
	}
}

/**
 * Disable mouse selection by removing the selectors
 *
 * @param {DataTable.Api} dt DataTable to remove events from
 * @private
 */
function disableMouseSelection( dt )
{
	var ctx = dt.settings()[0];
	var selector = ctx._select.selector;

	$( dt.table().container() )
		.off( 'mousedown.dtSelect', selector )
		.off( 'mouseup.dtSelect', selector )
		.off( 'click.dtSelect', selector );

	$('body').off( 'click.dtSelect' + dt.table().node().id );
}

/**
 * Attach mouse listeners to the table to allow mouse selection of items
 *
 * @param {DataTable.Api} dt DataTable to remove events from
 * @private
 */
function enableMouseSelection ( dt )
{
	var container = $( dt.table().container() );
	var ctx = dt.settings()[0];
	var selector = ctx._select.selector;
	var matchSelection;

	container
		.on( 'mousedown.dtSelect', selector, function(e) {
			// Disallow text selection for shift clicking on the table so multi
			// element selection doesn't look terrible!
			if ( e.shiftKey || e.metaKey || e.ctrlKey ) {
				container
					.css( '-moz-user-select', 'none' )
					.one('selectstart.dtSelect', selector, function () {
						return false;
					} );
			}

			if ( window.getSelection ) {
				matchSelection = window.getSelection();
			}
		} )
		.on( 'mouseup.dtSelect', selector, function() {
			// Allow text selection to occur again, Mozilla style (tested in FF
			// 35.0.1 - still required)
			container.css( '-moz-user-select', '' );
		} )
		.on( 'click.dtSelect', selector, function ( e ) {
			var items = dt.select.items();
			var idx;

			// If text was selected (click and drag), then we shouldn't change
			// the row's selected state
			if ( matchSelection ) {
				var selection = window.getSelection();

				// If the element that contains the selection is not in the table, we can ignore it
				// This can happen if the developer selects text from the click event
				if ( ! selection.anchorNode || $(selection.anchorNode).closest('table')[0] === dt.table().node() ) {
					if ( selection !== matchSelection ) {
						return;
					}
				}
			}

			var ctx = dt.settings()[0];
			var wrapperClass = $.trim(dt.settings()[0].oClasses.sWrapper).replace(/ +/g, '.');

			// Ignore clicks inside a sub-table
			if ( $(e.target).closest('div.'+wrapperClass)[0] != dt.table().container() ) {
				return;
			}

			var cell = dt.cell( $(e.target).closest('td, th') );

			// Check the cell actually belongs to the host DataTable (so child
			// rows, etc, are ignored)
			if ( ! cell.any() ) {
				return;
			}

			var event = $.Event('user-select.dt');
			eventTrigger( dt, event, [ items, cell, e ] );

			if ( event.isDefaultPrevented() ) {
				return;
			}

			var cellIndex = cell.index();
			if ( items === 'row' ) {
				idx = cellIndex.row;
				typeSelect( e, dt, ctx, 'row', idx );
			}
			else if ( items === 'column' ) {
				idx = cell.index().column;
				typeSelect( e, dt, ctx, 'column', idx );
			}
			else if ( items === 'cell' ) {
				idx = cell.index();
				typeSelect( e, dt, ctx, 'cell', idx );
			}

			ctx._select_lastCell = cellIndex;
		} );

	// Blurable
	$('body').on( 'click.dtSelect' + dt.table().node().id, function ( e ) {
		if ( ctx._select.blurable ) {
			// If the click was inside the DataTables container, don't blur
			if ( $(e.target).parents().filter( dt.table().container() ).length ) {
				return;
			}

			// Ignore elements which have been removed from the DOM (i.e. paging
			// buttons)
			if ( $(e.target).parents('html').length === 0 ) {
			 	return;
			}

			// Don't blur in Editor form
			if ( $(e.target).parents('div.DTE').length ) {
				return;
			}

			clear( ctx, true );
		}
	} );
}

/**
 * Trigger an event on a DataTable
 *
 * @param {DataTable.Api} api      DataTable to trigger events on
 * @param  {boolean}      selected true if selected, false if deselected
 * @param  {string}       type     Item type acting on
 * @param  {boolean}      any      Require that there are values before
 *     triggering
 * @private
 */
function eventTrigger ( api, type, args, any )
{
	if ( any && ! api.flatten().length ) {
		return;
	}

	if ( typeof type === 'string' ) {
		type = type +'.dt';
	}

	args.unshift( api );

	$(api.table().node()).trigger( type, args );
}

/**
 * Update the information element of the DataTable showing information about the
 * items selected. This is done by adding tags to the existing text
 * 
 * @param {DataTable.Api} api DataTable to update
 * @private
 */
function info ( api )
{
	var ctx = api.settings()[0];

	if ( ! ctx._select.info || ! ctx.aanFeatures.i ) {
		return;
	}

	if ( api.select.style() === 'api' ) {
		return;
	}

	var rows    = api.rows( { selected: true } ).flatten().length;
	var columns = api.columns( { selected: true } ).flatten().length;
	var cells   = api.cells( { selected: true } ).flatten().length;

	var add = function ( el, name, num ) {
		el.append( $('<span class="select-item"/>').append( api.i18n(
			'select.'+name+'s',
			{ _: '%d '+name+'s selected', 0: '', 1: '1 '+name+' selected' },
			num
		) ) );
	};

	// Internal knowledge of DataTables to loop over all information elements
	$.each( ctx.aanFeatures.i, function ( i, el ) {
		el = $(el);

		var output  = $('<span class="select-info"/>');
		add( output, 'row', rows );
		add( output, 'column', columns );
		add( output, 'cell', cells  );

		var exisiting = el.children('span.select-info');
		if ( exisiting.length ) {
			exisiting.remove();
		}

		if ( output.text() !== '' ) {
			el.append( output );
		}
	} );
}

/**
 * Initialisation of a new table. Attach event handlers and callbacks to allow
 * Select to operate correctly.
 *
 * This will occur _after_ the initial DataTables initialisation, although
 * before Ajax data is rendered, if there is ajax data
 *
 * @param  {DataTable.settings} ctx Settings object to operate on
 * @private
 */
function init ( ctx ) {
	var api = new DataTable.Api( ctx );

	// Row callback so that classes can be added to rows and cells if the item
	// was selected before the element was created. This will happen with the
	// `deferRender` option enabled.
	// 
	// This method of attaching to `aoRowCreatedCallback` is a hack until
	// DataTables has proper events for row manipulation If you are reviewing
	// this code to create your own plug-ins, please do not do this!
	ctx.aoRowCreatedCallback.push( {
		fn: function ( row, data, index ) {
			var i, ien;
			var d = ctx.aoData[ index ];

			// Row
			if ( d._select_selected ) {
				$( row ).addClass( ctx._select.className );
			}

			// Cells and columns - if separated out, we would need to do two
			// loops, so it makes sense to combine them into a single one
			for ( i=0, ien=ctx.aoColumns.length ; i<ien ; i++ ) {
				if ( ctx.aoColumns[i]._select_selected || (d._selected_cells && d._selected_cells[i]) ) {
					$(d.anCells[i]).addClass( ctx._select.className );
				}
			}
		},
		sName: 'select-deferRender'
	} );

	// On Ajax reload we want to reselect all rows which are currently selected,
	// if there is an rowId (i.e. a unique value to identify each row with)
	api.on( 'preXhr.dt.dtSelect', function () {
		// note that column selection doesn't need to be cached and then
		// reselected, as they are already selected
		var rows = api.rows( { selected: true } ).ids( true ).filter( function ( d ) {
			return d !== undefined;
		} );

		var cells = api.cells( { selected: true } ).eq(0).map( function ( cellIdx ) {
			var id = api.row( cellIdx.row ).id( true );
			return id ?
				{ row: id, column: cellIdx.column } :
				undefined;
		} ).filter( function ( d ) {
			return d !== undefined;
		} );

		// On the next draw, reselect the currently selected items
		api.one( 'draw.dt.dtSelect', function () {
			api.rows( rows ).select();

			// `cells` is not a cell index selector, so it needs a loop
			if ( cells.any() ) {
				cells.each( function ( id ) {
					api.cells( id.row, id.column ).select();
				} );
			}
		} );
	} );

	// Update the table information element with selected item summary
	api.on( 'draw.dtSelect.dt select.dtSelect.dt deselect.dtSelect.dt info.dt', function () {
		info( api );
	} );

	// Clean up and release
	api.on( 'destroy.dtSelect', function () {
		disableMouseSelection( api );
		api.off( '.dtSelect' );
	} );
}

/**
 * Add one or more items (rows or columns) to the selection when shift clicking
 * in OS selection style
 *
 * @param  {DataTable.Api} dt   DataTable
 * @param  {string}        type Row or column range selector
 * @param  {object}        idx  Item index to select to
 * @param  {object}        last Item index to select from
 * @private
 */
function rowColumnRange( dt, type, idx, last )
{
	// Add a range of rows from the last selected row to this one
	var indexes = dt[type+'s']( { search: 'applied' } ).indexes();
	var idx1 = $.inArray( last, indexes );
	var idx2 = $.inArray( idx, indexes );

	if ( ! dt[type+'s']( { selected: true } ).any() && idx1 === -1 ) {
		// select from top to here - slightly odd, but both Windows and Mac OS
		// do this
		indexes.splice( $.inArray( idx, indexes )+1, indexes.length );
	}
	else {
		// reverse so we can shift click 'up' as well as down
		if ( idx1 > idx2 ) {
			var tmp = idx2;
			idx2 = idx1;
			idx1 = tmp;
		}

		indexes.splice( idx2+1, indexes.length );
		indexes.splice( 0, idx1 );
	}

	if ( ! dt[type]( idx, { selected: true } ).any() ) {
		// Select range
		dt[type+'s']( indexes ).select();
	}
	else {
		// Deselect range - need to keep the clicked on row selected
		indexes.splice( $.inArray( idx, indexes ), 1 );
		dt[type+'s']( indexes ).deselect();
	}
}

/**
 * Clear all selected items
 *
 * @param  {DataTable.settings} ctx Settings object of the host DataTable
 * @param  {boolean} [force=false] Force the de-selection to happen, regardless
 *     of selection style
 * @private
 */
function clear( ctx, force )
{
	if ( force || ctx._select.style === 'single' ) {
		var api = new DataTable.Api( ctx );
		
		api.rows( { selected: true } ).deselect();
		api.columns( { selected: true } ).deselect();
		api.cells( { selected: true } ).deselect();
	}
}

/**
 * Select items based on the current configuration for style and items.
 *
 * @param  {object}             e    Mouse event object
 * @param  {DataTables.Api}     dt   DataTable
 * @param  {DataTable.settings} ctx  Settings object of the host DataTable
 * @param  {string}             type Items to select
 * @param  {int|object}         idx  Index of the item to select
 * @private
 */
function typeSelect ( e, dt, ctx, type, idx )
{
	var style = dt.select.style();
	var isSelected = dt[type]( idx, { selected: true } ).any();

	if ( style === 'os' ) {
		if ( e.ctrlKey || e.metaKey ) {
			// Add or remove from the selection
			dt[type]( idx ).select( ! isSelected );
		}
		else if ( e.shiftKey ) {
			if ( type === 'cell' ) {
				cellRange( dt, idx, ctx._select_lastCell || null );
			}
			else {
				rowColumnRange( dt, type, idx, ctx._select_lastCell ?
					ctx._select_lastCell[type] :
					null
				);
			}
		}
		else {
			// No cmd or shift click - deselect if selected, or select
			// this row only
			var selected = dt[type+'s']( { selected: true } );

			if ( isSelected && selected.flatten().length === 1 ) {
				dt[type]( idx ).deselect();
			}
			else {
				selected.deselect();
				dt[type]( idx ).select();
			}
		}
	} else if ( style == 'multi+shift' ) {
		if ( e.shiftKey ) {
			if ( type === 'cell' ) {
				cellRange( dt, idx, ctx._select_lastCell || null );
			}
			else {
				rowColumnRange( dt, type, idx, ctx._select_lastCell ?
					ctx._select_lastCell[type] :
					null
				);
			}
		}
		else {
			dt[ type ]( idx ).select( ! isSelected );
		}
	}
	else {
		dt[ type ]( idx ).select( ! isSelected );
	}
}



/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 * DataTables selectors
 */

// row and column are basically identical just assigned to different properties
// and checking a different array, so we can dynamically create the functions to
// reduce the code size
$.each( [
	{ type: 'row', prop: 'aoData' },
	{ type: 'column', prop: 'aoColumns' }
], function ( i, o ) {
	DataTable.ext.selector[ o.type ].push( function ( settings, opts, indexes ) {
		var selected = opts.selected;
		var data;
		var out = [];

		if ( selected !== true && selected !== false ) {
			return indexes;
		}

		for ( var i=0, ien=indexes.length ; i<ien ; i++ ) {
			data = settings[ o.prop ][ indexes[i] ];

			if ( (selected === true && data._select_selected === true) ||
			     (selected === false && ! data._select_selected )
			) {
				out.push( indexes[i] );
			}
		}

		return out;
	} );
} );

DataTable.ext.selector.cell.push( function ( settings, opts, cells ) {
	var selected = opts.selected;
	var rowData;
	var out = [];

	if ( selected === undefined ) {
		return cells;
	}

	for ( var i=0, ien=cells.length ; i<ien ; i++ ) {
		rowData = settings.aoData[ cells[i].row ];

		if ( (selected === true && rowData._selected_cells && rowData._selected_cells[ cells[i].column ] === true) ||
		     (selected === false && ( ! rowData._selected_cells || ! rowData._selected_cells[ cells[i].column ] ) )
		) {
			out.push( cells[i] );
		}
	}

	return out;
} );



/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 * DataTables API
 *
 * For complete documentation, please refer to the docs/api directory or the
 * DataTables site
 */

// Local variables to improve compression
var apiRegister = DataTable.Api.register;
var apiRegisterPlural = DataTable.Api.registerPlural;

apiRegister( 'select()', function () {
	return this.iterator( 'table', function ( ctx ) {
		DataTable.select.init( new DataTable.Api( ctx ) );
	} );
} );

apiRegister( 'select.blurable()', function ( flag ) {
	if ( flag === undefined ) {
		return this.context[0]._select.blurable;
	}

	return this.iterator( 'table', function ( ctx ) {
		ctx._select.blurable = flag;
	} );
} );

apiRegister( 'select.info()', function ( flag ) {
	if ( info === undefined ) {
		return this.context[0]._select.info;
	}

	return this.iterator( 'table', function ( ctx ) {
		ctx._select.info = flag;
	} );
} );

apiRegister( 'select.items()', function ( items ) {
	if ( items === undefined ) {
		return this.context[0]._select.items;
	}

	return this.iterator( 'table', function ( ctx ) {
		ctx._select.items = items;

		eventTrigger( new DataTable.Api( ctx ), 'selectItems', [ items ] );
	} );
} );

// Takes effect from the _next_ selection. None disables future selection, but
// does not clear the current selection. Use the `deselect` methods for that
apiRegister( 'select.style()', function ( style ) {
	if ( style === undefined ) {
		return this.context[0]._select.style;
	}

	return this.iterator( 'table', function ( ctx ) {
		ctx._select.style = style;

		if ( ! ctx._select_init ) {
			init( ctx );
		}

		// Add / remove mouse event handlers. They aren't required when only
		// API selection is available
		var dt = new DataTable.Api( ctx );
		disableMouseSelection( dt );
		
		if ( style !== 'api' ) {
			enableMouseSelection( dt );
		}

		eventTrigger( new DataTable.Api( ctx ), 'selectStyle', [ style ] );
	} );
} );

apiRegister( 'select.selector()', function ( selector ) {
	if ( selector === undefined ) {
		return this.context[0]._select.selector;
	}

	return this.iterator( 'table', function ( ctx ) {
		disableMouseSelection( new DataTable.Api( ctx ) );

		ctx._select.selector = selector;

		if ( ctx._select.style !== 'api' ) {
			enableMouseSelection( new DataTable.Api( ctx ) );
		}
	} );
} );



apiRegisterPlural( 'rows().select()', 'row().select()', function ( select ) {
	var api = this;

	if ( select === false ) {
		return this.deselect();
	}

	this.iterator( 'row', function ( ctx, idx ) {
		clear( ctx );

		ctx.aoData[ idx ]._select_selected = true;
		$( ctx.aoData[ idx ].nTr ).addClass( ctx._select.className );
	} );

	this.iterator( 'table', function ( ctx, i ) {
		eventTrigger( api, 'select', [ 'row', api[i] ], true );
	} );

	return this;
} );

apiRegisterPlural( 'columns().select()', 'column().select()', function ( select ) {
	var api = this;

	if ( select === false ) {
		return this.deselect();
	}

	this.iterator( 'column', function ( ctx, idx ) {
		clear( ctx );

		ctx.aoColumns[ idx ]._select_selected = true;

		var column = new DataTable.Api( ctx ).column( idx );

		$( column.header() ).addClass( ctx._select.className );
		$( column.footer() ).addClass( ctx._select.className );

		column.nodes().to$().addClass( ctx._select.className );
	} );

	this.iterator( 'table', function ( ctx, i ) {
		eventTrigger( api, 'select', [ 'column', api[i] ], true );
	} );

	return this;
} );

apiRegisterPlural( 'cells().select()', 'cell().select()', function ( select ) {
	var api = this;

	if ( select === false ) {
		return this.deselect();
	}

	this.iterator( 'cell', function ( ctx, rowIdx, colIdx ) {
		clear( ctx );

		var data = ctx.aoData[ rowIdx ];

		if ( data._selected_cells === undefined ) {
			data._selected_cells = [];
		}

		data._selected_cells[ colIdx ] = true;

		if ( data.anCells ) {
			$( data.anCells[ colIdx ] ).addClass( ctx._select.className );
		}
	} );

	this.iterator( 'table', function ( ctx, i ) {
		eventTrigger( api, 'select', [ 'cell', api[i] ], true );
	} );

	return this;
} );


apiRegisterPlural( 'rows().deselect()', 'row().deselect()', function () {
	var api = this;

	this.iterator( 'row', function ( ctx, idx ) {
		ctx.aoData[ idx ]._select_selected = false;
		$( ctx.aoData[ idx ].nTr ).removeClass( ctx._select.className );
	} );

	this.iterator( 'table', function ( ctx, i ) {
		eventTrigger( api, 'deselect', [ 'row', api[i] ], true );
	} );

	return this;
} );

apiRegisterPlural( 'columns().deselect()', 'column().deselect()', function () {
	var api = this;

	this.iterator( 'column', function ( ctx, idx ) {
		ctx.aoColumns[ idx ]._select_selected = false;

		var api = new DataTable.Api( ctx );
		var column = api.column( idx );

		$( column.header() ).removeClass( ctx._select.className );
		$( column.footer() ).removeClass( ctx._select.className );

		// Need to loop over each cell, rather than just using
		// `column().nodes()` as cells which are individually selected should
		// not have the `selected` class removed from them
		api.cells( null, idx ).indexes().each( function (cellIdx) {
			var data = ctx.aoData[ cellIdx.row ];
			var cellSelected = data._selected_cells;

			if ( data.anCells && (! cellSelected || ! cellSelected[ cellIdx.column ]) ) {
				$( data.anCells[ cellIdx.column  ] ).removeClass( ctx._select.className );
			}
		} );
	} );

	this.iterator( 'table', function ( ctx, i ) {
		eventTrigger( api, 'deselect', [ 'column', api[i] ], true );
	} );

	return this;
} );

apiRegisterPlural( 'cells().deselect()', 'cell().deselect()', function () {
	var api = this;

	this.iterator( 'cell', function ( ctx, rowIdx, colIdx ) {
		var data = ctx.aoData[ rowIdx ];

		data._selected_cells[ colIdx ] = false;

		// Remove class only if the cells exist, and the cell is not column
		// selected, in which case the class should remain (since it is selected
		// in the column)
		if ( data.anCells && ! ctx.aoColumns[ colIdx ]._select_selected ) {
			$( data.anCells[ colIdx ] ).removeClass( ctx._select.className );
		}
	} );

	this.iterator( 'table', function ( ctx, i ) {
		eventTrigger( api, 'deselect', [ 'cell', api[i] ], true );
	} );

	return this;
} );



/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 * Buttons
 */
function i18n( label, def ) {
	return function (dt) {
		return dt.i18n( 'buttons.'+label, def );
	};
}

// Common events with suitable namespaces
function namespacedEvents ( config ) {
	var unique = config._eventNamespace;

	return 'draw.dt.DT'+unique+' select.dt.DT'+unique+' deselect.dt.DT'+unique;
}

function enabled ( dt, config ) {
	if ( $.inArray( 'rows', config.limitTo ) !== -1 && dt.rows( { selected: true } ).any() ) {
		return true;
	}

	if ( $.inArray( 'columns', config.limitTo ) !== -1 && dt.columns( { selected: true } ).any() ) {
		return true;
	}

	if ( $.inArray( 'cells', config.limitTo ) !== -1 && dt.cells( { selected: true } ).any() ) {
		return true;
	}

	return false;
}

var _buttonNamespace = 0;

$.extend( DataTable.ext.buttons, {
	selected: {
		text: i18n( 'selected', 'Selected' ),
		className: 'buttons-selected',
		limitTo: [ 'rows', 'columns', 'cells' ],
		init: function ( dt, node, config ) {
			var that = this;
			config._eventNamespace = '.select'+(_buttonNamespace++);

			// .DT namespace listeners are removed by DataTables automatically
			// on table destroy
			dt.on( namespacedEvents(config), function () {
				that.enable( enabled(dt, config) );
			} );

			this.disable();
		},
		destroy: function ( dt, node, config ) {
			dt.off( config._eventNamespace );
		}
	},
	selectedSingle: {
		text: i18n( 'selectedSingle', 'Selected single' ),
		className: 'buttons-selected-single',
		init: function ( dt, node, config ) {
			var that = this;
			config._eventNamespace = '.select'+(_buttonNamespace++);

			dt.on( namespacedEvents(config), function () {
				var count = dt.rows( { selected: true } ).flatten().length +
				            dt.columns( { selected: true } ).flatten().length +
				            dt.cells( { selected: true } ).flatten().length;

				that.enable( count === 1 );
			} );

			this.disable();
		},
		destroy: function ( dt, node, config ) {
			dt.off( config._eventNamespace );
		}
	},
	selectAll: {
		text: i18n( 'selectAll', 'Select all' ),
		className: 'buttons-select-all',
		action: function () {
			var items = this.select.items();
			this[ items+'s' ]().select();
		}
	},
	selectNone: {
		text: i18n( 'selectNone', 'Deselect all' ),
		className: 'buttons-select-none',
		action: function () {
			clear( this.settings()[0], true );
		},
		init: function ( dt, node, config ) {
			var that = this;
			config._eventNamespace = '.select'+(_buttonNamespace++);

			dt.on( namespacedEvents(config), function () {
				var count = dt.rows( { selected: true } ).flatten().length +
				            dt.columns( { selected: true } ).flatten().length +
				            dt.cells( { selected: true } ).flatten().length;

				that.enable( count > 0 );
			} );

			this.disable();
		},
		destroy: function ( dt, node, config ) {
			dt.off( config._eventNamespace );
		}
	}
} );

$.each( [ 'Row', 'Column', 'Cell' ], function ( i, item ) {
	var lc = item.toLowerCase();

	DataTable.ext.buttons[ 'select'+item+'s' ] = {
		text: i18n( 'select'+item+'s', 'Select '+lc+'s' ),
		className: 'buttons-select-'+lc+'s',
		action: function () {
			this.select.items( lc );
		},
		init: function ( dt ) {
			var that = this;

			dt.on( 'selectItems.dt.DT', function ( e, ctx, items ) {
				that.active( items === lc );
			} );
		}
	};
} );



/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 * Initialisation
 */

// DataTables creation - check if select has been defined in the options. Note
// this required that the table be in the document! If it isn't then something
// needs to trigger this method unfortunately. The next major release of
// DataTables will rework the events and address this.
$(document).on( 'preInit.dt.dtSelect', function (e, ctx) {
	if ( e.namespace !== 'dt' ) {
		return;
	}

	DataTable.select.init( new DataTable.Api( ctx ) );
} );


return DataTable.select;
}));


